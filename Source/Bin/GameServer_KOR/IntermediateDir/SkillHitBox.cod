; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CSkillHitBox@@QAE@XZ				; CSkillHitBox::CSkillHitBox
PUBLIC	??1CSkillHitBox@@UAE@XZ				; CSkillHitBox::~CSkillHitBox
PUBLIC	?Init@CSkillHitBox@@QAEXXZ			; CSkillHitBox::Init
PUBLIC	?Check@CSkillHitBox@@QAEHHHH@Z			; CSkillHitBox::Check
PUBLIC	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z		; CSkillHitBox::HitCheck
PUBLIC	?Load@CSkillHitBox@@QAEHPAD@Z			; CSkillHitBox::Load
PUBLIC	??_GCSkillHitBox@@UAEPAXI@Z			; CSkillHitBox::`scalar deleting destructor'
PUBLIC	??_7CSkillHitBox@@6B@				; CSkillHitBox::`vftable'
PUBLIC	?SkillSpearHitBox@@3VCSkillHitBox@@A		; SkillSpearHitBox
PUBLIC	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A	; SkillElectricSparkHitBox
PUBLIC	??_R4CSkillHitBox@@6B@				; CSkillHitBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkillHitBox@@@8			; CSkillHitBox `RTTI Type Descriptor'
PUBLIC	??_R3CSkillHitBox@@8				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkillHitBox@@8				; CSkillHitBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkillHitBox@@8			; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memset:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__OpenFile@12:PROC
EXTRN	__imp___lclose@4:PROC
EXTRN	_abs:PROC
EXTRN	??_ECSkillHitBox@@UAEPAXI@Z:PROC		; CSkillHitBox::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?SkillSpearHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?)	; SkillSpearHitBox
?SkillElectricSparkHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?) ; SkillElectricSparkHitBox
_BSS	ENDS
CRT$XCU	SEGMENT
?SkillSpearHitBox$initializer$@@3P6AXXZA DD FLAT:??__ESkillSpearHitBox@@YAXXZ ; SkillSpearHitBox$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkillHitBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkillHitBox@@8 DD FLAT:??_R0?AVCSkillHitBox@@@8 ; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkillHitBox@@8
rdata$r	SEGMENT
??_R2CSkillHitBox@@8 DD FLAT:??_R1A@?0A@EA@CSkillHitBox@@8 ; CSkillHitBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkillHitBox@@8
rdata$r	SEGMENT
??_R3CSkillHitBox@@8 DD 00H				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkillHitBox@@@8
data$r	SEGMENT
??_R0?AVCSkillHitBox@@@8 DD FLAT:??_7type_info@@6B@	; CSkillHitBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkillHitBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSkillHitBox@@6B@
rdata$r	SEGMENT
??_R4CSkillHitBox@@6B@ DD 00H				; CSkillHitBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkillHitBox@@@8
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_7CSkillHitBox@@6B@
CONST	SEGMENT
??_7CSkillHitBox@@6B@ DD FLAT:??_R4CSkillHitBox@@6B@	; CSkillHitBox::`vftable'
	DD	FLAT:??_ECSkillHitBox@@UAEPAXI@Z
CONST	ENDS
CRT$XCU	SEGMENT
?SkillElectricSparkHitBox$initializer$@@3P6AXXZA DD FLAT:??__ESkillElectricSparkHitBox@@YAXXZ ; SkillElectricSparkHitBox$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FSkillElectricSparkHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic atexit destructor for 'SkillElectricSparkHitBox'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0000e	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FSkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ??__ESkillElectricSparkHitBox@@YAXXZ
text$di	SEGMENT
??__ESkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic initializer for 'SkillElectricSparkHitBox'', COMDAT

; 9    : CSkillHitBox		SkillElectricSparkHitBox;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0000e	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  00013	68 00 00 00 00	 push	 OFFSET ??__FSkillElectricSparkHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__ESkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic initializer for 'SkillElectricSparkHitBox''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FSkillSpearHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillSpearHitBox@@YAXXZ PROC			; `dynamic atexit destructor for 'SkillSpearHitBox'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  0000e	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FSkillSpearHitBox@@YAXXZ ENDP			; `dynamic atexit destructor for 'SkillSpearHitBox''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ??__ESkillSpearHitBox@@YAXXZ
text$di	SEGMENT
??__ESkillSpearHitBox@@YAXXZ PROC			; `dynamic initializer for 'SkillSpearHitBox'', COMDAT

; 8    : CSkillHitBox		SkillSpearHitBox;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  0000e	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  00013	68 00 00 00 00	 push	 OFFSET ??__FSkillSpearHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillSpearHitBox''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__ESkillSpearHitBox@@YAXXZ ENDP			; `dynamic initializer for 'SkillSpearHitBox''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCSkillHitBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSkillHitBox@@UAEPAXI@Z PROC			; CSkillHitBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 08 3e 00 00	 push	 15880			; 00003e08H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCSkillHitBox@@UAEPAXI@Z ENDP			; CSkillHitBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?Load@CSkillHitBox@@QAEHPAD@Z
_TEXT	SEGMENT
_readfilesize$ = -156					; size = 4
_filesize$ = -152					; size = 4
_hfile$ = -148						; size = 4
_ofst$ = -144						; size = 136
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@CSkillHitBox@@QAEHPAD@Z PROC			; CSkillHitBox::Load, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	Init();

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?Init@CSkillHitBox@@QAEXXZ ; CSkillHitBox::Init

; 62   : 
; 63   : 	OFSTRUCT	ofst;
; 64   : 	HFILE hfile = OpenFile(filename, &ofst,  OF_READ);

  00021	6a 00		 push	 0
  00023	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ofst$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0002d	51		 push	 ecx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFile@12
  00034	89 85 6c ff ff
	ff		 mov	 DWORD PTR _hfile$[ebp], eax

; 65   : 
; 66   : 	if( !hfile )

  0003a	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _hfile$[ebp], 0
  00041	75 07		 jne	 SHORT $LN2@Load

; 67   : 		return FALSE;

  00043	33 c0		 xor	 eax, eax
  00045	e9 9c 00 00 00	 jmp	 $LN1@Load
$LN2@Load:

; 68   : 
; 69   : 	DWORD filesize = GetFileSize((HANDLE)hfile, NULL);

  0004a	6a 00		 push	 0
  0004c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00059	89 85 68 ff ff
	ff		 mov	 DWORD PTR _filesize$[ebp], eax

; 70   : 
; 71   : 	if( filesize != sizeof(m_Table) )

  0005f	81 bd 68 ff ff
	ff 04 3e 00 00	 cmp	 DWORD PTR _filesize$[ebp], 15876 ; 00003e04H
  00069	74 11		 je	 SHORT $LN3@Load

; 72   : 	{
; 73   : 		_lclose(hfile);

  0006b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 74   : 		return FALSE;

  00078	33 c0		 xor	 eax, eax
  0007a	eb 6a		 jmp	 SHORT $LN1@Load
$LN3@Load:

; 75   : 	}
; 76   : 	
; 77   : 	DWORD	readfilesize;
; 78   : 	if( !ReadFile((HANDLE)hfile, m_Table, filesize, &readfilesize, NULL) )

  0007c	6a 00		 push	 0
  0007e	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _readfilesize$[ebp]
  00084	50		 push	 eax
  00085	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _filesize$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	83 c2 04	 add	 edx, 4
  00092	52		 push	 edx
  00093	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  00099	50		 push	 eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  000a0	85 c0		 test	 eax, eax
  000a2	75 11		 jne	 SHORT $LN4@Load

; 79   : 	{
; 80   : 		_lclose(hfile);

  000a4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  000aa	50		 push	 eax
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 81   : 		return FALSE;

  000b1	33 c0		 xor	 eax, eax
  000b3	eb 31		 jmp	 SHORT $LN1@Load
$LN4@Load:

; 82   : 	}
; 83   : 
; 84   : 	if( readfilesize != filesize )

  000b5	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _readfilesize$[ebp]
  000bb	3b 85 68 ff ff
	ff		 cmp	 eax, DWORD PTR _filesize$[ebp]
  000c1	74 11		 je	 SHORT $LN5@Load

; 85   : 	{
; 86   : 		_lclose(hfile);

  000c3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 87   : 		return FALSE;

  000d0	33 c0		 xor	 eax, eax
  000d2	eb 12		 jmp	 SHORT $LN1@Load
$LN5@Load:

; 88   : 	}
; 89   : 	_lclose(hfile);

  000d4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _hfile$[ebp]
  000da	50		 push	 eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 90   : 	return TRUE;

  000e1	b8 01 00 00 00	 mov	 eax, 1
$LN1@Load:

; 91   : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ec	33 cd		 xor	 ecx, ebp
  000ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
?Load@CSkillHitBox@@QAEHPAD@Z ENDP			; CSkillHitBox::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z
_TEXT	SEGMENT
_targety$ = -12						; size = 4
_targetx$ = -8						; size = 4
_this$ = -4						; size = 4
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_tx$ = 20						; size = 4
_ty$ = 24						; size = 4
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z PROC		; CSkillHitBox::HitCheck, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	dir = dir/(360/SKILL_TABLE_MAX_DIR);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  0000f	99		 cdq
  00010	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00015	f7 f9		 idiv	 ecx
  00017	89 45 08	 mov	 DWORD PTR _dir$[ebp], eax

; 42   : 	if( dir < 0 || dir >= SKILL_TABLE_MAX_DIR )

  0001a	83 7d 08 00	 cmp	 DWORD PTR _dir$[ebp], 0
  0001e	7c 06		 jl	 SHORT $LN3@HitCheck
  00020	83 7d 08 24	 cmp	 DWORD PTR _dir$[ebp], 36 ; 00000024H
  00024	7c 04		 jl	 SHORT $LN2@HitCheck
$LN3@HitCheck:

; 43   : 		return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	eb 6f		 jmp	 SHORT $LN1@HitCheck
$LN2@HitCheck:

; 44   : 
; 45   : 	int targetx = tx - x;

  0002a	8b 45 14	 mov	 eax, DWORD PTR _tx$[ebp]
  0002d	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR _targetx$[ebp], eax

; 46   : 	int targety = ty - y;

  00033	8b 45 18	 mov	 eax, DWORD PTR _ty$[ebp]
  00036	2b 45 10	 sub	 eax, DWORD PTR _y$[ebp]
  00039	89 45 f4	 mov	 DWORD PTR _targety$[ebp], eax

; 47   : 
; 48   : 	targetx += SKILL_TABLE_CENTER_X;

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _targetx$[ebp]
  0003f	83 c0 0a	 add	 eax, 10			; 0000000aH
  00042	89 45 f8	 mov	 DWORD PTR _targetx$[ebp], eax

; 49   : 	targety += SKILL_TABLE_CENTER_Y;

  00045	8b 45 f4	 mov	 eax, DWORD PTR _targety$[ebp]
  00048	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004b	89 45 f4	 mov	 DWORD PTR _targety$[ebp], eax

; 50   : 
; 51   : 	if( targetx < 0 || abs(targetx) >= SKILL_TABLE_X_SIZE ||
; 52   : 		targety < 0 || abs(targety) >= SKILL_TABLE_Y_SIZE )

  0004e	83 7d f8 00	 cmp	 DWORD PTR _targetx$[ebp], 0
  00052	7c 28		 jl	 SHORT $LN5@HitCheck
  00054	8b 45 f8	 mov	 eax, DWORD PTR _targetx$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _abs
  0005d	83 c4 04	 add	 esp, 4
  00060	83 f8 15	 cmp	 eax, 21			; 00000015H
  00063	7d 17		 jge	 SHORT $LN5@HitCheck
  00065	83 7d f4 00	 cmp	 DWORD PTR _targety$[ebp], 0
  00069	7c 11		 jl	 SHORT $LN5@HitCheck
  0006b	8b 45 f4	 mov	 eax, DWORD PTR _targety$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _abs
  00074	83 c4 04	 add	 esp, 4
  00077	83 f8 15	 cmp	 eax, 21			; 00000015H
  0007a	7c 04		 jl	 SHORT $LN4@HitCheck
$LN5@HitCheck:

; 53   : 		return FALSE;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 19		 jmp	 SHORT $LN1@HitCheck
$LN4@HitCheck:

; 54   : 
; 55   : 	//LogAddTD("%d, %d/%d, %d/%d, %d/%d %d", dir, x, y, tx, ty, targetx, targety, m_Table[dir][targety*SKILL_TABLE_Y_SIZE+targetx]);
; 56   : 	return	m_Table[dir][targety*SKILL_TABLE_Y_SIZE+targetx];

  00080	69 45 08 b9 01
	00 00		 imul	 eax, DWORD PTR _dir$[ebp], 441
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0008e	6b 45 f4 15	 imul	 eax, DWORD PTR _targety$[ebp], 21
  00092	03 55 f8	 add	 edx, DWORD PTR _targetx$[ebp]
  00095	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
$LN1@HitCheck:

; 57   : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 14 00	 ret	 20			; 00000014H
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ENDP		; CSkillHitBox::HitCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?Check@CSkillHitBox@@QAEHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?Check@CSkillHitBox@@QAEHHHH@Z PROC			; CSkillHitBox::Check, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	if( x < 0 || x >= SKILL_TABLE_X_SIZE || 
; 32   : 		y < 0 || y >= SKILL_TABLE_Y_SIZE || 
; 33   : 		dir < 0 || dir >= SKILL_TABLE_MAX_DIR)

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  00010	7c 1e		 jl	 SHORT $LN3@Check
  00012	83 7d 0c 15	 cmp	 DWORD PTR _x$[ebp], 21	; 00000015H
  00016	7d 18		 jge	 SHORT $LN3@Check
  00018	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  0001c	7c 12		 jl	 SHORT $LN3@Check
  0001e	83 7d 10 15	 cmp	 DWORD PTR _y$[ebp], 21	; 00000015H
  00022	7d 0c		 jge	 SHORT $LN3@Check
  00024	83 7d 08 00	 cmp	 DWORD PTR _dir$[ebp], 0
  00028	7c 06		 jl	 SHORT $LN3@Check
  0002a	83 7d 08 24	 cmp	 DWORD PTR _dir$[ebp], 36 ; 00000024H
  0002e	7c 04		 jl	 SHORT $LN2@Check
$LN3@Check:

; 34   : 		return FALSE;

  00030	33 c0		 xor	 eax, eax
  00032	eb 19		 jmp	 SHORT $LN1@Check
$LN2@Check:

; 35   : 
; 36   : 	return m_Table[dir][y*SKILL_TABLE_X_SIZE+x];

  00034	69 45 08 b9 01
	00 00		 imul	 eax, DWORD PTR _dir$[ebp], 441
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00042	6b 45 10 15	 imul	 eax, DWORD PTR _y$[ebp], 21
  00046	03 55 0c	 add	 edx, DWORD PTR _x$[ebp]
  00049	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
$LN1@Check:

; 37   : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?Check@CSkillHitBox@@QAEHHHH@Z ENDP			; CSkillHitBox::Check
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?Init@CSkillHitBox@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CSkillHitBox@@QAEXXZ PROC				; CSkillHitBox::Init, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	memset(m_Table, 0, sizeof(m_Table));

  0000c	68 04 3e 00 00	 push	 15876			; 00003e04H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 04	 add	 eax, 4
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Init@CSkillHitBox@@QAEXXZ ENDP				; CSkillHitBox::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ??1CSkillHitBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSkillHitBox@@UAE@XZ PROC				; CSkillHitBox::~CSkillHitBox, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSkillHitBox@@6B@

; 21   : 
; 22   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CSkillHitBox@@UAE@XZ ENDP				; CSkillHitBox::~CSkillHitBox
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ??0CSkillHitBox@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSkillHitBox@@QAE@XZ PROC				; CSkillHitBox::CSkillHitBox, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSkillHitBox@@6B@

; 16   : 
; 17   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CSkillHitBox@@QAE@XZ ENDP				; CSkillHitBox::CSkillHitBox
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\SkillHitBox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
