; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?vec3_origin@@3PAMA				; vec3_origin
_BSS	SEGMENT
?vec3_origin@@3PAMA DD 03H DUP (?)			; vec3_origin
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_acosf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	_VectorCompare
PUBLIC	_Q_rint
PUBLIC	__DotProduct
PUBLIC	__VectorSubtract
PUBLIC	__VectorAdd
PUBLIC	__VectorCopy
PUBLIC	__VectorScale
PUBLIC	_VectorLength
PUBLIC	_VectorMA
PUBLIC	_CrossProduct
PUBLIC	_VectorNormalize
PUBLIC	_VectorInverse
PUBLIC	_ClearBounds
PUBLIC	_AddPointToBounds
PUBLIC	_AngleMatrix
PUBLIC	_AngleIMatrix
PUBLIC	_R_ConcatTransforms
PUBLIC	_VectorIRotate
PUBLIC	_VectorRotate
PUBLIC	_VectorTranslate
PUBLIC	_VectorTransform
PUBLIC	_AngleQuaternion
PUBLIC	_QuaternionMatrix
PUBLIC	_QuaternionSlerp
PUBLIC	_FaceNormalize
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f2c4e47ea2d0d88
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@47c34f80
PUBLIC	__real@c7c34f80
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_acos:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_floor:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c7c34f80
CONST	SEGMENT
__real@c7c34f80 DD 0c7c34f80r			; -99999
CONST	ENDS
;	COMDAT __real@47c34f80
CONST	SEGMENT
__real@47c34f80 DD 047c34f80r			; 99999
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f2c4e47ea2d0d88
CONST	SEGMENT
__real@3f2c4e47ea2d0d88 DQ 03f2c4e47ea2d0d88r	; 0.000215956
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-08
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _FaceNormalize
_TEXT	SEGMENT
_dot$ = -20						; size = 8
_nz$ = -12						; size = 4
_ny$ = -8						; size = 4
_nx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_Normal$ = 20						; size = 4
_FaceNormalize PROC					; COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 361  :     float nx,ny,nz;
; 362  :     nx = (v2[1]-v1[1]) * (v3[2]-v1[2]) - (v3[1]-v1[1]) * (v2[2]-v1[2]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 00	 shl	 eax, 0
  00011	b9 04 00 00 00	 mov	 ecx, 4
  00016	c1 e1 00	 shl	 ecx, 0
  00019	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  0001c	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0001f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00024	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	d1 e0		 shl	 eax, 1
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  0003a	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0003d	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00042	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  00047	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	c1 e0 00	 shl	 eax, 0
  00053	b9 04 00 00 00	 mov	 ecx, 4
  00058	c1 e1 00	 shl	 ecx, 0
  0005b	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  0005e	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  00061	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00066	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  0006b	b8 04 00 00 00	 mov	 eax, 4
  00070	d1 e0		 shl	 eax, 1
  00072	b9 04 00 00 00	 mov	 ecx, 4
  00077	d1 e1		 shl	 ecx, 1
  00079	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  0007c	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0007f	f3 0f 10 14 02	 movss	 xmm2, DWORD PTR [edx+eax]
  00084	f3 0f 5c 14 0e	 subss	 xmm2, DWORD PTR [esi+ecx]
  00089	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0008d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00091	f3 0f 11 45 fc	 movss	 DWORD PTR _nx$[ebp], xmm0

; 363  :     ny = (v2[2]-v1[2]) * (v3[0]-v1[0]) - (v3[2]-v1[2]) * (v2[0]-v1[0]);

  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	d1 e0		 shl	 eax, 1
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	d1 e1		 shl	 ecx, 1
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  000a7	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  000aa	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000af	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	6b c8 00	 imul	 ecx, eax, 0
  000bc	ba 04 00 00 00	 mov	 edx, 4
  000c1	6b c2 00	 imul	 eax, edx, 0
  000c4	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  000c7	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  000ca	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  000cf	f3 0f 5c 0c 06	 subss	 xmm1, DWORD PTR [esi+eax]
  000d4	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	d1 e0		 shl	 eax, 1
  000df	b9 04 00 00 00	 mov	 ecx, 4
  000e4	d1 e1		 shl	 ecx, 1
  000e6	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  000e9	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  000ec	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000f1	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  000f6	b8 04 00 00 00	 mov	 eax, 4
  000fb	6b c8 00	 imul	 ecx, eax, 0
  000fe	ba 04 00 00 00	 mov	 edx, 4
  00103	6b c2 00	 imul	 eax, edx, 0
  00106	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  00109	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0010c	f3 0f 10 14 0a	 movss	 xmm2, DWORD PTR [edx+ecx]
  00111	f3 0f 5c 14 06	 subss	 xmm2, DWORD PTR [esi+eax]
  00116	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0011a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0011e	f3 0f 11 45 f8	 movss	 DWORD PTR _ny$[ebp], xmm0

; 364  :     nz = (v2[0]-v1[0]) * (v3[1]-v1[1]) - (v3[0]-v1[0]) * (v2[1]-v1[1]);

  00123	b8 04 00 00 00	 mov	 eax, 4
  00128	6b c8 00	 imul	 ecx, eax, 0
  0012b	ba 04 00 00 00	 mov	 edx, 4
  00130	6b c2 00	 imul	 eax, edx, 0
  00133	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  00136	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  00139	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0013e	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00143	b8 04 00 00 00	 mov	 eax, 4
  00148	c1 e0 00	 shl	 eax, 0
  0014b	b9 04 00 00 00	 mov	 ecx, 4
  00150	c1 e1 00	 shl	 ecx, 0
  00153	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  00156	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  00159	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0015e	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  00163	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00167	b8 04 00 00 00	 mov	 eax, 4
  0016c	6b c8 00	 imul	 ecx, eax, 0
  0016f	ba 04 00 00 00	 mov	 edx, 4
  00174	6b c2 00	 imul	 eax, edx, 0
  00177	8b 55 10	 mov	 edx, DWORD PTR _v3$[ebp]
  0017a	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0017d	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00182	f3 0f 5c 0c 06	 subss	 xmm1, DWORD PTR [esi+eax]
  00187	b8 04 00 00 00	 mov	 eax, 4
  0018c	c1 e0 00	 shl	 eax, 0
  0018f	b9 04 00 00 00	 mov	 ecx, 4
  00194	c1 e1 00	 shl	 ecx, 0
  00197	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  0019a	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0019d	f3 0f 10 14 02	 movss	 xmm2, DWORD PTR [edx+eax]
  001a2	f3 0f 5c 14 0e	 subss	 xmm2, DWORD PTR [esi+ecx]
  001a7	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001ab	f3 0f 5c c1	 subss	 xmm0, xmm1
  001af	f3 0f 11 45 f4	 movss	 DWORD PTR _nz$[ebp], xmm0

; 365  :     double dot = sqrt(nx*nx+ny*ny+nz*nz);

  001b4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _nx$[ebp]
  001b9	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _nx$[ebp]
  001be	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _ny$[ebp]
  001c3	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _ny$[ebp]
  001c8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001cc	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _nz$[ebp]
  001d1	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _nz$[ebp]
  001d6	f3 0f 58 c1	 addss	 xmm0, xmm1
  001da	51		 push	 ecx
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  001e5	83 c4 04	 add	 esp, 4
  001e8	dd 5d ec	 fstp	 QWORD PTR _dot$[ebp]

; 366  : 	if(dot == 0) return;

  001eb	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _dot$[ebp]
  001f0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  001f8	9f		 lahf
  001f9	f6 c4 44	 test	 ah, 68			; 00000044H
  001fc	7a 02		 jp	 SHORT $LN2@FaceNormal
  001fe	eb 59		 jmp	 SHORT $LN1@FaceNormal
$LN2@FaceNormal:

; 367  : 	Normal[0] = (nx/dot);

  00200	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _nx$[ebp]
  00205	f2 0f 5e 45 ec	 divsd	 xmm0, QWORD PTR _dot$[ebp]
  0020a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020e	b8 04 00 00 00	 mov	 eax, 4
  00213	6b c8 00	 imul	 ecx, eax, 0
  00216	8b 55 14	 mov	 edx, DWORD PTR _Normal$[ebp]
  00219	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 368  : 	Normal[1] = (ny/dot);

  0021e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _ny$[ebp]
  00223	f2 0f 5e 45 ec	 divsd	 xmm0, QWORD PTR _dot$[ebp]
  00228	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022c	b8 04 00 00 00	 mov	 eax, 4
  00231	c1 e0 00	 shl	 eax, 0
  00234	8b 4d 14	 mov	 ecx, DWORD PTR _Normal$[ebp]
  00237	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 369  : 	Normal[2] = (nz/dot);

  0023c	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _nz$[ebp]
  00241	f2 0f 5e 45 ec	 divsd	 xmm0, QWORD PTR _dot$[ebp]
  00246	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024a	b8 04 00 00 00	 mov	 eax, 4
  0024f	d1 e0		 shl	 eax, 1
  00251	8b 4d 14	 mov	 ecx, DWORD PTR _Normal$[ebp]
  00254	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
$LN1@FaceNormal:

; 370  : }

  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
_FaceNormalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _QuaternionSlerp
_TEXT	SEGMENT
tv300 = -104						; size = 8
tv306 = -100						; size = 4
_b$ = -32						; size = 4
_a$ = -28						; size = 4
_sclq$ = -24						; size = 4
_sclp$ = -20						; size = 4
_sinom$ = -16						; size = 4
_cosom$ = -12						; size = 4
_omega$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_t$ = 16						; size = 4
_qt$ = 20						; size = 4
_QuaternionSlerp PROC					; COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	int i;
; 314  : 	float omega, cosom, sinom, sclp, sclq;
; 315  : 
; 316  : 	// decide if one of the quaternions is backwards
; 317  : 	float a = 0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 e4	 movss	 DWORD PTR _a$[ebp], xmm0

; 318  : 	float b = 0;

  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 45 e0	 movss	 DWORD PTR _b$[ebp], xmm0

; 319  : 	for (i = 0; i < 4; i++) {

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@Quaternion
$LN2@Quaternion:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Quaternion:
  0002b	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0002f	7d 79		 jge	 SHORT $LN3@Quaternion

; 320  : 		a += (p[i]-q[i])*(p[i]-q[i]);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003a	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  0003d	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00042	f3 0f 5c 04 96	 subss	 xmm0, DWORD PTR [esi+edx*4]
  00047	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00050	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00053	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [ecx+eax*4]
  00058	f3 0f 5c 0c 96	 subss	 xmm1, DWORD PTR [esi+edx*4]
  0005d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00061	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _a$[ebp]
  00066	f3 0f 11 45 e4	 movss	 DWORD PTR _a$[ebp], xmm0

; 321  : 		b += (p[i]+q[i])*(p[i]+q[i]);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00071	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00074	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00077	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0007c	f3 0f 58 04 96	 addss	 xmm0, DWORD PTR [esi+edx*4]
  00081	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00087	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0008a	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  0008d	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [ecx+eax*4]
  00092	f3 0f 58 0c 96	 addss	 xmm1, DWORD PTR [esi+edx*4]
  00097	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0009b	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _b$[ebp]
  000a0	f3 0f 11 45 e0	 movss	 DWORD PTR _b$[ebp], xmm0

; 322  : 	}

  000a5	e9 78 ff ff ff	 jmp	 $LN2@Quaternion
$LN3@Quaternion:

; 323  : 	if (a > b) {

  000aa	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _a$[ebp]
  000af	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _b$[ebp]
  000b3	76 37		 jbe	 SHORT $LN6@Quaternion

; 324  : 		for (i = 0; i < 4; i++) {

  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bc	eb 09		 jmp	 SHORT $LN7@Quaternion
$LN5@Quaternion:
  000be	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c1	83 c0 01	 add	 eax, 1
  000c4	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@Quaternion:
  000c7	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  000cb	7d 1f		 jge	 SHORT $LN6@Quaternion

; 325  : 			q[i] = -q[i];

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d0	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  000d3	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  000d8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000df	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e2	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000e5	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 326  : 		}

  000ea	eb d2		 jmp	 SHORT $LN5@Quaternion
$LN6@Quaternion:

; 327  : 	}
; 328  : 
; 329  : 	cosom = p[0]*q[0] + p[1]*q[1] + p[2]*q[2] + p[3]*q[3];

  000ec	b8 04 00 00 00	 mov	 eax, 4
  000f1	6b c8 00	 imul	 ecx, eax, 0
  000f4	ba 04 00 00 00	 mov	 edx, 4
  000f9	6b c2 00	 imul	 eax, edx, 0
  000fc	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000ff	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00102	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00107	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  0010c	b8 04 00 00 00	 mov	 eax, 4
  00111	c1 e0 00	 shl	 eax, 0
  00114	b9 04 00 00 00	 mov	 ecx, 4
  00119	c1 e1 00	 shl	 ecx, 0
  0011c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0011f	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00122	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00127	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0012c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00130	b8 04 00 00 00	 mov	 eax, 4
  00135	d1 e0		 shl	 eax, 1
  00137	b9 04 00 00 00	 mov	 ecx, 4
  0013c	d1 e1		 shl	 ecx, 1
  0013e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00141	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00144	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00149	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0014e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	6b c8 03	 imul	 ecx, eax, 3
  0015a	ba 04 00 00 00	 mov	 edx, 4
  0015f	6b c2 03	 imul	 eax, edx, 3
  00162	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00165	8b 75 0c	 mov	 esi, DWORD PTR _q$[ebp]
  00168	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  0016d	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  00172	f3 0f 58 c1	 addss	 xmm0, xmm1
  00176	f3 0f 11 45 f4	 movss	 DWORD PTR _cosom$[ebp], xmm0

; 330  : 
; 331  : 	if ((1.0 + cosom) > 0.00000001) {

  0017b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _cosom$[ebp]
  00180	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00188	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3e45798ee2308c3a
  00190	0f 86 2d 01 00
	00		 jbe	 $LN15@Quaternion

; 332  : 		if ((1.0 - cosom) > 0.00000001) {

  00196	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _cosom$[ebp]
  0019b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001a3	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001a7	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@3e45798ee2308c3a
  001af	0f 86 9c 00 00
	00		 jbe	 $LN17@Quaternion

; 333  : 			omega = acos( cosom );

  001b5	51		 push	 ecx
  001b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cosom$[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	e8 00 00 00 00	 call	 ?acos@@YAMM@Z		; acos
  001c5	83 c4 04	 add	 esp, 4
  001c8	d9 5d f8	 fstp	 DWORD PTR _omega$[ebp]

; 334  : 			sinom = sin( omega );

  001cb	51		 push	 ecx
  001cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _omega$[ebp]
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  001db	83 c4 04	 add	 esp, 4
  001de	d9 5d f0	 fstp	 DWORD PTR _sinom$[ebp]

; 335  : 			sclp = sin( (1.0 - t)*omega) / sinom;

  001e1	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  001e6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001ee	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001f2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _omega$[ebp]
  001f7	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001fb	83 ec 08	 sub	 esp, 8
  001fe	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00203	e8 00 00 00 00	 call	 _sin
  00208	83 c4 08	 add	 esp, 8
  0020b	dd 5d 98	 fstp	 QWORD PTR tv300[ebp]
  0020e	f2 0f 10 45 98	 movsd	 xmm0, QWORD PTR tv300[ebp]
  00213	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _sinom$[ebp]
  00218	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0021c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00220	f3 0f 11 45 ec	 movss	 DWORD PTR _sclp$[ebp], xmm0

; 336  : 			sclq = sin( t*omega ) / sinom;

  00225	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  0022a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _omega$[ebp]
  0022f	51		 push	 ecx
  00230	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00235	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  0023a	83 c4 04	 add	 esp, 4
  0023d	d9 5d 9c	 fstp	 DWORD PTR tv306[ebp]
  00240	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv306[ebp]
  00245	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _sinom$[ebp]
  0024a	f3 0f 11 45 e8	 movss	 DWORD PTR _sclq$[ebp], xmm0

; 337  : 		}

  0024f	eb 24		 jmp	 SHORT $LN18@Quaternion
$LN17@Quaternion:

; 338  : 		else {
; 339  : 			sclp = 1.0 - t;

  00251	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00256	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0025e	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00262	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00266	f3 0f 11 45 ec	 movss	 DWORD PTR _sclp$[ebp], xmm0

; 340  : 			sclq = t;

  0026b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00270	f3 0f 11 45 e8	 movss	 DWORD PTR _sclq$[ebp], xmm0
$LN18@Quaternion:

; 341  : 		}
; 342  : 		for (i = 0; i < 4; i++) {

  00275	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0027c	eb 09		 jmp	 SHORT $LN10@Quaternion
$LN8@Quaternion:
  0027e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00281	83 c0 01	 add	 eax, 1
  00284	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@Quaternion:
  00287	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0028b	7d 31		 jge	 SHORT $LN9@Quaternion

; 343  : 			qt[i] = sclp * p[i] + sclq * q[i];

  0028d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00290	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00293	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _sclp$[ebp]
  00298	f3 0f 59 04 81	 mulss	 xmm0, DWORD PTR [ecx+eax*4]
  0029d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002a0	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  002a3	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _sclq$[ebp]
  002a8	f3 0f 59 0c 90	 mulss	 xmm1, DWORD PTR [eax+edx*4]
  002ad	f3 0f 58 c1	 addss	 xmm0, xmm1
  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002b4	8b 55 14	 mov	 edx, DWORD PTR _qt$[ebp]
  002b7	f3 0f 11 04 8a	 movss	 DWORD PTR [edx+ecx*4], xmm0

; 344  : 		}

  002bc	eb c0		 jmp	 SHORT $LN8@Quaternion
$LN9@Quaternion:

; 345  : 	}

  002be	e9 29 01 00 00	 jmp	 $LN12@Quaternion
$LN15@Quaternion:

; 346  : 	else {
; 347  : 		qt[0] = -p[1];

  002c3	b8 04 00 00 00	 mov	 eax, 4
  002c8	c1 e0 00	 shl	 eax, 0
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  002ce	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  002d3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002da	ba 04 00 00 00	 mov	 edx, 4
  002df	6b c2 00	 imul	 eax, edx, 0
  002e2	8b 4d 14	 mov	 ecx, DWORD PTR _qt$[ebp]
  002e5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 348  : 		qt[1] = p[0];

  002ea	b8 04 00 00 00	 mov	 eax, 4
  002ef	6b c8 00	 imul	 ecx, eax, 0
  002f2	ba 04 00 00 00	 mov	 edx, 4
  002f7	c1 e2 00	 shl	 edx, 0
  002fa	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  002fd	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00300	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00303	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 349  : 		qt[2] = -p[3];

  00306	b8 04 00 00 00	 mov	 eax, 4
  0030b	6b c8 03	 imul	 ecx, eax, 3
  0030e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00311	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00316	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0031d	b8 04 00 00 00	 mov	 eax, 4
  00322	d1 e0		 shl	 eax, 1
  00324	8b 4d 14	 mov	 ecx, DWORD PTR _qt$[ebp]
  00327	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 350  : 		qt[3] = p[2];

  0032c	b8 04 00 00 00	 mov	 eax, 4
  00331	d1 e0		 shl	 eax, 1
  00333	b9 04 00 00 00	 mov	 ecx, 4
  00338	6b d1 03	 imul	 edx, ecx, 3
  0033b	8b 4d 14	 mov	 ecx, DWORD PTR _qt$[ebp]
  0033e	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00341	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00344	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 351  : 		sclp = sin( (1.0 - t) * 0.5 * Q_PI);

  00347	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  0034c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00354	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00358	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00360	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@400921fb60000000
  00368	83 ec 08	 sub	 esp, 8
  0036b	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00370	e8 00 00 00 00	 call	 _sin
  00375	83 c4 08	 add	 esp, 8
  00378	d9 5d ec	 fstp	 DWORD PTR _sclp$[ebp]

; 352  : 		sclq = sin( t * 0.5 * Q_PI);

  0037b	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00380	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00388	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  00390	83 ec 08	 sub	 esp, 8
  00393	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00398	e8 00 00 00 00	 call	 _sin
  0039d	83 c4 08	 add	 esp, 8
  003a0	d9 5d e8	 fstp	 DWORD PTR _sclq$[ebp]

; 353  : 		for (i = 0; i < 3; i++) {

  003a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003aa	eb 09		 jmp	 SHORT $LN13@Quaternion
$LN11@Quaternion:
  003ac	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003af	83 c0 01	 add	 eax, 1
  003b2	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@Quaternion:
  003b5	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  003b9	7d 31		 jge	 SHORT $LN12@Quaternion

; 354  : 			qt[i] = sclp * p[i] + sclq * qt[i];

  003bb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003be	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  003c1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _sclp$[ebp]
  003c6	f3 0f 59 04 81	 mulss	 xmm0, DWORD PTR [ecx+eax*4]
  003cb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003ce	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  003d1	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _sclq$[ebp]
  003d6	f3 0f 59 0c 90	 mulss	 xmm1, DWORD PTR [eax+edx*4]
  003db	f3 0f 58 c1	 addss	 xmm0, xmm1
  003df	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003e2	8b 55 14	 mov	 edx, DWORD PTR _qt$[ebp]
  003e5	f3 0f 11 04 8a	 movss	 DWORD PTR [edx+ecx*4], xmm0

; 355  : 		}

  003ea	eb c0		 jmp	 SHORT $LN11@Quaternion
$LN12@Quaternion:

; 356  : 	}
; 357  : }

  003ec	5f		 pop	 edi
  003ed	5e		 pop	 esi
  003ee	5b		 pop	 ebx
  003ef	8b e5		 mov	 esp, ebp
  003f1	5d		 pop	 ebp
  003f2	c3		 ret	 0
_QuaternionSlerp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _QuaternionMatrix
_TEXT	SEGMENT
_quaternion$ = 8					; size = 4
_matrix$ = 12						; size = 4
_QuaternionMatrix PROC					; COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 297  : 
; 298  : 	matrix[0][0] = 1.0 - 2.0 * quaternion[1] * quaternion[1] - 2.0 * quaternion[2] * quaternion[2];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00014	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00019	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00021	ba 04 00 00 00	 mov	 edx, 4
  00026	c1 e2 00	 shl	 edx, 0
  00029	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  0002c	f3 0f 5a 0c 10	 cvtss2sd xmm1, DWORD PTR [eax+edx]
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0003d	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00041	b9 04 00 00 00	 mov	 ecx, 4
  00046	d1 e1		 shl	 ecx, 1
  00048	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  0004b	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  00050	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	d1 e0		 shl	 eax, 1
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00062	f3 0f 5a 14 01	 cvtss2sd xmm2, DWORD PTR [ecx+eax]
  00067	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0006b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0006f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00073	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00078	6b c2 00	 imul	 eax, edx, 0
  0007b	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	6b d1 00	 imul	 edx, ecx, 0
  00086	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 299  : 	matrix[1][0] = 2.0 * quaternion[0] * quaternion[1] + 2.0 * quaternion[3] * quaternion[2];

  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	6b c8 00	 imul	 ecx, eax, 0
  00093	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00096	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  0009b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	c1 e0 00	 shl	 eax, 0
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  000ae	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  000b3	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000b7	ba 04 00 00 00	 mov	 edx, 4
  000bc	6b c2 03	 imul	 eax, edx, 3
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  000c2	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  000c7	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  000cf	ba 04 00 00 00	 mov	 edx, 4
  000d4	d1 e2		 shl	 edx, 1
  000d6	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  000d9	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  000de	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000e2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ea	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ef	c1 e1 00	 shl	 ecx, 0
  000f2	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  000f5	ba 04 00 00 00	 mov	 edx, 4
  000fa	6b c2 00	 imul	 eax, edx, 0
  000fd	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 300  : 	matrix[2][0] = 2.0 * quaternion[0] * quaternion[2] - 2.0 * quaternion[3] * quaternion[1];

  00102	b8 04 00 00 00	 mov	 eax, 4
  00107	6b c8 00	 imul	 ecx, eax, 0
  0010a	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  0010d	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0011a	b8 04 00 00 00	 mov	 eax, 4
  0011f	d1 e0		 shl	 eax, 1
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00124	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  00129	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0012d	ba 04 00 00 00	 mov	 edx, 4
  00132	6b c2 03	 imul	 eax, edx, 3
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00138	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  0013d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  00145	ba 04 00 00 00	 mov	 edx, 4
  0014a	c1 e2 00	 shl	 edx, 0
  0014d	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00150	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  00155	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00159	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0015d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00161	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00166	d1 e1		 shl	 ecx, 1
  00168	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0016b	ba 04 00 00 00	 mov	 edx, 4
  00170	6b c2 00	 imul	 eax, edx, 0
  00173	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 301  : 
; 302  : 	matrix[0][1] = 2.0 * quaternion[0] * quaternion[1] - 2.0 * quaternion[3] * quaternion[2];

  00178	b8 04 00 00 00	 mov	 eax, 4
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00183	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  00188	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00190	b8 04 00 00 00	 mov	 eax, 4
  00195	c1 e0 00	 shl	 eax, 0
  00198	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  0019b	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  001a0	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001a4	ba 04 00 00 00	 mov	 edx, 4
  001a9	6b c2 03	 imul	 eax, edx, 3
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  001af	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  001b4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  001bc	ba 04 00 00 00	 mov	 edx, 4
  001c1	d1 e2		 shl	 edx, 1
  001c3	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  001c6	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  001cb	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001cf	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001dc	6b d1 00	 imul	 edx, ecx, 0
  001df	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	c1 e0 00	 shl	 eax, 0
  001ea	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 303  : 	matrix[1][1] = 1.0 - 2.0 * quaternion[0] * quaternion[0] - 2.0 * quaternion[2] * quaternion[2];

  001ef	b8 04 00 00 00	 mov	 eax, 4
  001f4	6b c8 00	 imul	 ecx, eax, 0
  001f7	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  001fa	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  001ff	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00207	b8 04 00 00 00	 mov	 eax, 4
  0020c	6b c8 00	 imul	 ecx, eax, 0
  0020f	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  00212	f3 0f 5a 0c 0a	 cvtss2sd xmm1, DWORD PTR [edx+ecx]
  00217	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0021b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00223	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00227	b8 04 00 00 00	 mov	 eax, 4
  0022c	d1 e0		 shl	 eax, 1
  0022e	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00231	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00236	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0023e	ba 04 00 00 00	 mov	 edx, 4
  00243	d1 e2		 shl	 edx, 1
  00245	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00248	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  0024d	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00251	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00255	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00259	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0025e	c1 e1 00	 shl	 ecx, 0
  00261	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00264	ba 04 00 00 00	 mov	 edx, 4
  00269	c1 e2 00	 shl	 edx, 0
  0026c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 304  : 	matrix[2][1] = 2.0 * quaternion[1] * quaternion[2] + 2.0 * quaternion[3] * quaternion[0];

  00271	b8 04 00 00 00	 mov	 eax, 4
  00276	c1 e0 00	 shl	 eax, 0
  00279	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  0027c	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00281	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00289	ba 04 00 00 00	 mov	 edx, 4
  0028e	d1 e2		 shl	 edx, 1
  00290	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00293	f3 0f 5a 0c 10	 cvtss2sd xmm1, DWORD PTR [eax+edx]
  00298	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0029c	b9 04 00 00 00	 mov	 ecx, 4
  002a1	6b d1 03	 imul	 edx, ecx, 3
  002a4	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  002a7	f3 0f 5a 0c 10	 cvtss2sd xmm1, DWORD PTR [eax+edx]
  002ac	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  002b4	b9 04 00 00 00	 mov	 ecx, 4
  002b9	6b d1 00	 imul	 edx, ecx, 0
  002bc	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  002bf	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  002c4	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  002c8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002d5	d1 e1		 shl	 ecx, 1
  002d7	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  002da	ba 04 00 00 00	 mov	 edx, 4
  002df	c1 e2 00	 shl	 edx, 0
  002e2	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 305  : 
; 306  : 	matrix[0][2] = 2.0 * quaternion[0] * quaternion[2] + 2.0 * quaternion[3] * quaternion[1];

  002e7	b8 04 00 00 00	 mov	 eax, 4
  002ec	6b c8 00	 imul	 ecx, eax, 0
  002ef	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  002f2	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  002f7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	d1 e0		 shl	 eax, 1
  00306	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00309	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  0030e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00312	ba 04 00 00 00	 mov	 edx, 4
  00317	6b c2 03	 imul	 eax, edx, 3
  0031a	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  0031d	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  00322	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  0032a	ba 04 00 00 00	 mov	 edx, 4
  0032f	c1 e2 00	 shl	 edx, 0
  00332	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00335	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  0033a	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0033e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00342	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00346	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0034b	6b d1 00	 imul	 edx, ecx, 0
  0034e	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	d1 e0		 shl	 eax, 1
  00358	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 307  : 	matrix[1][2] = 2.0 * quaternion[1] * quaternion[2] - 2.0 * quaternion[3] * quaternion[0];

  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	c1 e0 00	 shl	 eax, 0
  00365	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00368	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  0036d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00375	ba 04 00 00 00	 mov	 edx, 4
  0037a	d1 e2		 shl	 edx, 1
  0037c	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  0037f	f3 0f 5a 0c 10	 cvtss2sd xmm1, DWORD PTR [eax+edx]
  00384	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00388	b9 04 00 00 00	 mov	 ecx, 4
  0038d	6b d1 03	 imul	 edx, ecx, 3
  00390	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00393	f3 0f 5a 0c 10	 cvtss2sd xmm1, DWORD PTR [eax+edx]
  00398	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  003a0	b9 04 00 00 00	 mov	 ecx, 4
  003a5	6b d1 00	 imul	 edx, ecx, 0
  003a8	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  003ab	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  003b0	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  003b4	f2 0f 5c c1	 subsd	 xmm0, xmm1
  003b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003bc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003c1	c1 e1 00	 shl	 ecx, 0
  003c4	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  003c7	ba 04 00 00 00	 mov	 edx, 4
  003cc	d1 e2		 shl	 edx, 1
  003ce	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 308  : 	matrix[2][2] = 1.0 - 2.0 * quaternion[0] * quaternion[0] - 2.0 * quaternion[1] * quaternion[1];

  003d3	b8 04 00 00 00	 mov	 eax, 4
  003d8	6b c8 00	 imul	 ecx, eax, 0
  003db	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  003de	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  003e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  003eb	b8 04 00 00 00	 mov	 eax, 4
  003f0	6b c8 00	 imul	 ecx, eax, 0
  003f3	8b 55 08	 mov	 edx, DWORD PTR _quaternion$[ebp]
  003f6	f3 0f 5a 0c 0a	 cvtss2sd xmm1, DWORD PTR [edx+ecx]
  003fb	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003ff	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00407	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0040b	b8 04 00 00 00	 mov	 eax, 4
  00410	c1 e0 00	 shl	 eax, 0
  00413	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00416	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  0041b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00423	ba 04 00 00 00	 mov	 edx, 4
  00428	c1 e2 00	 shl	 edx, 0
  0042b	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  0042e	f3 0f 5a 14 10	 cvtss2sd xmm2, DWORD PTR [eax+edx]
  00433	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00437	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0043b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0043f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00444	d1 e1		 shl	 ecx, 1
  00446	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00449	ba 04 00 00 00	 mov	 edx, 4
  0044e	d1 e2		 shl	 edx, 1
  00450	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 309  : }

  00455	5f		 pop	 edi
  00456	5e		 pop	 esi
  00457	5b		 pop	 ebx
  00458	8b e5		 mov	 esp, ebp
  0045a	5d		 pop	 ebp
  0045b	c3		 ret	 0
_QuaternionMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _AngleQuaternion
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_quaternion$ = 12					; size = 4
_AngleQuaternion PROC					; COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  : 	float		angle;
; 276  : 	float		sr, sp, sy, cr, cp, cy;
; 277  : 
; 278  : 	// FIXME: rescale the inputs to 1/2 angle
; 279  : 	angle = (float)angles[2] * 0.5;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00013	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00018	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00020	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00024	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 280  : 	sy = (float)sin(angle);

  00029	51		 push	 ecx
  0002a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00039	83 c4 04	 add	 esp, 4
  0003c	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 281  : 	cy = (float)cos(angle);

  0003f	51		 push	 ecx
  00040	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0004f	83 c4 04	 add	 esp, 4
  00052	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 282  : 	angle = angles[1] * 0.5;

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	c1 e0 00	 shl	 eax, 0
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00060	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00065	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0006d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00071	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 283  : 	sp = (float)sin(angle);

  00076	51		 push	 ecx
  00077	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00086	83 c4 04	 add	 esp, 4
  00089	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 284  : 	cp = (float)cos(angle);

  0008c	51		 push	 ecx
  0008d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0009c	83 c4 04	 add	 esp, 4
  0009f	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 285  : 	angle = angles[0] * 0.5;

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	6b c8 00	 imul	 ecx, eax, 0
  000aa	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  000ad	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  000b2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 286  : 	sr = (float)sin(angle);

  000c3	51		 push	 ecx
  000c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  000d3	83 c4 04	 add	 esp, 4
  000d6	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 287  : 	cr = (float)cos(angle);

  000d9	51		 push	 ecx
  000da	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  000e9	83 c4 04	 add	 esp, 4
  000ec	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 288  : 
; 289  : 	quaternion[0] = sr*cp*cy-cr*sp*sy; // X

  000ef	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  000f4	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  000f9	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  000fe	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _cr$[ebp]
  00103	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _sp$[ebp]
  00108	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _sy$[ebp]
  0010d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 55 0c	 mov	 edx, DWORD PTR _quaternion$[ebp]
  0011c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 290  : 	quaternion[1] = cr*sp*cy+sr*cp*sy; // Y

  00121	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00126	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  0012b	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00130	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  00135	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _cp$[ebp]
  0013a	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _sy$[ebp]
  0013f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00143	b8 04 00 00 00	 mov	 eax, 4
  00148	c1 e0 00	 shl	 eax, 0
  0014b	8b 4d 0c	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  0014e	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 291  : 	quaternion[2] = cr*cp*sy-sr*sp*cy; // Z

  00153	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00158	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  0015d	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00162	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  00167	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _sp$[ebp]
  0016c	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _cy$[ebp]
  00171	f3 0f 5c c1	 subss	 xmm0, xmm1
  00175	b8 04 00 00 00	 mov	 eax, 4
  0017a	d1 e0		 shl	 eax, 1
  0017c	8b 4d 0c	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  0017f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 292  : 	quaternion[3] = cr*cp*cy+sr*sp*sy; // W

  00184	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00189	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  0018e	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00193	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  00198	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _sp$[ebp]
  0019d	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _sy$[ebp]
  001a2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a6	b8 04 00 00 00	 mov	 eax, 4
  001ab	6b c8 03	 imul	 ecx, eax, 3
  001ae	8b 55 0c	 mov	 edx, DWORD PTR _quaternion$[ebp]
  001b1	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 293  : }

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_AngleQuaternion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorTransform
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorTransform PROC					; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 266  : 	out[0] = DotProduct(in1, in2[0]) + in2[0][3];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  0001c	ba 04 00 00 00	 mov	 edx, 4
  00021	6b d2 00	 imul	 edx, edx, 0
  00024	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00027	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0002c	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	c1 e0 00	 shl	 eax, 0
  00039	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003e	6b d1 00	 imul	 edx, ecx, 0
  00041	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00044	b9 04 00 00 00	 mov	 ecx, 4
  00049	c1 e1 00	 shl	 ecx, 0
  0004c	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  0004f	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  00054	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  00059	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005d	ba 04 00 00 00	 mov	 edx, 4
  00062	d1 e2		 shl	 edx, 1
  00064	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0006f	b8 04 00 00 00	 mov	 eax, 4
  00074	d1 e0		 shl	 eax, 1
  00076	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00079	f3 0f 10 0c 16	 movss	 xmm1, DWORD PTR [esi+edx]
  0007e	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00083	f3 0f 58 c1	 addss	 xmm0, xmm1
  00087	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	6b c8 03	 imul	 ecx, eax, 3
  0009a	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  0009f	ba 04 00 00 00	 mov	 edx, 4
  000a4	6b c2 00	 imul	 eax, edx, 0
  000a7	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  000aa	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 267  : 	out[1] = DotProduct(in1, in2[1]) +	in2[1][3];

  000af	b8 04 00 00 00	 mov	 eax, 4
  000b4	6b c8 00	 imul	 ecx, eax, 0
  000b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bc	c1 e2 00	 shl	 edx, 0
  000bf	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000c2	b8 04 00 00 00	 mov	 eax, 4
  000c7	6b c0 00	 imul	 eax, eax, 0
  000ca	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000cd	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000d2	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  000d7	b9 04 00 00 00	 mov	 ecx, 4
  000dc	c1 e1 00	 shl	 ecx, 0
  000df	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000e4	c1 e2 00	 shl	 edx, 0
  000e7	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000ea	b8 04 00 00 00	 mov	 eax, 4
  000ef	c1 e0 00	 shl	 eax, 0
  000f2	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000f5	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  000fa	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  000ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00103	b9 04 00 00 00	 mov	 ecx, 4
  00108	d1 e1		 shl	 ecx, 1
  0010a	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0010f	c1 e2 00	 shl	 edx, 0
  00112	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00115	b8 04 00 00 00	 mov	 eax, 4
  0011a	d1 e0		 shl	 eax, 1
  0011c	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  0011f	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  00124	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00129	f3 0f 58 c1	 addss	 xmm0, xmm1
  0012d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00132	c1 e1 00	 shl	 ecx, 0
  00135	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00138	ba 04 00 00 00	 mov	 edx, 4
  0013d	6b c2 03	 imul	 eax, edx, 3
  00140	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00145	b9 04 00 00 00	 mov	 ecx, 4
  0014a	c1 e1 00	 shl	 ecx, 0
  0014d	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00150	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 268  : 	out[2] = DotProduct(in1, in2[2]) +	in2[2][3];

  00155	b8 04 00 00 00	 mov	 eax, 4
  0015a	6b c8 00	 imul	 ecx, eax, 0
  0015d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00162	d1 e2		 shl	 edx, 1
  00164	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00167	b8 04 00 00 00	 mov	 eax, 4
  0016c	6b c0 00	 imul	 eax, eax, 0
  0016f	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00172	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  00177	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0017c	b9 04 00 00 00	 mov	 ecx, 4
  00181	c1 e1 00	 shl	 ecx, 0
  00184	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00189	d1 e2		 shl	 edx, 1
  0018b	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  0018e	b8 04 00 00 00	 mov	 eax, 4
  00193	c1 e0 00	 shl	 eax, 0
  00196	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00199	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  0019e	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  001a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a7	b9 04 00 00 00	 mov	 ecx, 4
  001ac	d1 e1		 shl	 ecx, 1
  001ae	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001b3	d1 e2		 shl	 edx, 1
  001b5	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  001b8	b8 04 00 00 00	 mov	 eax, 4
  001bd	d1 e0		 shl	 eax, 1
  001bf	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  001c2	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  001c7	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  001cc	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001d5	d1 e1		 shl	 ecx, 1
  001d7	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  001da	ba 04 00 00 00	 mov	 edx, 4
  001df	6b c2 03	 imul	 eax, edx, 3
  001e2	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  001e7	b9 04 00 00 00	 mov	 ecx, 4
  001ec	d1 e1		 shl	 ecx, 1
  001ee	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  001f1	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 269  : }

  001f6	5f		 pop	 edi
  001f7	5e		 pop	 esi
  001f8	5b		 pop	 ebx
  001f9	8b e5		 mov	 esp, ebp
  001fb	5d		 pop	 ebp
  001fc	c3		 ret	 0
_VectorTransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorTranslate
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorTranslate PROC					; COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 259  : 	out[0] = in1[0] + in2[0][3];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  0001c	ba 04 00 00 00	 mov	 edx, 4
  00021	6b d2 03	 imul	 edx, edx, 3
  00024	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00027	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0002c	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  0003c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 260  : 	out[1] = in1[1] + in2[1][3];

  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	c1 e0 00	 shl	 eax, 0
  00049	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0004e	c1 e1 00	 shl	 ecx, 0
  00051	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00054	ba 04 00 00 00	 mov	 edx, 4
  00059	6b d2 03	 imul	 edx, edx, 3
  0005c	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  0005f	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  00064	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	c1 e0 00	 shl	 eax, 0
  00071	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00074	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 261  : 	out[2] = in1[2] + in2[2][3];

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	d1 e0		 shl	 eax, 1
  00080	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00085	d1 e1		 shl	 ecx, 1
  00087	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	6b d2 03	 imul	 edx, edx, 3
  00092	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00095	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0009a	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	d1 e0		 shl	 eax, 1
  000a6	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  000a9	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 262  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
_VectorTranslate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorRotate
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorRotate PROC					; COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 242  : 	out[0] = DotProduct(in1, in2[0]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  0001c	ba 04 00 00 00	 mov	 edx, 4
  00021	6b d2 00	 imul	 edx, edx, 0
  00024	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00027	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0002c	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	c1 e0 00	 shl	 eax, 0
  00039	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003e	6b d1 00	 imul	 edx, ecx, 0
  00041	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00044	b9 04 00 00 00	 mov	 ecx, 4
  00049	c1 e1 00	 shl	 ecx, 0
  0004c	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  0004f	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  00054	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  00059	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005d	ba 04 00 00 00	 mov	 edx, 4
  00062	d1 e2		 shl	 edx, 1
  00064	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0006f	b8 04 00 00 00	 mov	 eax, 4
  00074	d1 e0		 shl	 eax, 1
  00076	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00079	f3 0f 10 0c 16	 movss	 xmm1, DWORD PTR [esi+edx]
  0007e	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00083	f3 0f 58 c1	 addss	 xmm0, xmm1
  00087	b9 04 00 00 00	 mov	 ecx, 4
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00092	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 243  : 	out[1] = DotProduct(in1, in2[1]);

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	6b c8 00	 imul	 ecx, eax, 0
  0009f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a4	c1 e2 00	 shl	 edx, 0
  000a7	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c0 00	 imul	 eax, eax, 0
  000b2	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000b5	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000ba	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  000bf	b9 04 00 00 00	 mov	 ecx, 4
  000c4	c1 e1 00	 shl	 ecx, 0
  000c7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cc	c1 e2 00	 shl	 edx, 0
  000cf	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000d2	b8 04 00 00 00	 mov	 eax, 4
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000dd	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  000e2	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  000e7	f3 0f 58 c1	 addss	 xmm0, xmm1
  000eb	b9 04 00 00 00	 mov	 ecx, 4
  000f0	d1 e1		 shl	 ecx, 1
  000f2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000f7	c1 e2 00	 shl	 edx, 0
  000fa	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000fd	b8 04 00 00 00	 mov	 eax, 4
  00102	d1 e0		 shl	 eax, 1
  00104	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00107	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  0010c	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00111	f3 0f 58 c1	 addss	 xmm0, xmm1
  00115	b9 04 00 00 00	 mov	 ecx, 4
  0011a	c1 e1 00	 shl	 ecx, 0
  0011d	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00120	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 244  : 	out[2] = DotProduct(in1, in2[2]);

  00125	b8 04 00 00 00	 mov	 eax, 4
  0012a	6b c8 00	 imul	 ecx, eax, 0
  0012d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00132	d1 e2		 shl	 edx, 1
  00134	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00137	b8 04 00 00 00	 mov	 eax, 4
  0013c	6b c0 00	 imul	 eax, eax, 0
  0013f	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00142	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  00147	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0014c	b9 04 00 00 00	 mov	 ecx, 4
  00151	c1 e1 00	 shl	 ecx, 0
  00154	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00159	d1 e2		 shl	 edx, 1
  0015b	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  0015e	b8 04 00 00 00	 mov	 eax, 4
  00163	c1 e0 00	 shl	 eax, 0
  00166	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00169	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  0016e	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00173	f3 0f 58 c1	 addss	 xmm0, xmm1
  00177	b9 04 00 00 00	 mov	 ecx, 4
  0017c	d1 e1		 shl	 ecx, 1
  0017e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00183	d1 e2		 shl	 edx, 1
  00185	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00188	b8 04 00 00 00	 mov	 eax, 4
  0018d	d1 e0		 shl	 eax, 1
  0018f	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00192	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  00197	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  0019c	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a0	b9 04 00 00 00	 mov	 ecx, 4
  001a5	d1 e1		 shl	 ecx, 1
  001a7	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  001aa	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 245  : }

  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5b		 pop	 ebx
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
_VectorRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorIRotate
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_VectorIRotate PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 251  : 	out[0] = in1[0]*in2[0][0] + in1[1]*in2[1][0] + in1[2]*in2[2][0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  0001c	ba 04 00 00 00	 mov	 edx, 4
  00021	6b d2 00	 imul	 edx, edx, 0
  00024	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00027	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0002c	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	c1 e0 00	 shl	 eax, 0
  00039	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003e	c1 e1 00	 shl	 ecx, 0
  00041	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00044	ba 04 00 00 00	 mov	 edx, 4
  00049	6b d2 00	 imul	 edx, edx, 0
  0004c	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  0004f	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  00054	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00059	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005d	b8 04 00 00 00	 mov	 eax, 4
  00062	d1 e0		 shl	 eax, 1
  00064	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00069	d1 e1		 shl	 ecx, 1
  0006b	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0006e	ba 04 00 00 00	 mov	 edx, 4
  00073	6b d2 00	 imul	 edx, edx, 0
  00076	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00079	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  0007e	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00083	f3 0f 58 c1	 addss	 xmm0, xmm1
  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	6b c8 00	 imul	 ecx, eax, 0
  0008f	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00092	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 252  : 	out[1] = in1[0]*in2[0][1] + in1[1]*in2[1][1] + in1[2]*in2[2][1];

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	6b c8 00	 imul	 ecx, eax, 0
  0009f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a4	6b c2 00	 imul	 eax, edx, 0
  000a7	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  000aa	ba 04 00 00 00	 mov	 edx, 4
  000af	c1 e2 00	 shl	 edx, 0
  000b2	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000b5	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000ba	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	c1 e0 00	 shl	 eax, 0
  000c7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000cc	c1 e1 00	 shl	 ecx, 0
  000cf	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  000d2	ba 04 00 00 00	 mov	 edx, 4
  000d7	c1 e2 00	 shl	 edx, 0
  000da	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  000dd	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  000e2	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  000e7	f3 0f 58 c1	 addss	 xmm0, xmm1
  000eb	b8 04 00 00 00	 mov	 eax, 4
  000f0	d1 e0		 shl	 eax, 1
  000f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000f7	d1 e1		 shl	 ecx, 1
  000f9	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  000fc	ba 04 00 00 00	 mov	 edx, 4
  00101	c1 e2 00	 shl	 edx, 0
  00104	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00107	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  0010c	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00111	f3 0f 58 c1	 addss	 xmm0, xmm1
  00115	b8 04 00 00 00	 mov	 eax, 4
  0011a	c1 e0 00	 shl	 eax, 0
  0011d	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00120	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 253  : 	out[2] = in1[0]*in2[0][2] + in1[1]*in2[1][2] + in1[2]*in2[2][2];

  00125	b8 04 00 00 00	 mov	 eax, 4
  0012a	6b c8 00	 imul	 ecx, eax, 0
  0012d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00132	6b c2 00	 imul	 eax, edx, 0
  00135	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  00138	ba 04 00 00 00	 mov	 edx, 4
  0013d	d1 e2		 shl	 edx, 1
  0013f	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00142	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  00147	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  0014c	b8 04 00 00 00	 mov	 eax, 4
  00151	c1 e0 00	 shl	 eax, 0
  00154	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00159	c1 e1 00	 shl	 ecx, 0
  0015c	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0015f	ba 04 00 00 00	 mov	 edx, 4
  00164	d1 e2		 shl	 edx, 1
  00166	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00169	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  0016e	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00173	f3 0f 58 c1	 addss	 xmm0, xmm1
  00177	b8 04 00 00 00	 mov	 eax, 4
  0017c	d1 e0		 shl	 eax, 1
  0017e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00183	d1 e1		 shl	 ecx, 1
  00185	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00188	ba 04 00 00 00	 mov	 edx, 4
  0018d	d1 e2		 shl	 edx, 1
  0018f	8b 75 08	 mov	 esi, DWORD PTR _in1$[ebp]
  00192	f3 0f 10 0c 06	 movss	 xmm1, DWORD PTR [esi+eax]
  00197	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  0019c	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a0	b8 04 00 00 00	 mov	 eax, 4
  001a5	d1 e0		 shl	 eax, 1
  001a7	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  001aa	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 254  : }

  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5b		 pop	 ebx
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
_VectorIRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _R_ConcatTransforms
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
_R_ConcatTransforms PROC				; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 212  : 	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] +

  00009	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	6b c2 00	 imul	 eax, edx, 0
  0001c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00021	6b d2 00	 imul	 edx, edx, 0
  00024	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00027	be 04 00 00 00	 mov	 esi, 4
  0002c	6b f6 00	 imul	 esi, esi, 0
  0002f	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00034	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  00039	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  00044	ba 04 00 00 00	 mov	 edx, 4
  00049	c1 e2 00	 shl	 edx, 0
  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  00057	be 04 00 00 00	 mov	 esi, 4
  0005c	6b f6 00	 imul	 esi, esi, 0
  0005f	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00064	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00069	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	6b d1 00	 imul	 edx, ecx, 0
  00075	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	d1 e0		 shl	 eax, 1
  0007f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00084	d1 e1		 shl	 ecx, 1
  00086	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00089	be 04 00 00 00	 mov	 esi, 4
  0008e	6b f6 00	 imul	 esi, esi, 0
  00091	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00096	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0009b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a4	6b c2 00	 imul	 eax, edx, 0
  000a7	03 45 10	 add	 eax, DWORD PTR _out$[ebp]
  000aa	b9 04 00 00 00	 mov	 ecx, 4
  000af	6b d1 00	 imul	 edx, ecx, 0
  000b2	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 213  : 				in1[0][2] * in2[2][0];
; 214  : 	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] +

  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	6b c8 00	 imul	 ecx, eax, 0
  000bf	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  000c2	ba 04 00 00 00	 mov	 edx, 4
  000c7	6b c2 00	 imul	 eax, edx, 0
  000ca	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cf	6b d2 00	 imul	 edx, edx, 0
  000d2	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  000d5	be 04 00 00 00	 mov	 esi, 4
  000da	c1 e6 00	 shl	 esi, 0
  000dd	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000e2	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  000e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ec	6b c8 00	 imul	 ecx, eax, 0
  000ef	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 00	 shl	 edx, 0
  000fa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ff	c1 e0 00	 shl	 eax, 0
  00102	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  00105	be 04 00 00 00	 mov	 esi, 4
  0010a	c1 e6 00	 shl	 esi, 0
  0010d	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00112	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00117	f3 0f 58 c1	 addss	 xmm0, xmm1
  0011b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00120	6b d1 00	 imul	 edx, ecx, 0
  00123	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00126	b8 04 00 00 00	 mov	 eax, 4
  0012b	d1 e0		 shl	 eax, 1
  0012d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00132	d1 e1		 shl	 ecx, 1
  00134	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00137	be 04 00 00 00	 mov	 esi, 4
  0013c	c1 e6 00	 shl	 esi, 0
  0013f	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00144	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00149	f3 0f 58 c1	 addss	 xmm0, xmm1
  0014d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00152	6b c2 00	 imul	 eax, edx, 0
  00155	03 45 10	 add	 eax, DWORD PTR _out$[ebp]
  00158	b9 04 00 00 00	 mov	 ecx, 4
  0015d	c1 e1 00	 shl	 ecx, 0
  00160	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 215  : 				in1[0][2] * in2[2][1];
; 216  : 	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] +

  00165	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016a	6b c8 00	 imul	 ecx, eax, 0
  0016d	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  00170	ba 04 00 00 00	 mov	 edx, 4
  00175	6b c2 00	 imul	 eax, edx, 0
  00178	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0017d	6b d2 00	 imul	 edx, edx, 0
  00180	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  00183	be 04 00 00 00	 mov	 esi, 4
  00188	d1 e6		 shl	 esi, 1
  0018a	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0018f	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  00194	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00199	6b c8 00	 imul	 ecx, eax, 0
  0019c	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  0019f	ba 04 00 00 00	 mov	 edx, 4
  001a4	c1 e2 00	 shl	 edx, 0
  001a7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ac	c1 e0 00	 shl	 eax, 0
  001af	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  001b2	be 04 00 00 00	 mov	 esi, 4
  001b7	d1 e6		 shl	 esi, 1
  001b9	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  001be	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  001c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001cc	6b d1 00	 imul	 edx, ecx, 0
  001cf	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  001d2	b8 04 00 00 00	 mov	 eax, 4
  001d7	d1 e0		 shl	 eax, 1
  001d9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001de	d1 e1		 shl	 ecx, 1
  001e0	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  001e3	be 04 00 00 00	 mov	 esi, 4
  001e8	d1 e6		 shl	 esi, 1
  001ea	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  001ef	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  001f4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001fd	6b c2 00	 imul	 eax, edx, 0
  00200	03 45 10	 add	 eax, DWORD PTR _out$[ebp]
  00203	b9 04 00 00 00	 mov	 ecx, 4
  00208	d1 e1		 shl	 ecx, 1
  0020a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 217  : 				in1[0][2] * in2[2][2];
; 218  : 	out[0][3] = in1[0][0] * in2[0][3] + in1[0][1] * in2[1][3] +

  0020f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00214	6b c8 00	 imul	 ecx, eax, 0
  00217	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  0021a	ba 04 00 00 00	 mov	 edx, 4
  0021f	6b c2 00	 imul	 eax, edx, 0
  00222	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00227	6b d2 00	 imul	 edx, edx, 0
  0022a	03 55 0c	 add	 edx, DWORD PTR _in2$[ebp]
  0022d	be 04 00 00 00	 mov	 esi, 4
  00232	6b f6 03	 imul	 esi, esi, 3
  00235	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0023a	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  0023f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00244	6b c8 00	 imul	 ecx, eax, 0
  00247	03 4d 08	 add	 ecx, DWORD PTR _in1$[ebp]
  0024a	ba 04 00 00 00	 mov	 edx, 4
  0024f	c1 e2 00	 shl	 edx, 0
  00252	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00257	c1 e0 00	 shl	 eax, 0
  0025a	03 45 0c	 add	 eax, DWORD PTR _in2$[ebp]
  0025d	be 04 00 00 00	 mov	 esi, 4
  00262	6b f6 03	 imul	 esi, esi, 3
  00265	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0026a	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  0026f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00273	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00278	6b d1 00	 imul	 edx, ecx, 0
  0027b	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0027e	b8 04 00 00 00	 mov	 eax, 4
  00283	d1 e0		 shl	 eax, 1
  00285	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0028a	d1 e1		 shl	 ecx, 1
  0028c	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0028f	be 04 00 00 00	 mov	 esi, 4
  00294	6b f6 03	 imul	 esi, esi, 3
  00297	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0029c	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  002a1	f3 0f 58 c1	 addss	 xmm0, xmm1
  002a5	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002aa	6b c2 00	 imul	 eax, edx, 0
  002ad	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  002b0	b9 04 00 00 00	 mov	 ecx, 4
  002b5	6b d1 03	 imul	 edx, ecx, 3
  002b8	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  002bd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002c2	6b c8 00	 imul	 ecx, eax, 0
  002c5	03 4d 10	 add	 ecx, DWORD PTR _out$[ebp]
  002c8	ba 04 00 00 00	 mov	 edx, 4
  002cd	6b c2 03	 imul	 eax, edx, 3
  002d0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 219  : 				in1[0][2] * in2[2][3] + in1[0][3];
; 220  : 	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] +

  002d5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002da	c1 e0 00	 shl	 eax, 0
  002dd	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  002e0	b9 04 00 00 00	 mov	 ecx, 4
  002e5	6b d1 00	 imul	 edx, ecx, 0
  002e8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002ed	6b c9 00	 imul	 ecx, ecx, 0
  002f0	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  002f3	be 04 00 00 00	 mov	 esi, 4
  002f8	6b f6 00	 imul	 esi, esi, 0
  002fb	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00300	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00305	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0030a	c1 e2 00	 shl	 edx, 0
  0030d	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00310	b8 04 00 00 00	 mov	 eax, 4
  00315	c1 e0 00	 shl	 eax, 0
  00318	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0031d	c1 e1 00	 shl	 ecx, 0
  00320	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00323	be 04 00 00 00	 mov	 esi, 4
  00328	6b f6 00	 imul	 esi, esi, 0
  0032b	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00330	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00335	f3 0f 58 c1	 addss	 xmm0, xmm1
  00339	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0033e	c1 e2 00	 shl	 edx, 0
  00341	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00344	b8 04 00 00 00	 mov	 eax, 4
  00349	d1 e0		 shl	 eax, 1
  0034b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00350	d1 e1		 shl	 ecx, 1
  00352	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00355	be 04 00 00 00	 mov	 esi, 4
  0035a	6b f6 00	 imul	 esi, esi, 0
  0035d	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00362	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00367	f3 0f 58 c1	 addss	 xmm0, xmm1
  0036b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00370	c1 e2 00	 shl	 edx, 0
  00373	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  00376	b8 04 00 00 00	 mov	 eax, 4
  0037b	6b c8 00	 imul	 ecx, eax, 0
  0037e	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 221  : 				in1[1][2] * in2[2][0];
; 222  : 	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] +

  00383	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00388	c1 e0 00	 shl	 eax, 0
  0038b	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  0038e	b9 04 00 00 00	 mov	 ecx, 4
  00393	6b d1 00	 imul	 edx, ecx, 0
  00396	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0039b	6b c9 00	 imul	 ecx, ecx, 0
  0039e	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  003a1	be 04 00 00 00	 mov	 esi, 4
  003a6	c1 e6 00	 shl	 esi, 0
  003a9	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  003ae	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  003b3	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003b8	c1 e2 00	 shl	 edx, 0
  003bb	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  003be	b8 04 00 00 00	 mov	 eax, 4
  003c3	c1 e0 00	 shl	 eax, 0
  003c6	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003cb	c1 e1 00	 shl	 ecx, 0
  003ce	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  003d1	be 04 00 00 00	 mov	 esi, 4
  003d6	c1 e6 00	 shl	 esi, 0
  003d9	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  003de	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  003e3	f3 0f 58 c1	 addss	 xmm0, xmm1
  003e7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003ec	c1 e2 00	 shl	 edx, 0
  003ef	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  003f2	b8 04 00 00 00	 mov	 eax, 4
  003f7	d1 e0		 shl	 eax, 1
  003f9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003fe	d1 e1		 shl	 ecx, 1
  00400	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00403	be 04 00 00 00	 mov	 esi, 4
  00408	c1 e6 00	 shl	 esi, 0
  0040b	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00410	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00415	f3 0f 58 c1	 addss	 xmm0, xmm1
  00419	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0041e	c1 e2 00	 shl	 edx, 0
  00421	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	c1 e0 00	 shl	 eax, 0
  0042c	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 223  : 				in1[1][2] * in2[2][1];
; 224  : 	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] +

  00431	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00436	c1 e0 00	 shl	 eax, 0
  00439	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  0043c	b9 04 00 00 00	 mov	 ecx, 4
  00441	6b d1 00	 imul	 edx, ecx, 0
  00444	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00449	6b c9 00	 imul	 ecx, ecx, 0
  0044c	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0044f	be 04 00 00 00	 mov	 esi, 4
  00454	d1 e6		 shl	 esi, 1
  00456	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0045b	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00460	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00465	c1 e2 00	 shl	 edx, 0
  00468	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0046b	b8 04 00 00 00	 mov	 eax, 4
  00470	c1 e0 00	 shl	 eax, 0
  00473	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00478	c1 e1 00	 shl	 ecx, 0
  0047b	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0047e	be 04 00 00 00	 mov	 esi, 4
  00483	d1 e6		 shl	 esi, 1
  00485	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0048a	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0048f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00493	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00498	c1 e2 00	 shl	 edx, 0
  0049b	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	d1 e0		 shl	 eax, 1
  004a5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004aa	d1 e1		 shl	 ecx, 1
  004ac	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  004af	be 04 00 00 00	 mov	 esi, 4
  004b4	d1 e6		 shl	 esi, 1
  004b6	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  004bb	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  004c0	f3 0f 58 c1	 addss	 xmm0, xmm1
  004c4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004c9	c1 e2 00	 shl	 edx, 0
  004cc	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	d1 e0		 shl	 eax, 1
  004d6	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 225  : 				in1[1][2] * in2[2][2];
; 226  : 	out[1][3] = in1[1][0] * in2[0][3] + in1[1][1] * in2[1][3] +

  004db	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004e0	c1 e0 00	 shl	 eax, 0
  004e3	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  004e6	b9 04 00 00 00	 mov	 ecx, 4
  004eb	6b d1 00	 imul	 edx, ecx, 0
  004ee	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004f3	6b c9 00	 imul	 ecx, ecx, 0
  004f6	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  004f9	be 04 00 00 00	 mov	 esi, 4
  004fe	6b f6 03	 imul	 esi, esi, 3
  00501	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00506	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  0050b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00510	c1 e2 00	 shl	 edx, 0
  00513	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00516	b8 04 00 00 00	 mov	 eax, 4
  0051b	c1 e0 00	 shl	 eax, 0
  0051e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00523	c1 e1 00	 shl	 ecx, 0
  00526	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00529	be 04 00 00 00	 mov	 esi, 4
  0052e	6b f6 03	 imul	 esi, esi, 3
  00531	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00536	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0053b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0053f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00544	c1 e2 00	 shl	 edx, 0
  00547	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0054a	b8 04 00 00 00	 mov	 eax, 4
  0054f	d1 e0		 shl	 eax, 1
  00551	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00556	d1 e1		 shl	 ecx, 1
  00558	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0055b	be 04 00 00 00	 mov	 esi, 4
  00560	6b f6 03	 imul	 esi, esi, 3
  00563	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00568	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0056d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00571	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00576	c1 e2 00	 shl	 edx, 0
  00579	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0057c	b8 04 00 00 00	 mov	 eax, 4
  00581	6b c8 03	 imul	 ecx, eax, 3
  00584	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00589	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0058e	c1 e2 00	 shl	 edx, 0
  00591	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  00594	b8 04 00 00 00	 mov	 eax, 4
  00599	6b c8 03	 imul	 ecx, eax, 3
  0059c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 227  : 				in1[1][2] * in2[2][3] + in1[1][3];
; 228  : 	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] +

  005a1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005a6	d1 e0		 shl	 eax, 1
  005a8	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  005ab	b9 04 00 00 00	 mov	 ecx, 4
  005b0	6b d1 00	 imul	 edx, ecx, 0
  005b3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005b8	6b c9 00	 imul	 ecx, ecx, 0
  005bb	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  005be	be 04 00 00 00	 mov	 esi, 4
  005c3	6b f6 00	 imul	 esi, esi, 0
  005c6	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  005cb	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  005d0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005d5	d1 e2		 shl	 edx, 1
  005d7	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  005da	b8 04 00 00 00	 mov	 eax, 4
  005df	c1 e0 00	 shl	 eax, 0
  005e2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005e7	c1 e1 00	 shl	 ecx, 0
  005ea	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  005ed	be 04 00 00 00	 mov	 esi, 4
  005f2	6b f6 00	 imul	 esi, esi, 0
  005f5	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  005fa	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  005ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00603	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00608	d1 e2		 shl	 edx, 1
  0060a	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0060d	b8 04 00 00 00	 mov	 eax, 4
  00612	d1 e0		 shl	 eax, 1
  00614	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00619	d1 e1		 shl	 ecx, 1
  0061b	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  0061e	be 04 00 00 00	 mov	 esi, 4
  00623	6b f6 00	 imul	 esi, esi, 0
  00626	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0062b	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00630	f3 0f 58 c1	 addss	 xmm0, xmm1
  00634	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00639	d1 e2		 shl	 edx, 1
  0063b	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  0063e	b8 04 00 00 00	 mov	 eax, 4
  00643	6b c8 00	 imul	 ecx, eax, 0
  00646	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 229  : 				in1[2][2] * in2[2][0];
; 230  : 	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] +

  0064b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00650	d1 e0		 shl	 eax, 1
  00652	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  00655	b9 04 00 00 00	 mov	 ecx, 4
  0065a	6b d1 00	 imul	 edx, ecx, 0
  0065d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00662	6b c9 00	 imul	 ecx, ecx, 0
  00665	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00668	be 04 00 00 00	 mov	 esi, 4
  0066d	c1 e6 00	 shl	 esi, 0
  00670	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00675	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  0067a	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0067f	d1 e2		 shl	 edx, 1
  00681	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00684	b8 04 00 00 00	 mov	 eax, 4
  00689	c1 e0 00	 shl	 eax, 0
  0068c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00691	c1 e1 00	 shl	 ecx, 0
  00694	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00697	be 04 00 00 00	 mov	 esi, 4
  0069c	c1 e6 00	 shl	 esi, 0
  0069f	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  006a4	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  006a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  006ad	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006b2	d1 e2		 shl	 edx, 1
  006b4	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  006b7	b8 04 00 00 00	 mov	 eax, 4
  006bc	d1 e0		 shl	 eax, 1
  006be	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006c3	d1 e1		 shl	 ecx, 1
  006c5	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  006c8	be 04 00 00 00	 mov	 esi, 4
  006cd	c1 e6 00	 shl	 esi, 0
  006d0	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  006d5	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  006da	f3 0f 58 c1	 addss	 xmm0, xmm1
  006de	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006e3	d1 e2		 shl	 edx, 1
  006e5	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  006e8	b8 04 00 00 00	 mov	 eax, 4
  006ed	c1 e0 00	 shl	 eax, 0
  006f0	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 231  : 				in1[2][2] * in2[2][1];
; 232  : 	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] +

  006f5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006fa	d1 e0		 shl	 eax, 1
  006fc	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  006ff	b9 04 00 00 00	 mov	 ecx, 4
  00704	6b d1 00	 imul	 edx, ecx, 0
  00707	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0070c	6b c9 00	 imul	 ecx, ecx, 0
  0070f	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00712	be 04 00 00 00	 mov	 esi, 4
  00717	d1 e6		 shl	 esi, 1
  00719	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0071e	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  00723	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00728	d1 e2		 shl	 edx, 1
  0072a	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0072d	b8 04 00 00 00	 mov	 eax, 4
  00732	c1 e0 00	 shl	 eax, 0
  00735	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0073a	c1 e1 00	 shl	 ecx, 0
  0073d	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00740	be 04 00 00 00	 mov	 esi, 4
  00745	d1 e6		 shl	 esi, 1
  00747	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0074c	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00751	f3 0f 58 c1	 addss	 xmm0, xmm1
  00755	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0075a	d1 e2		 shl	 edx, 1
  0075c	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  0075f	b8 04 00 00 00	 mov	 eax, 4
  00764	d1 e0		 shl	 eax, 1
  00766	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0076b	d1 e1		 shl	 ecx, 1
  0076d	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00770	be 04 00 00 00	 mov	 esi, 4
  00775	d1 e6		 shl	 esi, 1
  00777	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0077c	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00781	f3 0f 58 c1	 addss	 xmm0, xmm1
  00785	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0078a	d1 e2		 shl	 edx, 1
  0078c	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	d1 e0		 shl	 eax, 1
  00796	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 233  : 				in1[2][2] * in2[2][2];
; 234  : 	out[2][3] = in1[2][0] * in2[0][3] + in1[2][1] * in2[1][3] +

  0079b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  007a0	d1 e0		 shl	 eax, 1
  007a2	03 45 08	 add	 eax, DWORD PTR _in1$[ebp]
  007a5	b9 04 00 00 00	 mov	 ecx, 4
  007aa	6b d1 00	 imul	 edx, ecx, 0
  007ad	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007b2	6b c9 00	 imul	 ecx, ecx, 0
  007b5	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  007b8	be 04 00 00 00	 mov	 esi, 4
  007bd	6b f6 03	 imul	 esi, esi, 3
  007c0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  007c5	f3 0f 59 04 31	 mulss	 xmm0, DWORD PTR [ecx+esi]
  007ca	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  007cf	d1 e2		 shl	 edx, 1
  007d1	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  007d4	b8 04 00 00 00	 mov	 eax, 4
  007d9	c1 e0 00	 shl	 eax, 0
  007dc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007e1	c1 e1 00	 shl	 ecx, 0
  007e4	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  007e7	be 04 00 00 00	 mov	 esi, 4
  007ec	6b f6 03	 imul	 esi, esi, 3
  007ef	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  007f4	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  007f9	f3 0f 58 c1	 addss	 xmm0, xmm1
  007fd	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00802	d1 e2		 shl	 edx, 1
  00804	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00807	b8 04 00 00 00	 mov	 eax, 4
  0080c	d1 e0		 shl	 eax, 1
  0080e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00813	d1 e1		 shl	 ecx, 1
  00815	03 4d 0c	 add	 ecx, DWORD PTR _in2$[ebp]
  00818	be 04 00 00 00	 mov	 esi, 4
  0081d	6b f6 03	 imul	 esi, esi, 3
  00820	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00825	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  0082a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0082e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00833	d1 e2		 shl	 edx, 1
  00835	03 55 08	 add	 edx, DWORD PTR _in1$[ebp]
  00838	b8 04 00 00 00	 mov	 eax, 4
  0083d	6b c8 03	 imul	 ecx, eax, 3
  00840	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00845	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0084a	d1 e2		 shl	 edx, 1
  0084c	03 55 10	 add	 edx, DWORD PTR _out$[ebp]
  0084f	b8 04 00 00 00	 mov	 eax, 4
  00854	6b c8 03	 imul	 ecx, eax, 3
  00857	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 235  : 				in1[2][2] * in2[2][3] + in1[2][3];
; 236  : }

  0085c	5f		 pop	 edi
  0085d	5e		 pop	 esi
  0085e	5b		 pop	 ebx
  0085f	8b e5		 mov	 esp, ebp
  00861	5d		 pop	 ebp
  00862	c3		 ret	 0
_R_ConcatTransforms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _AngleIMatrix
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
_AngleIMatrix PROC					; COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 182  : 	float		angle;
; 183  : 	float		sr, sp, sy, cr, cp, cy;
; 184  : 	
; 185  : 	angle = angles[2] * (Q_PI*2 / 360);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00013	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00018	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00020	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 186  : 	sy = (float)sin(angle);

  00025	51		 push	 ecx
  00026	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00035	83 c4 04	 add	 esp, 4
  00038	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 187  : 	cy = (float)cos(angle);

  0003b	51		 push	 ecx
  0003c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0004b	83 c4 04	 add	 esp, 4
  0004e	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 188  : 	angle = angles[1] * (Q_PI*2 / 360);

  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	c1 e0 00	 shl	 eax, 0
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0005c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00061	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 189  : 	sp = (float)sin(angle);

  0006e	51		 push	 ecx
  0006f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  0007e	83 c4 04	 add	 esp, 4
  00081	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 190  : 	cp = (float)cos(angle);

  00084	51		 push	 ecx
  00085	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00094	83 c4 04	 add	 esp, 4
  00097	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 191  : 	angle = angles[0] * (Q_PI*2 / 360);

  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  000a5	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000aa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000b2	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 192  : 	sr = (float)sin(angle);

  000b7	51		 push	 ecx
  000b8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  000c7	83 c4 04	 add	 esp, 4
  000ca	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 193  : 	cr = (float)cos(angle);

  000cd	51		 push	 ecx
  000ce	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  000dd	83 c4 04	 add	 esp, 4
  000e0	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 194  : 
; 195  : 	// matrix = (Z * Y) * X
; 196  : 	matrix[0][0] = cp*cy;

  000e3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _cp$[ebp]
  000e8	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  000ed	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f2	6b c8 00	 imul	 ecx, eax, 0
  000f5	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  000f8	ba 04 00 00 00	 mov	 edx, 4
  000fd	6b c2 00	 imul	 eax, edx, 0
  00100	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 197  : 	matrix[0][1] = cp*sy;

  00105	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _cp$[ebp]
  0010a	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  0010f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00114	6b c8 00	 imul	 ecx, eax, 0
  00117	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0011a	ba 04 00 00 00	 mov	 edx, 4
  0011f	c1 e2 00	 shl	 edx, 0
  00122	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 198  : 	matrix[0][2] = -sp;

  00127	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _sp$[ebp]
  0012c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00133	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00138	6b c8 00	 imul	 ecx, eax, 0
  0013b	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0013e	ba 04 00 00 00	 mov	 edx, 4
  00143	d1 e2		 shl	 edx, 1
  00145	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 199  : 	matrix[1][0] = sr*sp*cy+cr*-sy;

  0014a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  0014f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  00154	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00159	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0015e	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00165	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _cr$[ebp]
  0016a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0016e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00173	c1 e0 00	 shl	 eax, 0
  00176	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00179	b9 04 00 00 00	 mov	 ecx, 4
  0017e	6b d1 00	 imul	 edx, ecx, 0
  00181	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 200  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  00186	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  0018b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  00190	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00195	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _cr$[ebp]
  0019a	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _cy$[ebp]
  0019f	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a8	c1 e0 00	 shl	 eax, 0
  001ab	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001ae	b9 04 00 00 00	 mov	 ecx, 4
  001b3	c1 e1 00	 shl	 ecx, 0
  001b6	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 201  : 	matrix[1][2] = sr*cp;

  001bb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  001c0	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  001c5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ca	c1 e0 00	 shl	 eax, 0
  001cd	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001d0	b9 04 00 00 00	 mov	 ecx, 4
  001d5	d1 e1		 shl	 ecx, 1
  001d7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 202  : 	matrix[2][0] = (cr*sp*cy+-sr*-sy);

  001dc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  001e1	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  001e6	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  001eb	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  001f0	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  001f7	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _sy$[ebp]
  001fc	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00203	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00207	f3 0f 58 c1	 addss	 xmm0, xmm1
  0020b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00210	d1 e0		 shl	 eax, 1
  00212	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00215	b9 04 00 00 00	 mov	 ecx, 4
  0021a	6b d1 00	 imul	 edx, ecx, 0
  0021d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 203  : 	matrix[2][1] = (cr*sp*sy+-sr*cy);

  00222	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00227	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  0022c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00231	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  00236	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0023d	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _cy$[ebp]
  00242	f3 0f 58 c1	 addss	 xmm0, xmm1
  00246	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024b	d1 e0		 shl	 eax, 1
  0024d	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00250	b9 04 00 00 00	 mov	 ecx, 4
  00255	c1 e1 00	 shl	 ecx, 0
  00258	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 204  : 	matrix[2][2] = cr*cp;

  0025d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00262	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  00267	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026c	d1 e0		 shl	 eax, 1
  0026e	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00271	b9 04 00 00 00	 mov	 ecx, 4
  00276	d1 e1		 shl	 ecx, 1
  00278	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 205  : 	matrix[0][3] = 0.0;

  0027d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00282	6b c8 00	 imul	 ecx, eax, 0
  00285	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00288	ba 04 00 00 00	 mov	 edx, 4
  0028d	6b c2 03	 imul	 eax, edx, 3
  00290	0f 57 c0	 xorps	 xmm0, xmm0
  00293	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 206  : 	matrix[1][3] = 0.0;

  00298	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029d	c1 e0 00	 shl	 eax, 0
  002a0	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 03	 imul	 edx, ecx, 3
  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 207  : 	matrix[2][3] = 0.0;

  002b3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002b8	d1 e0		 shl	 eax, 1
  002ba	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002bd	b9 04 00 00 00	 mov	 ecx, 4
  002c2	6b d1 03	 imul	 edx, ecx, 3
  002c5	0f 57 c0	 xorps	 xmm0, xmm0
  002c8	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 208  : }

  002cd	5f		 pop	 edi
  002ce	5e		 pop	 esi
  002cf	5b		 pop	 ebx
  002d0	8b e5		 mov	 esp, ebp
  002d2	5d		 pop	 ebp
  002d3	c3		 ret	 0
_AngleIMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _AngleMatrix
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
_AngleMatrix PROC					; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 152  : 	float		angle;
; 153  : 	float		sr, sp, sy, cr, cp, cy;
; 154  : 	
; 155  : 	angle = angles[2] * (Q_PI*2 / 360);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00013	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00018	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00020	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 156  : 	sy = (float)sin(angle);

  00025	51		 push	 ecx
  00026	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00035	83 c4 04	 add	 esp, 4
  00038	d9 5d f0	 fstp	 DWORD PTR _sy$[ebp]

; 157  : 	cy = (float)cos(angle);

  0003b	51		 push	 ecx
  0003c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0004b	83 c4 04	 add	 esp, 4
  0004e	d9 5d e4	 fstp	 DWORD PTR _cy$[ebp]

; 158  : 	angle = angles[1] * (Q_PI*2 / 360);

  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	c1 e0 00	 shl	 eax, 0
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0005c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00061	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 159  : 	sp = (float)sin(angle);

  0006e	51		 push	 ecx
  0006f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  0007e	83 c4 04	 add	 esp, 4
  00081	d9 5d f4	 fstp	 DWORD PTR _sp$[ebp]

; 160  : 	cp = (float)cos(angle);

  00084	51		 push	 ecx
  00085	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00094	83 c4 04	 add	 esp, 4
  00097	d9 5d e8	 fstp	 DWORD PTR _cp$[ebp]

; 161  : 	angle = angles[0] * (Q_PI*2 / 360);

  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  000a5	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000aa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000b2	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 162  : 	sr = (float)sin(angle);

  000b7	51		 push	 ecx
  000b8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  000c7	83 c4 04	 add	 esp, 4
  000ca	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 163  : 	cr = (float)cos(angle);

  000cd	51		 push	 ecx
  000ce	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  000dd	83 c4 04	 add	 esp, 4
  000e0	d9 5d ec	 fstp	 DWORD PTR _cr$[ebp]

; 164  : 
; 165  : 	// matrix = (Z * Y) * X
; 166  : 	matrix[0][0] = cp*cy;

  000e3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _cp$[ebp]
  000e8	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  000ed	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f2	6b c8 00	 imul	 ecx, eax, 0
  000f5	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  000f8	ba 04 00 00 00	 mov	 edx, 4
  000fd	6b c2 00	 imul	 eax, edx, 0
  00100	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 167  : 	matrix[1][0] = cp*sy;

  00105	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _cp$[ebp]
  0010a	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  0010f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00114	c1 e0 00	 shl	 eax, 0
  00117	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0011a	b9 04 00 00 00	 mov	 ecx, 4
  0011f	6b d1 00	 imul	 edx, ecx, 0
  00122	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 168  : 	matrix[2][0] = -sp;

  00127	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _sp$[ebp]
  0012c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00133	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00138	d1 e0		 shl	 eax, 1
  0013a	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0013d	b9 04 00 00 00	 mov	 ecx, 4
  00142	6b d1 00	 imul	 edx, ecx, 0
  00145	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 169  : 	matrix[0][1] = sr*sp*cy+cr*-sy;

  0014a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  0014f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  00154	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00159	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0015e	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00165	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _cr$[ebp]
  0016a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0016e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00173	6b c8 00	 imul	 ecx, eax, 0
  00176	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00179	ba 04 00 00 00	 mov	 edx, 4
  0017e	c1 e2 00	 shl	 edx, 0
  00181	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 170  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  00186	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  0018b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  00190	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00195	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _cr$[ebp]
  0019a	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _cy$[ebp]
  0019f	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a8	c1 e0 00	 shl	 eax, 0
  001ab	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001ae	b9 04 00 00 00	 mov	 ecx, 4
  001b3	c1 e1 00	 shl	 ecx, 0
  001b6	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 171  : 	matrix[2][1] = sr*cp;

  001bb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _sr$[ebp]
  001c0	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  001c5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ca	d1 e0		 shl	 eax, 1
  001cc	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001cf	b9 04 00 00 00	 mov	 ecx, 4
  001d4	c1 e1 00	 shl	 ecx, 0
  001d7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 172  : 	matrix[0][2] = (cr*sp*cy+-sr*-sy);

  001dc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  001e1	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  001e6	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  001eb	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  001f0	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  001f7	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _sy$[ebp]
  001fc	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00203	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00207	f3 0f 58 c1	 addss	 xmm0, xmm1
  0020b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00210	6b c8 00	 imul	 ecx, eax, 0
  00213	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00216	ba 04 00 00 00	 mov	 edx, 4
  0021b	d1 e2		 shl	 edx, 1
  0021d	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 173  : 	matrix[1][2] = (cr*sp*sy+-sr*cy);

  00222	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00227	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sp$[ebp]
  0022c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00231	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _sr$[ebp]
  00236	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0023d	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _cy$[ebp]
  00242	f3 0f 58 c1	 addss	 xmm0, xmm1
  00246	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024b	c1 e0 00	 shl	 eax, 0
  0024e	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00251	b9 04 00 00 00	 mov	 ecx, 4
  00256	d1 e1		 shl	 ecx, 1
  00258	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 174  : 	matrix[2][2] = cr*cp;

  0025d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cr$[ebp]
  00262	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _cp$[ebp]
  00267	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026c	d1 e0		 shl	 eax, 1
  0026e	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00271	b9 04 00 00 00	 mov	 ecx, 4
  00276	d1 e1		 shl	 ecx, 1
  00278	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 175  : 	matrix[0][3] = 0.0;

  0027d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00282	6b c8 00	 imul	 ecx, eax, 0
  00285	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00288	ba 04 00 00 00	 mov	 edx, 4
  0028d	6b c2 03	 imul	 eax, edx, 3
  00290	0f 57 c0	 xorps	 xmm0, xmm0
  00293	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 176  : 	matrix[1][3] = 0.0;

  00298	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029d	c1 e0 00	 shl	 eax, 0
  002a0	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 03	 imul	 edx, ecx, 3
  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 177  : 	matrix[2][3] = 0.0;

  002b3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002b8	d1 e0		 shl	 eax, 1
  002ba	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002bd	b9 04 00 00 00	 mov	 ecx, 4
  002c2	6b d1 03	 imul	 edx, ecx, 3
  002c5	0f 57 c0	 xorps	 xmm0, xmm0
  002c8	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 178  : }

  002cd	5f		 pop	 edi
  002ce	5e		 pop	 esi
  002cf	5b		 pop	 ebx
  002d0	8b e5		 mov	 esp, ebp
  002d2	5d		 pop	 ebp
  002d3	c3		 ret	 0
_AngleMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _AddPointToBounds
_TEXT	SEGMENT
_val$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_AddPointToBounds PROC					; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 137  : 	int		i;
; 138  : 	vec_t	val;
; 139  : 
; 140  : 	for (i=0 ; i<3 ; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@AddPointTo
$LN2@AddPointTo:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AddPointTo:
  0001b	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0001f	7d 54		 jge	 SHORT $LN3@AddPointTo

; 141  : 	{
; 142  : 		val = v[i];

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00027	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0002c	f3 0f 11 45 f8	 movss	 DWORD PTR _val$[ebp], xmm0

; 143  : 		if (val < mins[i])

  00031	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  00037	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0003c	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _val$[ebp]
  00040	76 10		 jbe	 SHORT $LN5@AddPointTo

; 144  : 			mins[i] = val;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  00048	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _val$[ebp]
  0004d	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0
$LN5@AddPointTo:

; 145  : 		if (val > maxs[i])

  00052	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00055	8b 4d 10	 mov	 ecx, DWORD PTR _maxs$[ebp]
  00058	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _val$[ebp]
  0005d	0f 2f 04 81	 comiss	 xmm0, DWORD PTR [ecx+eax*4]
  00061	76 10		 jbe	 SHORT $LN6@AddPointTo

; 146  : 			maxs[i] = val;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00066	8b 4d 10	 mov	 ecx, DWORD PTR _maxs$[ebp]
  00069	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _val$[ebp]
  0006e	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0
$LN6@AddPointTo:

; 147  : 	}

  00073	eb 9d		 jmp	 SHORT $LN2@AddPointTo
$LN3@AddPointTo:

; 148  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_AddPointToBounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _ClearBounds
_TEXT	SEGMENT
_mins$ = 8						; size = 4
_maxs$ = 12						; size = 4
_ClearBounds PROC					; COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 	mins[0] = mins[1] = mins[2] = 99999;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _mins$[ebp]
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c34f80
  0001b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  00020	ba 04 00 00 00	 mov	 edx, 4
  00025	c1 e2 00	 shl	 edx, 0
  00028	8b 45 08	 mov	 eax, DWORD PTR _mins$[ebp]
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c34f80
  00033	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00038	b9 04 00 00 00	 mov	 ecx, 4
  0003d	6b d1 00	 imul	 edx, ecx, 0
  00040	8b 45 08	 mov	 eax, DWORD PTR _mins$[ebp]
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c34f80
  0004b	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 132  : 	maxs[0] = maxs[1] = maxs[2] = -99999;

  00050	b8 04 00 00 00	 mov	 eax, 4
  00055	d1 e0		 shl	 eax, 1
  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _maxs$[ebp]
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c34f80
  00062	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  00067	ba 04 00 00 00	 mov	 edx, 4
  0006c	c1 e2 00	 shl	 edx, 0
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _maxs$[ebp]
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c34f80
  0007a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0007f	b9 04 00 00 00	 mov	 ecx, 4
  00084	6b d1 00	 imul	 edx, ecx, 0
  00087	8b 45 0c	 mov	 eax, DWORD PTR _maxs$[ebp]
  0008a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c34f80
  00092	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 133  : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_ClearBounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorInverse
_TEXT	SEGMENT
_v$ = 8							; size = 4
_VectorInverse PROC					; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 124  : 	v[0] = -v[0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00014	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00019	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 00	 imul	 ecx, eax, 0
  00028	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0002b	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 125  : 	v[1] = -v[1];

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	c1 e0 00	 shl	 eax, 0
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00052	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 126  : 	v[2] = -v[2];

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	d1 e0		 shl	 eax, 1
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00061	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00066	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0006d	ba 04 00 00 00	 mov	 edx, 4
  00072	d1 e2		 shl	 edx, 1
  00074	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00077	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 127  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_VectorInverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorNormalize
_TEXT	SEGMENT
tv95 = -80						; size = 8
_length$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_VectorNormalize PROC					; COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 103  : 	int		i;
; 104  : 	float	length;
; 105  : 
; 106  : if ( fabs(v[1] - 0.000215956) < 0.0001)

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  00019	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f2c4e47ea2d0d88
  00021	83 ec 08	 sub	 esp, 8
  00024	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00029	e8 00 00 00 00	 call	 _fabs
  0002e	83 c4 08	 add	 esp, 8
  00031	dd 5d b0	 fstp	 QWORD PTR tv95[ebp]
  00034	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  0003c	66 0f 2f 45 b0	 comisd	 xmm0, QWORD PTR tv95[ebp]
  00041	76 07		 jbe	 SHORT $LN8@VectorNorm

; 107  : i=1;

  00043	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
$LN8@VectorNorm:

; 108  : 
; 109  : 	length = 0;

  0004a	0f 57 c0	 xorps	 xmm0, xmm0
  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR _length$[ebp], xmm0

; 110  : 	for (i=0 ; i< 3 ; i++)

  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@VectorNorm
$LN2@VectorNorm:
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@VectorNorm:
  00064	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00068	7d 22		 jge	 SHORT $LN3@VectorNorm

; 111  : 		length += v[i]*v[i];

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00070	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00073	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00076	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0007b	f3 0f 59 04 96	 mulss	 xmm0, DWORD PTR [esi+edx*4]
  00080	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _length$[ebp]
  00085	f3 0f 11 45 f8	 movss	 DWORD PTR _length$[ebp], xmm0
  0008a	eb cf		 jmp	 SHORT $LN2@VectorNorm
$LN3@VectorNorm:

; 112  : 	length = sqrtf (length);

  0008c	51		 push	 ecx
  0008d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 _sqrtf
  0009c	83 c4 04	 add	 esp, 4
  0009f	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 113  : 	if (length == 0)

  000a2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  000a7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000ae	9f		 lahf
  000af	f6 c4 44	 test	 ah, 68			; 00000044H
  000b2	7a 04		 jp	 SHORT $LN9@VectorNorm

; 114  : 		return 0;

  000b4	d9 ee		 fldz
  000b6	eb 38		 jmp	 SHORT $LN1@VectorNorm
$LN9@VectorNorm:

; 115  : 		
; 116  : 	for (i=0 ; i< 3 ; i++)

  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bf	eb 09		 jmp	 SHORT $LN7@VectorNorm
$LN5@VectorNorm:
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@VectorNorm:
  000ca	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  000ce	7d 1d		 jge	 SHORT $LN6@VectorNorm

; 117  : 		v[i] /= length;	

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000d6	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  000db	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _length$[ebp]
  000e0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000e6	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0
  000eb	eb d4		 jmp	 SHORT $LN5@VectorNorm
$LN6@VectorNorm:

; 118  : 
; 119  : 	return length;

  000ed	d9 45 f8	 fld	 DWORD PTR _length$[ebp]
$LN1@VectorNorm:

; 120  : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
_VectorNormalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _CrossProduct
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_cross$ = 16						; size = 4
_CrossProduct PROC					; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	cross[0] = v1[1]*v2[2] - v1[2]*v2[1];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 00	 shl	 eax, 0
  00011	b9 04 00 00 00	 mov	 ecx, 4
  00016	d1 e1		 shl	 ecx, 1
  00018	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0001b	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0001e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00023	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	b9 04 00 00 00	 mov	 ecx, 4
  00034	c1 e1 00	 shl	 ecx, 0
  00037	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0003a	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0003d	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00042	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00047	f3 0f 5c c1	 subss	 xmm0, xmm1
  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8b 55 10	 mov	 edx, DWORD PTR _cross$[ebp]
  00056	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 64   : 	cross[1] = v1[2]*v2[0] - v1[0]*v2[2];

  0005b	b8 04 00 00 00	 mov	 eax, 4
  00060	d1 e0		 shl	 eax, 1
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	6b d1 00	 imul	 edx, ecx, 0
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0006d	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  00070	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00075	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0007a	ba 04 00 00 00	 mov	 edx, 4
  0007f	6b c2 00	 imul	 eax, edx, 0
  00082	b9 04 00 00 00	 mov	 ecx, 4
  00087	d1 e1		 shl	 ecx, 1
  00089	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0008c	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0008f	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00094	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00099	f3 0f 5c c1	 subss	 xmm0, xmm1
  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	c1 e0 00	 shl	 eax, 0
  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _cross$[ebp]
  000a8	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 65   : 	cross[2] = v1[0]*v2[1] - v1[1]*v2[0];

  000ad	b8 04 00 00 00	 mov	 eax, 4
  000b2	6b c8 00	 imul	 ecx, eax, 0
  000b5	ba 04 00 00 00	 mov	 edx, 4
  000ba	c1 e2 00	 shl	 edx, 0
  000bd	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  000c0	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  000c3	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000c8	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  000cd	b9 04 00 00 00	 mov	 ecx, 4
  000d2	c1 e1 00	 shl	 ecx, 0
  000d5	ba 04 00 00 00	 mov	 edx, 4
  000da	6b c2 00	 imul	 eax, edx, 0
  000dd	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  000e0	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  000e3	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  000e8	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  000ed	f3 0f 5c c1	 subss	 xmm0, xmm1
  000f1	b8 04 00 00 00	 mov	 eax, 4
  000f6	d1 e0		 shl	 eax, 1
  000f8	8b 4d 10	 mov	 ecx, DWORD PTR _cross$[ebp]
  000fb	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 66   : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_CrossProduct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorMA
_TEXT	SEGMENT
_va$ = 8						; size = 4
_scale$ = 12						; size = 4
_vb$ = 16						; size = 4
_vc$ = 20						; size = 4
_VectorMA PROC						; COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   : 	vc[0] = va[0] + scale*vb[0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	8b 55 10	 mov	 edx, DWORD PTR _vb$[ebp]
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00021	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00026	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  00029	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0002e	b9 04 00 00 00	 mov	 ecx, 4
  00033	6b d1 00	 imul	 edx, ecx, 0
  00036	8b 45 14	 mov	 eax, DWORD PTR _vc$[ebp]
  00039	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 57   : 	vc[1] = va[1] + scale*vb[1];

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	c1 e0 00	 shl	 eax, 0
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	c1 e1 00	 shl	 ecx, 0
  0004e	8b 55 10	 mov	 edx, DWORD PTR _vb$[ebp]
  00051	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00056	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  0005e	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00063	ba 04 00 00 00	 mov	 edx, 4
  00068	c1 e2 00	 shl	 edx, 0
  0006b	8b 45 14	 mov	 eax, DWORD PTR _vc$[ebp]
  0006e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 58   : 	vc[2] = va[2] + scale*vb[2];

  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	d1 e0		 shl	 eax, 1
  0007a	b9 04 00 00 00	 mov	 ecx, 4
  0007f	d1 e1		 shl	 ecx, 1
  00081	8b 55 10	 mov	 edx, DWORD PTR _vb$[ebp]
  00084	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00089	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  00091	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	d1 e2		 shl	 edx, 1
  0009d	8b 45 14	 mov	 eax, DWORD PTR _vc$[ebp]
  000a0	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 59   : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_VectorMA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorLength
_TEXT	SEGMENT
_length$ = -8						; size = 4
_i$ = -4						; size = 4
_v$ = 8							; size = 4
_VectorLength PROC					; COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 26   : 	int		i;
; 27   : 	float	length;
; 28   : 	
; 29   : 	length = 0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 f8	 movss	 DWORD PTR _length$[ebp], xmm0

; 30   : 	for (i=0 ; i< 3 ; i++)

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00018	eb 09		 jmp	 SHORT $LN4@VectorLeng
$LN2@VectorLeng:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@VectorLeng:
  00023	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00027	7d 22		 jge	 SHORT $LN3@VectorLeng

; 31   : 		length += v[i]*v[i];

  00029	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00032	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00035	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  0003a	f3 0f 59 04 96	 mulss	 xmm0, DWORD PTR [esi+edx*4]
  0003f	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _length$[ebp]
  00044	f3 0f 11 45 f8	 movss	 DWORD PTR _length$[ebp], xmm0
  00049	eb cf		 jmp	 SHORT $LN2@VectorLeng
$LN3@VectorLeng:

; 32   : 	length = sqrtf (length);		// FIXME

  0004b	51		 push	 ecx
  0004c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 _sqrtf
  0005b	83 c4 04	 add	 esp, 4
  0005e	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 33   : 
; 34   : 	return length;

  00061	d9 45 f8	 fld	 DWORD PTR _length$[ebp]

; 35   : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_VectorLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT __VectorScale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_scale$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorScale PROC					; COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	out[0] = v[0] * scale;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00014	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00019	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00029	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 97   : 	out[1] = v[1] * scale;

  0002e	b8 04 00 00 00	 mov	 eax, 4
  00033	c1 e0 00	 shl	 eax, 0
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00039	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0003e	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00043	ba 04 00 00 00	 mov	 edx, 4
  00048	c1 e2 00	 shl	 edx, 0
  0004b	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0004e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 98   : 	out[2] = v[2] * scale;

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	d1 e0		 shl	 eax, 1
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005d	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00062	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00067	ba 04 00 00 00	 mov	 edx, 4
  0006c	d1 e2		 shl	 edx, 1
  0006e	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  00071	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 99   : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
__VectorScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT __VectorCopy
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
__VectorCopy PROC					; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : 	out[0] = in[0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  0001c	8b 75 08	 mov	 esi, DWORD PTR _in$[ebp]
  0001f	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00022	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 90   : 	out[1] = in[1];

  00025	b8 04 00 00 00	 mov	 eax, 4
  0002a	c1 e0 00	 shl	 eax, 0
  0002d	b9 04 00 00 00	 mov	 ecx, 4
  00032	c1 e1 00	 shl	 ecx, 0
  00035	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR _in$[ebp]
  0003b	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0003e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 91   : 	out[2] = in[2];

  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	d1 e0		 shl	 eax, 1
  00048	b9 04 00 00 00	 mov	 ecx, 4
  0004d	d1 e1		 shl	 ecx, 1
  0004f	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00052	8b 75 08	 mov	 esi, DWORD PTR _in$[ebp]
  00055	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00058	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 92   : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
__VectorCopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT __VectorAdd
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorAdd PROC					; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 82   : 	out[0] = va[0]+vb[0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0001f	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00024	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	6b c8 00	 imul	 ecx, eax, 0
  00031	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00034	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 83   : 	out[1] = va[1]+vb[1];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	c1 e0 00	 shl	 eax, 0
  00041	b9 04 00 00 00	 mov	 ecx, 4
  00046	c1 e1 00	 shl	 ecx, 0
  00049	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0004c	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0004f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00054	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	c1 e0 00	 shl	 eax, 0
  00061	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00064	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 84   : 	out[2] = va[2]+vb[2];

  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	d1 e0		 shl	 eax, 1
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	d1 e1		 shl	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0007a	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0007d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00082	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	d1 e0		 shl	 eax, 1
  0008e	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00091	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 85   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
__VectorAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT __VectorSubtract
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
__VectorSubtract PROC					; COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	out[0] = va[0]-vb[0];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0001f	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00024	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	6b c8 00	 imul	 ecx, eax, 0
  00031	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00034	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 76   : 	out[1] = va[1]-vb[1];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	c1 e0 00	 shl	 eax, 0
  00041	b9 04 00 00 00	 mov	 ecx, 4
  00046	c1 e1 00	 shl	 ecx, 0
  00049	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0004c	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0004f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00054	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	c1 e0 00	 shl	 eax, 0
  00061	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00064	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 77   : 	out[2] = va[2]-vb[2];

  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	d1 e0		 shl	 eax, 1
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	d1 e1		 shl	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  0007a	8b 75 0c	 mov	 esi, DWORD PTR _vb$[ebp]
  0007d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00082	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	d1 e0		 shl	 eax, 1
  0008e	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  00091	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 78   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
__VectorSubtract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT __DotProduct
_TEXT	SEGMENT
tv129 = -68						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
__DotProduct PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 70   : 	return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	6b c2 00	 imul	 eax, edx, 0
  00019	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0001f	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00024	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	c1 e0 00	 shl	 eax, 0
  00031	b9 04 00 00 00	 mov	 ecx, 4
  00036	c1 e1 00	 shl	 ecx, 0
  00039	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0003c	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0003f	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00044	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00049	f3 0f 58 c1	 addss	 xmm0, xmm1
  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	d1 e0		 shl	 eax, 1
  00054	b9 04 00 00 00	 mov	 ecx, 4
  00059	d1 e1		 shl	 ecx, 1
  0005b	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  0005e	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  00061	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00066	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0006b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006f	f3 0f 11 45 bc	 movss	 DWORD PTR tv129[ebp], xmm0
  00074	d9 45 bc	 fld	 DWORD PTR tv129[ebp]

; 71   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
__DotProduct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _Q_rint
_TEXT	SEGMENT
tv72 = -68						; size = 4
_in$ = 8						; size = 4
_Q_rint	PROC						; COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return (vec_t)floor (in + 0.5);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _in$[ebp]
  0000e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00016	83 ec 08	 sub	 esp, 8
  00019	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001e	e8 00 00 00 00	 call	 _floor
  00023	83 c4 08	 add	 esp, 8
  00026	d9 5d bc	 fstp	 DWORD PTR tv72[ebp]
  00029	d9 45 bc	 fld	 DWORD PTR tv72[ebp]

; 52   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_Q_rint	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT _VectorCompare
_TEXT	SEGMENT
tv86 = -76						; size = 8
_i$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_VectorCompare PROC					; COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 40   : 	int		i;
; 41   : 	
; 42   : 	for (i=0 ; i<3 ; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@VectorComp
$LN2@VectorComp:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@VectorComp:
  0001b	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0001f	7d 3c		 jge	 SHORT $LN3@VectorComp

; 43   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  00027	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _v2$[ebp]
  0002d	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00032	f3 0f 5c 04 96	 subss	 xmm0, DWORD PTR [esi+edx*4]
  00037	51		 push	 ecx
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?fabs@@YAMM@Z		; fabs
  00042	83 c4 04	 add	 esp, 4
  00045	dd 5d b4	 fstp	 QWORD PTR tv86[ebp]
  00048	f2 0f 10 45 b4	 movsd	 xmm0, QWORD PTR tv86[ebp]
  0004d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00055	76 04		 jbe	 SHORT $LN5@VectorComp

; 44   : 			return false;

  00057	33 c0		 xor	 eax, eax
  00059	eb 07		 jmp	 SHORT $LN1@VectorComp
$LN5@VectorComp:
  0005b	eb b5		 jmp	 SHORT $LN2@VectorComp
$LN3@VectorComp:

; 45   : 			
; 46   : 	return true;

  0005d	b8 01 00 00 00	 mov	 eax, 1
$LN1@VectorComp:

; 47   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_VectorCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 242  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 243  :     return _CSTD sqrtf(_Xx);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 244  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 234  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  :     return _CSTD sinf(_Xx);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 236  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\cmath
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 98   : _NODISCARD _Check_return_ inline float fabs(_In_ float _Xx) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 99   :     return _CSTD fabsf(_Xx);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 100  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 70   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 71   :     return _CSTD cosf(_Xx);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 72   : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\cmath
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 30   : _NODISCARD _Check_return_ inline float acos(_In_ float _Xx) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 31   :     return _CSTD acosf(_Xx);

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 32   : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\zzzmathlib.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
