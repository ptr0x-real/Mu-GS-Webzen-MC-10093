; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
PUBLIC	?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
PUBLIC	?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z	; std::_Narrow_char_traits<char,int>::not_eof
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	?_Load_barrier@std@@YAXW4memory_order@1@@Z	; std::_Load_barrier
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??0error_category@std@@IAE@I@Z			; std::error_category::error_category
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NABVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UAE@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category2@std@@QAE@XZ	; std::_Iostream_error_category2::_Iostream_error_category2
PUBLIC	?name@_Iostream_error_category2@std@@UBEPBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??1_Iostream_error_category2@std@@UAE@XZ	; std::_Iostream_error_category2::~_Iostream_error_category2
PUBLIC	??_G_Iostream_error_category2@std@@UAEPAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??0codecvt_base@std@@QAE@I@Z			; std::codecvt_base::codecvt_base
PUBLIC	?always_noconv@codecvt_base@std@@QBE_NXZ	; std::codecvt_base::always_noconv
PUBLIC	??1codecvt_base@std@@UAE@XZ			; std::codecvt_base::~codecvt_base
PUBLIC	?do_always_noconv@codecvt_base@std@@MBE_NXZ	; std::codecvt_base::do_always_noconv
PUBLIC	?do_max_length@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_max_length
PUBLIC	?do_encoding@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_encoding
PUBLIC	??_Gcodecvt_base@std@@UAEPAXI@Z			; std::codecvt_base::`scalar deleting destructor'
PUBLIC	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z	; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?is@?$ctype@D@std@@QBE_NFD@Z			; std::ctype<char>::is
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z ; std::_Adl_verify_range<char *,char const *>
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?eof@ios_base@std@@QBE_NXZ			; std::ios_base::eof
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	??0Record@CIniFile@@QAE@XZ			; CIniFile::Record::Record
PUBLIC	??1Record@CIniFile@@QAE@XZ			; CIniFile::Record::~Record
PUBLIC	??0Record@CIniFile@@QAE@ABU01@@Z		; CIniFile::Record::Record
PUBLIC	??0Record@CIniFile@@QAE@$$QAU01@@Z		; CIniFile::Record::Record
PUBLIC	??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z		; CIniFile::Record::operator=
PUBLIC	??_GRecord@CIniFile@@QAEPAXI@Z			; CIniFile::Record::`scalar deleting destructor'
PUBLIC	??0CIniFile@@QAE@XZ				; CIniFile::CIniFile
PUBLIC	??1CIniFile@@UAE@XZ				; CIniFile::~CIniFile
PUBLIC	?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::AddSection
PUBLIC	?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ; CIniFile::CommentRecord
PUBLIC	?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::CommentSection
PUBLIC	?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; CIniFile::Content
PUBLIC	?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIniFile::Create
PUBLIC	?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::DeleteRecord
PUBLIC	?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::DeleteSection
PUBLIC	?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z ; CIniFile::GetRecord
PUBLIC	?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z ; CIniFile::GetSection
PUBLIC	?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CIniFile::GetSectionNames
PUBLIC	?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z ; CIniFile::GetValue
PUBLIC	?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::RecordExists
PUBLIC	?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::RenameSection
PUBLIC	?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::SectionExists
PUBLIC	?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z ; CIniFile::SetRecordComments
PUBLIC	?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::SetSectionComments
PUBLIC	?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z ; CIniFile::SetValue
PUBLIC	?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CIniFile::Sort
PUBLIC	?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::UnCommentRecord
PUBLIC	?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::UnCommentSection
PUBLIC	?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CIniFile::GetSections
PUBLIC	?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
PUBLIC	?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
PUBLIC	??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIniFile::RecordSectionIs::RecordSectionIs
PUBLIC	??RRecordSectionIs@CIniFile@@QBE_NABURecord@1@@Z ; CIniFile::RecordSectionIs::operator()
PUBLIC	??1RecordSectionIs@CIniFile@@QAE@XZ		; CIniFile::RecordSectionIs::~RecordSectionIs
PUBLIC	??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
PUBLIC	??RRecordSectionKeyIs@CIniFile@@QBE_NABURecord@1@@Z ; CIniFile::RecordSectionKeyIs::operator()
PUBLIC	??1RecordSectionKeyIs@CIniFile@@QAE@XZ		; CIniFile::RecordSectionKeyIs::~RecordSectionKeyIs
PUBLIC	??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
PUBLIC	??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
PUBLIC	??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
PUBLIC	??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
PUBLIC	??_GCIniFile@@UAEPAXI@Z				; CIniFile::`scalar deleting destructor'
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	?store@?$_Atomic_storage@I$03@std@@QAEXI@Z	; std::_Atomic_storage<unsigned int,4>::store
PUBLIC	?store@?$_Atomic_storage@I$03@std@@QAEXIW4memory_order@2@@Z ; std::_Atomic_storage<unsigned int,4>::store
PUBLIC	?load@?$_Atomic_storage@I$03@std@@QBEIW4memory_order@2@@Z ; std::_Atomic_storage<unsigned int,4>::load
PUBLIC	??$addressof@$$CBV_Iostream_error_category2@std@@@std@@YAPBV_Iostream_error_category2@0@ABV10@@Z ; std::addressof<std::_Iostream_error_category2 const >
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$exchange@PAV_Facet_base@std@@PAV12@@std@@YAPAV_Facet_base@0@AAPAV10@$$QAPAV10@@Z ; std::exchange<std::_Facet_base *,std::_Facet_base *>
PUBLIC	??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
PUBLIC	??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z	; std::_Atomic_reinterpret_as<int,unsigned int>
PUBLIC	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z	; std::_Atomic_reinterpret_as<long,unsigned int>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z ; Trim
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
PUBLIC	?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
PUBLIC	?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$allocator@URecord@CIniFile@@@std@@QAE@XZ	; std::allocator<CIniFile::Record>::allocator<CIniFile::Record>
PUBLIC	?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::deallocate
PUBLIC	?allocate@?$allocator@URecord@CIniFile@@@std@@QAEPAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAIABV?$allocator@URecord@CIniFile@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::max_size
PUBLIC	??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
PUBLIC	?_Move_construct@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Move_construct
PUBLIC	??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
PUBLIC	??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
PUBLIC	?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
PUBLIC	?insert@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::insert
PUBLIC	?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::erase
PUBLIC	?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::clear
PUBLIC	?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
PUBLIC	?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
PUBLIC	?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::empty
PUBLIC	?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
PUBLIC	?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::max_size
PUBLIC	?capacity@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::capacity
PUBLIC	??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
PUBLIC	?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00U?$integral_constant@_N$00@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEII@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXQAURecord@CIniFile@@II@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Change_array
PUBLIC	?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Tidy
PUBLIC	?_Xlength@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@CAXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Orphan_range
PUBLIC	?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
PUBLIC	?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEABV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
PUBLIC	?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Make_iterator
PUBLIC	??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Vector_val<std::_Simple_types<CIniFile::Record> >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QBEABV?$allocator@URecord@CIniFile@@@2@XZ ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ofstream<char,std::char_traits<char> >::is_open
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
PUBLIC	?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
PUBLIC	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
PUBLIC	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEABURecord@CIniFile@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
PUBLIC	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPBURecord@CIniFile@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Verify_offset
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Compat
PUBLIC	?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEXPBURecord@CIniFile@@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Seek_to
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Unwrapped
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
PUBLIC	??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
PUBLIC	??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionIs>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingSectionSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingSectionSort>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingSectionSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingSectionSort>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingRecordSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingRecordSort>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingRecordSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingRecordSort>
PUBLIC	??$_Const_cast@$$CBURecord@CIniFile@@@std@@YA@PBURecord@CIniFile@@@Z ; std::_Const_cast<CIniFile::Record const >
PUBLIC	??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
PUBLIC	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
PUBLIC	??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
PUBLIC	??$_Move_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_unchecked<CIniFile::Record *,CIniFile::Record *>
PUBLIC	??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
PUBLIC	??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>
PUBLIC	??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace<CIniFile::Record const &>
PUBLIC	??$emplace_back@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace_back<CIniFile::Record const &>
PUBLIC	??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_back_with_unused_capacity<CIniFile::Record const &>
PUBLIC	??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>
PUBLIC	??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_reallocate<CIniFile::Record const &>
PUBLIC	??$move@AAV?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ; std::move<std::allocator<CIniFile::Record> &>
PUBLIC	??$?0V?$allocator@URecord@CIniFile@@@std@@$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URecord@CIniFile@@@1@@Z ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><std::allocator<CIniFile::Record> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><>
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::in
PUBLIC	?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::out
PUBLIC	?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::unshift
PUBLIC	??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
PUBLIC	?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,_Mbstatet>::_Getcat
PUBLIC	??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
PUBLIC	?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ; std::codecvt<char,char,_Mbstatet>::_Init
PUBLIC	?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ ; std::codecvt<char,char,_Mbstatet>::do_always_noconv
PUBLIC	?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_in
PUBLIC	?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_out
PUBLIC	?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_unshift
PUBLIC	?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ; std::codecvt<char,char,_Mbstatet>::do_length
PUBLIC	??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor'
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_ch@U?$char_traits@D@std@@@std@@YAIQBDIID@Z ; std::_Traits_find_ch<std::char_traits<char> >
PUBLIC	??$_Refancy@PAD$0A@@std@@YAPADPAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$_Unfancy@$$CBD@std@@YAPBDPBD@Z		; std::_Unfancy<char const >
PUBLIC	??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Destroy_range<std::allocator<CIniFile::Record> >
PUBLIC	??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
PUBLIC	??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$addressof@$$CBD@std@@YAPBDABD@Z		; std::addressof<char const >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
PUBLIC	??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > &>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
PUBLIC	??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::Record * &>
PUBLIC	??$_Pass_fn@UDescendingSectionSort@CIniFile@@$0A@@std@@YA?AUDescendingSectionSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::DescendingSectionSort,0>
PUBLIC	??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Pass_fn@UAscendingSectionSort@CIniFile@@$0A@@std@@YA?AUAscendingSectionSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::AscendingSectionSort,0>
PUBLIC	??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Pass_fn@UDescendingRecordSort@CIniFile@@$0A@@std@@YA?AUDescendingRecordSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::DescendingRecordSort,0>
PUBLIC	??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Pass_fn@UAscendingRecordSort@CIniFile@@$0A@@std@@YA?AUAscendingRecordSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::AscendingRecordSort,0>
PUBLIC	??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
PUBLIC	??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::~_Alloc_temporary<std::allocator<CIniFile::Record> >
PUBLIC	??$?0ABURecord@CIniFile@@@?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@AAV?$allocator@URecord@CIniFile@@@1@ABURecord@CIniFile@@@Z ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::_Alloc_temporary<std::allocator<CIniFile::Record> ><CIniFile::Record const &>
PUBLIC	??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z ; std::addressof<CIniFile::Record>
PUBLIC	??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record>
PUBLIC	??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
PUBLIC	??$forward@V?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ; std::forward<std::allocator<CIniFile::Record> >
PUBLIC	?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z	; std::_String_bitmap<char,1>::_Mark
PUBLIC	?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z	; std::_String_bitmap<char,1>::_Match
PUBLIC	??0?$_String_bitmap@D$00@std@@QAE@XZ		; std::_String_bitmap<char,1>::_String_bitmap<char,1>
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Uninitialized_move<CIniFile::Record *,std::allocator<CIniFile::Record> >
PUBLIC	??$_Get_size_of_n@$0GE@@std@@YAII@Z		; std::_Get_size_of_n<100>
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingSectionSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingSectionSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingRecordSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingRecordSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::forward<CIniFile::Record>
PUBLIC	??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * const &>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
PUBLIC	??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z ; std::_Get_unwrapped<CIniFile::Record * const &>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@PAURecord@CIniFile@@AAV?$allocator@URecord@CIniFile@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::~_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@XZ ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Release
PUBLIC	??$_Emplace_back@URecord@CIniFile@@@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEX$$QAURecord@CIniFile@@@Z ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Emplace_back<CIniFile::Record>
PUBLIC	??$_Refancy@PAURecord@CIniFile@@$0A@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Refancy<CIniFile::Record *,0>
PUBLIC	??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
PUBLIC	??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
PUBLIC	??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Next_iter<CIniFile::Record *>
PUBLIC	??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
PUBLIC	??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
PUBLIC	??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
PUBLIC	??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
PUBLIC	??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
PUBLIC	??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
PUBLIC	??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingSectionSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
PUBLIC	??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
PUBLIC	??$swap@URecord@CIniFile@@$0A@@std@@YAXAAURecord@CIniFile@@0@Z ; std::swap<CIniFile::Record,0>
PUBLIC	??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z ; std::forward<CIniFile::Record * &>
PUBLIC	??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
PUBLIC	??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingSectionSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
PUBLIC	??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
PUBLIC	??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
PUBLIC	??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingRecordSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
PUBLIC	??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
PUBLIC	??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
PUBLIC	??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingRecordSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
PUBLIC	??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
PUBLIC	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_7codecvt_base@std@@6B@			; std::codecvt_base::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_7CIniFile@@6B@				; CIniFile::`vftable'
PUBLIC	?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4codecvt_base@std@@6B@			; std::codecvt_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcodecvt_base@std@@@8			; std::codecvt_base `RTTI Type Descriptor'
PUBLIC	??_R3codecvt_base@std@@8			; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2codecvt_base@std@@8			; std::codecvt_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@codecvt_base@std@@8		; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_04DNCNJDPH@?5?7?6?$AN@			; `string'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_01LBDDMOBJ@?$FN@				; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL@				; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A	; std::codecvt<char,char,_Mbstatet>::id
PUBLIC	??_7?$codecvt@DDU_Mbstatet@@@std@@6B@		; std::codecvt<char,char,_Mbstatet>::`vftable'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CIniFile@@6B@				; CIniFile::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIniFile@@@8				; CIniFile `RTTI Type Descriptor'
PUBLIC	??_R3CIniFile@@8				; CIniFile::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIniFile@@8				; CIniFile::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIniFile@@8			; CIniFile::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@		; std::codecvt<char,char,_Mbstatet>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8	; std::codecvt<char,char,_Mbstatet> `RTTI Type Descriptor'
PUBLIC	??_R3?$codecvt@DDU_Mbstatet@@@std@@8		; std::codecvt<char,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$codecvt@DDU_Mbstatet@@@std@@8		; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8	; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memchr:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	__get_stream_buffer_pointers:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fgetc:PROC
EXTRN	_fgetpos:PROC
EXTRN	_fputc:PROC
EXTRN	_fread:PROC
EXTRN	_fsetpos:PROC
EXTRN	__fseeki64:PROC
EXTRN	_fwrite:PROC
EXTRN	_setvbuf:PROC
EXTRN	_ungetc:PROC
EXTRN	__lock_file:PROC
EXTRN	__unlock_file:PROC
EXTRN	_free:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ecodecvt_base@std@@UAEPAXI@Z:PROC		; std::codecvt_base::`vector deleting destructor'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	??_ECIniFile@@UAEPAXI@Z:PROC			; CIniFile::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z:PROC ; std::codecvt<char,char,_Mbstatet>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A DD 02H DUP (?) ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::codecvt<char,char,_Mbstatet>::id
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$codecvt@DDU_Mbstatet@@@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$codecvt@DDU_Mbstatet@@@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8 DD FLAT:??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8 ; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R2?$codecvt@DDU_Mbstatet@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8 ; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@codecvt_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R3?$codecvt@DDU_Mbstatet@@@std@@8 DD 00H		; std::codecvt<char,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8
data$r	SEGMENT
??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::codecvt<char,char,_Mbstatet> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$codecvt@DDU_Mbstatet@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@
rdata$r	SEGMENT
??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@ DD 00H		; std::codecvt<char,char,_Mbstatet>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8
	DD	FLAT:??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CIniFile@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIniFile@@8 DD FLAT:??_R0?AVCIniFile@@@8	; CIniFile::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIniFile@@8
rdata$r	ENDS
;	COMDAT ??_R2CIniFile@@8
rdata$r	SEGMENT
??_R2CIniFile@@8 DD FLAT:??_R1A@?0A@EA@CIniFile@@8	; CIniFile::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIniFile@@8
rdata$r	SEGMENT
??_R3CIniFile@@8 DD 00H					; CIniFile::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIniFile@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIniFile@@@8
data$r	SEGMENT
??_R0?AVCIniFile@@@8 DD FLAT:??_7type_info@@6B@		; CIniFile `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIniFile@@', 00H
data$r	ENDS
;	COMDAT ??_R4CIniFile@@6B@
rdata$r	SEGMENT
??_R4CIniFile@@6B@ DD 00H				; CIniFile::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIniFile@@@8
	DD	FLAT:??_R3CIniFile@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@
CONST	SEGMENT
??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ DD FLAT:??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@ ; std::codecvt<char,char,_Mbstatet>::`vftable'
	DD	FLAT:??_E?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
	DD	FLAT:?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_04DNCNJDPH@?5?7?6?$AN@
CONST	SEGMENT
??_C@_04DNCNJDPH@?5?7?6?$AN@ DB ' ', 09H, 0aH, 0dH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@codecvt_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@codecvt_base@std@@8 DD FLAT:??_R0?AVcodecvt_base@std@@@8 ; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2codecvt_base@std@@8
rdata$r	SEGMENT
??_R2codecvt_base@std@@8 DD FLAT:??_R1A@?0A@EA@codecvt_base@std@@8 ; std::codecvt_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3codecvt_base@std@@8
rdata$r	SEGMENT
??_R3codecvt_base@std@@8 DD 00H				; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
data$r	SEGMENT
??_R0?AVcodecvt_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::codecvt_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcodecvt_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4codecvt_base@std@@6B@
rdata$r	SEGMENT
??_R4codecvt_base@std@@6B@ DD 00H			; std::codecvt_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcodecvt_base@std@@@8
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD FLAT:??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 00H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category2@std@@@8
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7CIniFile@@6B@
CONST	SEGMENT
??_7CIniFile@@6B@ DD FLAT:??_R4CIniFile@@6B@		; CIniFile::`vftable'
	DD	FLAT:??_ECIniFile@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT
??_7codecvt_base@std@@6B@ DD FLAT:??_R4codecvt_base@std@@6B@ ; std::codecvt_base::`vftable'
	DD	FLAT:??_Ecodecvt_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DD FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DD	FLAT:??_E_Iostream_error_category2@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category2@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z$0
__ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z$0
__ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0
__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3
__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$0
__unwindtable$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z$0
__ehfuncinfo$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z$0
__ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z$0
__ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0
__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$3
__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$0
__tryblocktable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$3
__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
__ehfuncinfo$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$1
__ehfuncinfo$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2
__ehfuncinfo$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3
__ehfuncinfo$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$10
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$13
	DD	0aH
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$14
	DD	0bH
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$15
	DD	09H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$17
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$19
	DD	0eH
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$20
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$23
	DD	010H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$24
	DD	011H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$25
	DD	04H
	DD	FLAT:__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$27
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3
__ehfuncinfo$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3
__ehfuncinfo$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2
__ehfuncinfo$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$3
__ehfuncinfo$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3
__ehfuncinfo$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$3
__ehfuncinfo$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Record@CIniFile@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$2
__ehfuncinfo$??0Record@CIniFile@@QAE@ABU01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Record@CIniFile@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z PROC ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4004 :     // sort median of three elements to middle
; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	74 10		 je	 SHORT $LN2@Med3_unche

; 4006 :         _STD iter_swap(_Mid, _First);

  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0002d	83 c4 08	 add	 esp, 8
$LN2@Med3_unche:

; 4007 :     }
; 4008 : 
; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00037	51		 push	 ecx
  00038	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  00040	0f b6 d0	 movzx	 edx, al
  00043	85 d2		 test	 edx, edx
  00045	74 37		 je	 SHORT $LN1@Med3_unche

; 4010 :         _STD iter_swap(_Last, _Mid);

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00054	83 c4 08	 add	 esp, 8

; 4011 : 
; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00057	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0005e	51		 push	 ecx
  0005f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00062	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  00067	0f b6 d0	 movzx	 edx, al
  0006a	85 d2		 test	 edx, edx
  0006c	74 10		 je	 SHORT $LN1@Med3_unche

; 4013 :             _STD iter_swap(_Mid, _First);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0007b	83 c4 08	 add	 esp, 8
$LN1@Med3_unche:

; 4014 :         }
; 4015 :     }
; 4016 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ENDP ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingRecordSort@2@@Z PROC ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>, COMDAT

; 3382 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3383 :     // pop *_First to *_Dest and reheap, using _Pred
; 3384 :     // precondition: _First != _Last
; 3385 :     // precondition: _First != _Dest
; 3386 :     *_Dest      = _STD move(*_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00019	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3387 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  0001e	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00033	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00036	99		 cdq
  00037	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003c	f7 f9		 idiv	 ecx
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 3389 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingRecordSort@2@@Z ENDP ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z PROC ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>, COMDAT

; 3317 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3318 :     // percolate _Hole to _Top or where _Val belongs, using _Pred
; 3319 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	d1 f8		 sar	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
  00014	eb 0b		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00016	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00019	83 e8 01	 sub	 eax, 1
  0001c	d1 f8		 sar	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
$LN4@Push_heap_:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00021	8b 45 10	 mov	 eax, DWORD PTR __Top$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR __Hole$[ebp]
  00027	7d 40		 jge	 SHORT $LN3@Push_heap_
  00029	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0002c	50		 push	 eax
  0002d	6b 4d fc 64	 imul	 ecx, DWORD PTR __Idx$1[ebp], 100
  00031	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00034	51		 push	 ecx
  00035	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00038	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0003d	0f b6 d0	 movzx	 edx, al
  00040	85 d2		 test	 edx, edx
  00042	74 25		 je	 SHORT $LN3@Push_heap_

; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00044	6b 45 fc 64	 imul	 eax, DWORD PTR __Idx$1[ebp], 100
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00059	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0005c	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3325 :         _Hole             = _Idx;

  00061	8b 45 fc	 mov	 eax, DWORD PTR __Idx$1[ebp]
  00064	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3326 :     }

  00067	eb ad		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:

; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  00069	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  0007a	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3329 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ENDP ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z PROC ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4004 :     // sort median of three elements to middle
; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	74 10		 je	 SHORT $LN2@Med3_unche

; 4006 :         _STD iter_swap(_Mid, _First);

  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0002d	83 c4 08	 add	 esp, 8
$LN2@Med3_unche:

; 4007 :     }
; 4008 : 
; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00037	51		 push	 ecx
  00038	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  00040	0f b6 d0	 movzx	 edx, al
  00043	85 d2		 test	 edx, edx
  00045	74 37		 je	 SHORT $LN1@Med3_unche

; 4010 :         _STD iter_swap(_Last, _Mid);

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00054	83 c4 08	 add	 esp, 8

; 4011 : 
; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00057	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0005e	51		 push	 ecx
  0005f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00062	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  00067	0f b6 d0	 movzx	 edx, al
  0006a	85 d2		 test	 edx, edx
  0006c	74 10		 je	 SHORT $LN1@Med3_unche

; 4013 :             _STD iter_swap(_Mid, _First);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0007b	83 c4 08	 add	 esp, 8
$LN1@Med3_unche:

; 4014 :         }
; 4015 :     }
; 4016 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ENDP ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingRecordSort@2@@Z PROC ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>, COMDAT

; 3382 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3383 :     // pop *_First to *_Dest and reheap, using _Pred
; 3384 :     // precondition: _First != _Last
; 3385 :     // precondition: _First != _Dest
; 3386 :     *_Dest      = _STD move(*_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00019	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3387 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  0001e	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00033	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00036	99		 cdq
  00037	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003c	f7 f9		 idiv	 ecx
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 3389 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingRecordSort@2@@Z ENDP ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z PROC ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>, COMDAT

; 3317 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3318 :     // percolate _Hole to _Top or where _Val belongs, using _Pred
; 3319 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	d1 f8		 sar	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
  00014	eb 0b		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00016	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00019	83 e8 01	 sub	 eax, 1
  0001c	d1 f8		 sar	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
$LN4@Push_heap_:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00021	8b 45 10	 mov	 eax, DWORD PTR __Top$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR __Hole$[ebp]
  00027	7d 40		 jge	 SHORT $LN3@Push_heap_
  00029	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0002c	50		 push	 eax
  0002d	6b 4d fc 64	 imul	 ecx, DWORD PTR __Idx$1[ebp], 100
  00031	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00034	51		 push	 ecx
  00035	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00038	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0003d	0f b6 d0	 movzx	 edx, al
  00040	85 d2		 test	 edx, edx
  00042	74 25		 je	 SHORT $LN3@Push_heap_

; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00044	6b 45 fc 64	 imul	 eax, DWORD PTR __Idx$1[ebp], 100
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00059	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0005c	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3325 :         _Hole             = _Idx;

  00061	8b 45 fc	 mov	 eax, DWORD PTR __Idx$1[ebp]
  00064	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3326 :     }

  00067	eb ad		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:

; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  00069	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  0007a	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3329 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ENDP ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z PROC ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4004 :     // sort median of three elements to middle
; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	74 10		 je	 SHORT $LN2@Med3_unche

; 4006 :         _STD iter_swap(_Mid, _First);

  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0002d	83 c4 08	 add	 esp, 8
$LN2@Med3_unche:

; 4007 :     }
; 4008 : 
; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00037	51		 push	 ecx
  00038	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  00040	0f b6 d0	 movzx	 edx, al
  00043	85 d2		 test	 edx, edx
  00045	74 37		 je	 SHORT $LN1@Med3_unche

; 4010 :         _STD iter_swap(_Last, _Mid);

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00054	83 c4 08	 add	 esp, 8

; 4011 : 
; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00057	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0005e	51		 push	 ecx
  0005f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00062	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  00067	0f b6 d0	 movzx	 edx, al
  0006a	85 d2		 test	 edx, edx
  0006c	74 10		 je	 SHORT $LN1@Med3_unche

; 4013 :             _STD iter_swap(_Mid, _First);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0007b	83 c4 08	 add	 esp, 8
$LN1@Med3_unche:

; 4014 :         }
; 4015 :     }
; 4016 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ENDP ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingSectionSort@2@@Z PROC ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>, COMDAT

; 3382 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3383 :     // pop *_First to *_Dest and reheap, using _Pred
; 3384 :     // precondition: _First != _Last
; 3385 :     // precondition: _First != _Dest
; 3386 :     *_Dest      = _STD move(*_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00019	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3387 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  0001e	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00033	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00036	99		 cdq
  00037	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003c	f7 f9		 idiv	 ecx
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 3389 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingSectionSort@2@@Z ENDP ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z PROC ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>, COMDAT

; 3317 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3318 :     // percolate _Hole to _Top or where _Val belongs, using _Pred
; 3319 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	d1 f8		 sar	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
  00014	eb 0b		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00016	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00019	83 e8 01	 sub	 eax, 1
  0001c	d1 f8		 sar	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
$LN4@Push_heap_:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00021	8b 45 10	 mov	 eax, DWORD PTR __Top$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR __Hole$[ebp]
  00027	7d 40		 jge	 SHORT $LN3@Push_heap_
  00029	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0002c	50		 push	 eax
  0002d	6b 4d fc 64	 imul	 ecx, DWORD PTR __Idx$1[ebp], 100
  00031	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00034	51		 push	 ecx
  00035	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00038	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0003d	0f b6 d0	 movzx	 edx, al
  00040	85 d2		 test	 edx, edx
  00042	74 25		 je	 SHORT $LN3@Push_heap_

; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00044	6b 45 fc 64	 imul	 eax, DWORD PTR __Idx$1[ebp], 100
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00059	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0005c	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3325 :         _Hole             = _Idx;

  00061	8b 45 fc	 mov	 eax, DWORD PTR __Idx$1[ebp]
  00064	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3326 :     }

  00067	eb ad		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:

; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  00069	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  0007a	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3329 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ENDP ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z PROC ; std::forward<CIniFile::Record * &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z ENDP ; std::forward<CIniFile::Record * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$swap@URecord@CIniFile@@$0A@@std@@YAXAAURecord@CIniFile@@0@Z
_TEXT	SEGMENT
__Tmp$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@URecord@CIniFile@@$0A@@std@@YAXAAURecord@CIniFile@@0@Z PROC ; std::swap<CIniFile::Record,0>, COMDAT

; 105  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 106  :     _Ty _Tmp = _STD move(_Left);

  00016	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0001f	83 c4 04	 add	 esp, 4
  00022	50		 push	 eax
  00023	8d 4d 98	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00026	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z

; 107  :     _Left    = _STD move(_Right);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00034	83 c4 04	 add	 esp, 4
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 108  :     _Right   = _STD move(_Tmp);

  00040	8d 45 98	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00050	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 109  : }

  00055	8d 4d 98	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00058	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	33 cd		 xor	 ecx, ebp
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??$swap@URecord@CIniFile@@$0A@@std@@YAXAAURecord@CIniFile@@0@Z ENDP ; std::swap<CIniFile::Record,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z PROC ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 4003 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4004 :     // sort median of three elements to middle
; 4005 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	74 10		 je	 SHORT $LN2@Med3_unche

; 4006 :         _STD iter_swap(_Mid, _First);

  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0002d	83 c4 08	 add	 esp, 8
$LN2@Med3_unche:

; 4007 :     }
; 4008 : 
; 4009 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00037	51		 push	 ecx
  00038	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  00040	0f b6 d0	 movzx	 edx, al
  00043	85 d2		 test	 edx, edx
  00045	74 37		 je	 SHORT $LN1@Med3_unche

; 4010 :         _STD iter_swap(_Last, _Mid);

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00054	83 c4 08	 add	 esp, 8

; 4011 : 
; 4012 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00057	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0005e	51		 push	 ecx
  0005f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00062	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  00067	0f b6 d0	 movzx	 edx, al
  0006a	85 d2		 test	 edx, edx
  0006c	74 10		 je	 SHORT $LN1@Med3_unche

; 4013 :             _STD iter_swap(_Mid, _First);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0007b	83 c4 08	 add	 esp, 8
$LN1@Med3_unche:

; 4014 :         }
; 4015 :     }
; 4016 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ENDP ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingSectionSort@2@@Z PROC ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>, COMDAT

; 3382 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3383 :     // pop *_First to *_Dest and reheap, using _Pred
; 3384 :     // precondition: _First != _Last
; 3385 :     // precondition: _First != _Dest
; 3386 :     *_Dest      = _STD move(*_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00019	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3387 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3388 :     _Pop_heap_hole_by_index(_First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD move(_Val), _Pred);

  0001e	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00033	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00036	99		 cdq
  00037	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003c	f7 f9		 idiv	 ecx
  0003e	50		 push	 eax
  0003f	6a 00		 push	 0
  00041	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 3389 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingSectionSort@2@@Z ENDP ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Idx$1 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z PROC ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>, COMDAT

; 3317 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3318 :     // percolate _Hole to _Top or where _Val belongs, using _Pred
; 3319 :     using _Diff = _Iter_diff_t<_RanIt>;
; 3320 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	d1 f8		 sar	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
  00014	eb 0b		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 3322 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00016	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00019	83 e8 01	 sub	 eax, 1
  0001c	d1 f8		 sar	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR __Idx$1[ebp], eax
$LN4@Push_heap_:

; 3321 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00021	8b 45 10	 mov	 eax, DWORD PTR __Top$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR __Hole$[ebp]
  00027	7d 40		 jge	 SHORT $LN3@Push_heap_
  00029	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0002c	50		 push	 eax
  0002d	6b 4d fc 64	 imul	 ecx, DWORD PTR __Idx$1[ebp], 100
  00031	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00034	51		 push	 ecx
  00035	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00038	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0003d	0f b6 d0	 movzx	 edx, al
  00040	85 d2		 test	 edx, edx
  00042	74 25		 je	 SHORT $LN3@Push_heap_

; 3323 :         // move _Hole up to parent
; 3324 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00044	6b 45 fc 64	 imul	 eax, DWORD PTR __Idx$1[ebp], 100
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00059	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0005c	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3325 :         _Hole             = _Idx;

  00061	8b 45 fc	 mov	 eax, DWORD PTR __Idx$1[ebp]
  00064	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3326 :     }

  00067	eb ad		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:

; 3327 : 
; 3328 :     *(_First + _Hole) = _STD move(_Val); // drop _Val into final hole

  00069	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  0007a	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3329 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ENDP ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 693  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 18		 push	 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 695  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Step$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z PROC ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 4019 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4020 :     // sort median element to middle
; 4021 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 4022 :     const _Diff _Count = _Last - _First;

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 4023 :     if (40 < _Count) { // Tukey's ninther

  0001a	83 7d fc 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  0001e	0f 8e a2 00 00
	00		 jle	 $LN2@Guess_medi

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00024	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	89 45 f8	 mov	 DWORD PTR __Step$2[ebp], eax

; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Step$2[ebp]
  00033	d1 e0		 shl	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00038	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003c	50		 push	 eax
  0003d	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00041	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00044	51		 push	 ecx
  00045	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00049	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00059	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0005d	50		 push	 eax
  0005e	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  00062	03 4d 0c	 add	 ecx, DWORD PTR __Mid$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00069	52		 push	 edx
  0006a	6b 45 f8 64	 imul	 eax, DWORD PTR __Step$2[ebp], 100
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0007c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	51		 push	 ecx
  00085	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00089	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0008c	2b c2		 sub	 eax, edx
  0008e	50		 push	 eax
  0008f	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00093	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00096	2b d1		 sub	 edx, ecx
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 4029 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a1	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000a5	50		 push	 eax
  000a6	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000aa	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000ad	2b d1		 sub	 edx, ecx
  000af	52		 push	 edx
  000b0	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000b3	50		 push	 eax
  000b4	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000b8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  000c1	83 c4 10	 add	 esp, 16			; 00000010H

; 4030 :     } else {

  000c4	eb 19		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 4031 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000c6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  000d2	52		 push	 edx
  000d3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 4032 :     }
; 4033 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ENDP ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z PROC ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 3392 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3393 :     // pop *_First to *(_Last - 1) and reheap, using _Pred
; 3394 :     if (2 <= _Last - _First) {

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	7c 5a		 jl	 SHORT $LN1@Pop_heap_u

; 3395 :         --_Last;

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00044	83 e8 64	 sub	 eax, 100		; 00000064H
  00047	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax

; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3397 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);

  00066	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0007b	52		 push	 edx
  0007c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingRecordSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 3398 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00096	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
$LN1@Pop_heap_u:

; 3399 : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ENDP ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$ = -12				; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z PROC ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __Top$[ebp], eax

; 3359 :     _Diff _Idx       = _Hole;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00015	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	d1 f8		 sar	 eax, 1
  0001d	89 45 f4	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00023	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00026	7d 5c		 jge	 SHORT $LN3@Pop_heap_h

; 3365 :         _Idx = 2 * _Idx + 2;

  00028	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0002b	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0002f	89 4d f8	 mov	 DWORD PTR __Idx$[ebp], ecx

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	6b c8 64	 imul	 ecx, eax, 100
  0003b	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0003e	51		 push	 ecx
  0003f	6b 55 f8 64	 imul	 edx, DWORD PTR __Idx$[ebp], 100
  00043	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  00046	52		 push	 edx
  00047	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0004a	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN4@Pop_heap_h

; 3367 :             --_Idx;

  00056	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0005f	6b 45 f8 64	 imul	 eax, DWORD PTR __Idx$[ebp], 100
  00063	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00074	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00077	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3370 :         _Hole             = _Idx;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0007f	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3371 :     }

  00082	eb 9c		 jmp	 SHORT $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00084	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00087	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  0008a	75 3e		 jne	 SHORT $LN5@Pop_heap_h
  0008c	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0008f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00094	79 05		 jns	 SHORT $LN7@Pop_heap_h
  00096	48		 dec	 eax
  00097	83 c8 fe	 or	 eax, -2			; fffffffeH
  0009a	40		 inc	 eax
$LN7@Pop_heap_h:
  0009b	85 c0		 test	 eax, eax
  0009d	75 2b		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0009f	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	6b c8 64	 imul	 ecx, eax, 100
  000a8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b1	83 c4 04	 add	 esp, 4
  000b4	50		 push	 eax
  000b5	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  000b9	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bc	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3375 :         _Hole             = _Bottom - 1;

  000c1	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c4	83 e8 01	 sub	 eax, 1
  000c7	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);

  000ca	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000d8	83 c4 04	 add	 esp, 4
  000db	50		 push	 eax
  000dc	8b 55 fc	 mov	 edx, DWORD PTR __Top$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
  000ed	83 c4 14	 add	 esp, 20			; 00000014H

; 3379 : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Step$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z PROC ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 4019 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4020 :     // sort median element to middle
; 4021 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 4022 :     const _Diff _Count = _Last - _First;

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 4023 :     if (40 < _Count) { // Tukey's ninther

  0001a	83 7d fc 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  0001e	0f 8e a2 00 00
	00		 jle	 $LN2@Guess_medi

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00024	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	89 45 f8	 mov	 DWORD PTR __Step$2[ebp], eax

; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Step$2[ebp]
  00033	d1 e0		 shl	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00038	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003c	50		 push	 eax
  0003d	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00041	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00044	51		 push	 ecx
  00045	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00049	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00059	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0005d	50		 push	 eax
  0005e	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  00062	03 4d 0c	 add	 ecx, DWORD PTR __Mid$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00069	52		 push	 edx
  0006a	6b 45 f8 64	 imul	 eax, DWORD PTR __Step$2[ebp], 100
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0007c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	51		 push	 ecx
  00085	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00089	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0008c	2b c2		 sub	 eax, edx
  0008e	50		 push	 eax
  0008f	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00093	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00096	2b d1		 sub	 edx, ecx
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 4029 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a1	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000a5	50		 push	 eax
  000a6	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000aa	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000ad	2b d1		 sub	 edx, ecx
  000af	52		 push	 edx
  000b0	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000b3	50		 push	 eax
  000b4	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000b8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  000c1	83 c4 10	 add	 esp, 16			; 00000010H

; 4030 :     } else {

  000c4	eb 19		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 4031 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000c6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  000d2	52		 push	 edx
  000d3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 4032 :     }
; 4033 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ENDP ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z PROC ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 3392 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3393 :     // pop *_First to *(_Last - 1) and reheap, using _Pred
; 3394 :     if (2 <= _Last - _First) {

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	7c 5a		 jl	 SHORT $LN1@Pop_heap_u

; 3395 :         --_Last;

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00044	83 e8 64	 sub	 eax, 100		; 00000064H
  00047	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax

; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3397 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);

  00066	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0007b	52		 push	 edx
  0007c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingRecordSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 3398 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00096	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
$LN1@Pop_heap_u:

; 3399 : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ENDP ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$ = -12				; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z PROC ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __Top$[ebp], eax

; 3359 :     _Diff _Idx       = _Hole;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00015	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	d1 f8		 sar	 eax, 1
  0001d	89 45 f4	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00023	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00026	7d 5c		 jge	 SHORT $LN3@Pop_heap_h

; 3365 :         _Idx = 2 * _Idx + 2;

  00028	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0002b	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0002f	89 4d f8	 mov	 DWORD PTR __Idx$[ebp], ecx

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	6b c8 64	 imul	 ecx, eax, 100
  0003b	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0003e	51		 push	 ecx
  0003f	6b 55 f8 64	 imul	 edx, DWORD PTR __Idx$[ebp], 100
  00043	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  00046	52		 push	 edx
  00047	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0004a	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN4@Pop_heap_h

; 3367 :             --_Idx;

  00056	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0005f	6b 45 f8 64	 imul	 eax, DWORD PTR __Idx$[ebp], 100
  00063	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00074	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00077	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3370 :         _Hole             = _Idx;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0007f	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3371 :     }

  00082	eb 9c		 jmp	 SHORT $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00084	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00087	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  0008a	75 3e		 jne	 SHORT $LN5@Pop_heap_h
  0008c	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0008f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00094	79 05		 jns	 SHORT $LN7@Pop_heap_h
  00096	48		 dec	 eax
  00097	83 c8 fe	 or	 eax, -2			; fffffffeH
  0009a	40		 inc	 eax
$LN7@Pop_heap_h:
  0009b	85 c0		 test	 eax, eax
  0009d	75 2b		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0009f	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	6b c8 64	 imul	 ecx, eax, 100
  000a8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b1	83 c4 04	 add	 esp, 4
  000b4	50		 push	 eax
  000b5	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  000b9	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bc	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3375 :         _Hole             = _Bottom - 1;

  000c1	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c4	83 e8 01	 sub	 eax, 1
  000c7	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);

  000ca	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000d8	83 c4 04	 add	 esp, 4
  000db	50		 push	 eax
  000dc	8b 55 fc	 mov	 edx, DWORD PTR __Top$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
  000ed	83 c4 14	 add	 esp, 20			; 00000014H

; 3379 : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Step$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z PROC ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 4019 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4020 :     // sort median element to middle
; 4021 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 4022 :     const _Diff _Count = _Last - _First;

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 4023 :     if (40 < _Count) { // Tukey's ninther

  0001a	83 7d fc 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  0001e	0f 8e a2 00 00
	00		 jle	 $LN2@Guess_medi

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00024	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	89 45 f8	 mov	 DWORD PTR __Step$2[ebp], eax

; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Step$2[ebp]
  00033	d1 e0		 shl	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00038	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003c	50		 push	 eax
  0003d	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00041	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00044	51		 push	 ecx
  00045	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00049	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00059	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0005d	50		 push	 eax
  0005e	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  00062	03 4d 0c	 add	 ecx, DWORD PTR __Mid$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00069	52		 push	 edx
  0006a	6b 45 f8 64	 imul	 eax, DWORD PTR __Step$2[ebp], 100
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0007c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	51		 push	 ecx
  00085	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00089	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0008c	2b c2		 sub	 eax, edx
  0008e	50		 push	 eax
  0008f	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00093	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00096	2b d1		 sub	 edx, ecx
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 4029 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a1	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000a5	50		 push	 eax
  000a6	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000aa	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000ad	2b d1		 sub	 edx, ecx
  000af	52		 push	 edx
  000b0	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000b3	50		 push	 eax
  000b4	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000b8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  000c1	83 c4 10	 add	 esp, 16			; 00000010H

; 4030 :     } else {

  000c4	eb 19		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 4031 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000c6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  000d2	52		 push	 edx
  000d3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 4032 :     }
; 4033 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ENDP ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z PROC ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 3392 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3393 :     // pop *_First to *(_Last - 1) and reheap, using _Pred
; 3394 :     if (2 <= _Last - _First) {

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	7c 5a		 jl	 SHORT $LN1@Pop_heap_u

; 3395 :         --_Last;

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00044	83 e8 64	 sub	 eax, 100		; 00000064H
  00047	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax

; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3397 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);

  00066	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0007b	52		 push	 edx
  0007c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UAscendingSectionSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 3398 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00096	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
$LN1@Pop_heap_u:

; 3399 : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ENDP ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$ = -12				; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z PROC ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __Top$[ebp], eax

; 3359 :     _Diff _Idx       = _Hole;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00015	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	d1 f8		 sar	 eax, 1
  0001d	89 45 f4	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00023	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00026	7d 5c		 jge	 SHORT $LN3@Pop_heap_h

; 3365 :         _Idx = 2 * _Idx + 2;

  00028	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0002b	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0002f	89 4d f8	 mov	 DWORD PTR __Idx$[ebp], ecx

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	6b c8 64	 imul	 ecx, eax, 100
  0003b	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0003e	51		 push	 ecx
  0003f	6b 55 f8 64	 imul	 edx, DWORD PTR __Idx$[ebp], 100
  00043	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  00046	52		 push	 edx
  00047	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0004a	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN4@Pop_heap_h

; 3367 :             --_Idx;

  00056	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0005f	6b 45 f8 64	 imul	 eax, DWORD PTR __Idx$[ebp], 100
  00063	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00074	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00077	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3370 :         _Hole             = _Idx;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0007f	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3371 :     }

  00082	eb 9c		 jmp	 SHORT $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00084	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00087	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  0008a	75 3e		 jne	 SHORT $LN5@Pop_heap_h
  0008c	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0008f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00094	79 05		 jns	 SHORT $LN7@Pop_heap_h
  00096	48		 dec	 eax
  00097	83 c8 fe	 or	 eax, -2			; fffffffeH
  0009a	40		 inc	 eax
$LN7@Pop_heap_h:
  0009b	85 c0		 test	 eax, eax
  0009d	75 2b		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0009f	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	6b c8 64	 imul	 ecx, eax, 100
  000a8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b1	83 c4 04	 add	 esp, 4
  000b4	50		 push	 eax
  000b5	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  000b9	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bc	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3375 :         _Hole             = _Bottom - 1;

  000c1	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c4	83 e8 01	 sub	 eax, 1
  000c7	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);

  000ca	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000d8	83 c4 04	 add	 esp, 4
  000db	50		 push	 eax
  000dc	8b 55 fc	 mov	 edx, DWORD PTR __Top$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
  000ed	83 c4 14	 add	 esp, 20			; 00000014H

; 3379 : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z PROC ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>, COMDAT
; _this$ = ecx

; 192  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z ; std::forward<CIniFile::Record * &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$forward@AAPAURecord@CIniFile@@@std@@YAAAPAURecord@CIniFile@@AAPAU12@@Z ; std::forward<CIniFile::Record * &>
  00028	83 c4 04	 add	 esp, 4
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ENDP ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z PROC ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>, COMDAT

; 82   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 83   :     swap(*_Left, *_Right);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$swap@URecord@CIniFile@@$0A@@std@@YAXAAURecord@CIniFile@@0@Z ; std::swap<CIniFile::Record,0>
  00016	83 c4 08	 add	 esp, 8

; 84   : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ENDP ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z PROC ; std::_Next_iter<CIniFile::Record *>, COMDAT

; 1766 : constexpr _InIt _Next_iter(_InIt _First) { // increment iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1767 :     return ++_First;

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	83 c0 64	 add	 eax, 100		; 00000064H
  0000f	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
  00012	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 1768 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ENDP ; std::_Next_iter<CIniFile::Record *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Step$2 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z PROC ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 4019 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4020 :     // sort median element to middle
; 4021 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 4022 :     const _Diff _Count = _Last - _First;

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 4023 :     if (40 < _Count) { // Tukey's ninther

  0001a	83 7d fc 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  0001e	0f 8e a2 00 00
	00		 jle	 $LN2@Guess_medi

; 4024 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00024	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	89 45 f8	 mov	 DWORD PTR __Step$2[ebp], eax

; 4025 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Step$2[ebp]
  00033	d1 e0		 shl	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 4026 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00038	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003c	50		 push	 eax
  0003d	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00041	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00044	51		 push	 ecx
  00045	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00049	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 4027 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00059	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0005d	50		 push	 eax
  0005e	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  00062	03 4d 0c	 add	 ecx, DWORD PTR __Mid$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00069	52		 push	 edx
  0006a	6b 45 f8 64	 imul	 eax, DWORD PTR __Step$2[ebp], 100
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 4028 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0007c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	51		 push	 ecx
  00085	6b 55 f8 64	 imul	 edx, DWORD PTR __Step$2[ebp], 100
  00089	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0008c	2b c2		 sub	 eax, edx
  0008e	50		 push	 eax
  0008f	6b 4d f4 64	 imul	 ecx, DWORD PTR __Two_step$1[ebp], 100
  00093	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00096	2b d1		 sub	 edx, ecx
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H

; 4029 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a1	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000a5	50		 push	 eax
  000a6	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000aa	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000ad	2b d1		 sub	 edx, ecx
  000af	52		 push	 edx
  000b0	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000b3	50		 push	 eax
  000b4	6b 4d f8 64	 imul	 ecx, DWORD PTR __Step$2[ebp], 100
  000b8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  000c1	83 c4 10	 add	 esp, 16			; 00000010H

; 4030 :     } else {

  000c4	eb 19		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 4031 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000c6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  000d2	52		 push	 edx
  000d3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Med3_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 4032 :     }
; 4033 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ENDP ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z PROC ; std::_Prev_iter<CIniFile::Record *>, COMDAT

; 1781 : constexpr _BidIt _Prev_iter(_BidIt _First) { // decrement iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :     return --_First;

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	83 e8 64	 sub	 eax, 100		; 00000064H
  0000f	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
  00012	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 1783 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ENDP ; std::_Prev_iter<CIniFile::Record *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z PROC ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 3392 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3393 :     // pop *_First to *(_Last - 1) and reheap, using _Pred
; 3394 :     if (2 <= _Last - _First) {

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	7c 5a		 jl	 SHORT $LN1@Pop_heap_u

; 3395 :         --_Last;

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00044	83 e8 64	 sub	 eax, 100		; 00000064H
  00047	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax

; 3396 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3397 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);

  00066	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0007b	52		 push	 edx
  0007c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_unchecked@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00$$QAU12@UDescendingSectionSort@2@@Z ; std::_Pop_heap_hole_unchecked<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 3398 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00096	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
$LN1@Pop_heap_u:

; 3399 : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ENDP ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$ = -12				; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z PROC ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>, COMDAT

; 3354 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3355 :     // percolate _Hole to _Bottom, then push _Val, using _Pred
; 3356 :     _STL_INTERNAL_CHECK(_Bottom != 0);
; 3357 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 3358 :     const _Diff _Top = _Hole;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __Top$[ebp], eax

; 3359 :     _Diff _Idx       = _Hole;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 3360 : 
; 3361 :     // Check whether _Idx can have a child before calculating that child's index, since
; 3362 :     // calculating the child's index can trigger integer overflows
; 3363 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00015	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	d1 f8		 sar	 eax, 1
  0001d	89 45 f4	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 3364 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00023	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00026	7d 5c		 jge	 SHORT $LN3@Pop_heap_h

; 3365 :         _Idx = 2 * _Idx + 2;

  00028	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0002b	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0002f	89 4d f8	 mov	 DWORD PTR __Idx$[ebp], ecx

; 3366 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	6b c8 64	 imul	 ecx, eax, 100
  0003b	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0003e	51		 push	 ecx
  0003f	6b 55 f8 64	 imul	 edx, DWORD PTR __Idx$[ebp], 100
  00043	03 55 08	 add	 edx, DWORD PTR __First$[ebp]
  00046	52		 push	 edx
  00047	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0004a	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN4@Pop_heap_h

; 3367 :             --_Idx;

  00056	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 3368 :         }
; 3369 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0005f	6b 45 f8 64	 imul	 eax, DWORD PTR __Idx$[ebp], 100
  00063	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  00074	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00077	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3370 :         _Hole             = _Idx;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0007f	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 3371 :     }

  00082	eb 9c		 jmp	 SHORT $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 3372 : 
; 3373 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00084	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00087	3b 45 f4	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  0008a	75 3e		 jne	 SHORT $LN5@Pop_heap_h
  0008c	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0008f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00094	79 05		 jns	 SHORT $LN7@Pop_heap_h
  00096	48		 dec	 eax
  00097	83 c8 fe	 or	 eax, -2			; fffffffeH
  0009a	40		 inc	 eax
$LN7@Pop_heap_h:
  0009b	85 c0		 test	 eax, eax
  0009d	75 2b		 jne	 SHORT $LN5@Pop_heap_h

; 3374 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0009f	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	6b c8 64	 imul	 ecx, eax, 100
  000a8	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b1	83 c4 04	 add	 esp, 4
  000b4	50		 push	 eax
  000b5	6b 4d 0c 64	 imul	 ecx, DWORD PTR __Hole$[ebp], 100
  000b9	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000bc	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3375 :         _Hole             = _Bottom - 1;

  000c1	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c4	83 e8 01	 sub	 eax, 1
  000c7	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:

; 3376 :     }
; 3377 : 
; 3378 :     _Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);

  000ca	0f b6 45 18	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000d8	83 c4 04	 add	 esp, 4
  000db	50		 push	 eax
  000dc	8b 55 fc	 mov	 edx, DWORD PTR __Top$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ; std::_Push_heap_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
  000ed	83 c4 14	 add	 esp, 20			; 00000014H

; 3379 : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAURecord@CIniFile@@$0A@@std@@YAPAURecord@CIniFile@@PAU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAURecord@CIniFile@@$0A@@std@@YAPAURecord@CIniFile@@PAU12@@Z PROC ; std::_Refancy<CIniFile::Record *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Refancy@PAURecord@CIniFile@@$0A@@std@@YAPAURecord@CIniFile@@PAU12@@Z ENDP ; std::_Refancy<CIniFile::Record *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Emplace_back@URecord@CIniFile@@@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEX$$QAURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@URecord@CIniFile@@@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEX$$QAURecord@CIniFile@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Emplace_back<CIniFile::Record>, COMDAT
; _this$ = ecx

; 1507 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1508 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::forward<CIniFile::Record>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record>
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1509 :         ++_Last;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	83 c1 64	 add	 ecx, 100		; 00000064H
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1510 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??$_Emplace_back@URecord@CIniFile@@@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEX$$QAURecord@CIniFile@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Emplace_back<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Release, COMDAT
; _this$ = ecx

; 1512 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1513 :         _First = _Last;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 1514 :         return _Last;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1515 :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::~_Uninitialized_backout_al<std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 1502 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00012	51		 push	 ecx
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Destroy_range<std::allocator<CIniFile::Record> >
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1504 :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::~_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@PAURecord@CIniFile@@AAV?$allocator@URecord@CIniFile@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@PAURecord@CIniFile@@AAV?$allocator@URecord@CIniFile@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00023	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@PAURecord@CIniFile@@AAV?$allocator@URecord@CIniFile@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z PROC ; std::_Get_unwrapped<CIniFile::Record * const &>, COMDAT

; 1229 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1230 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1231 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1232 :         return _It + 0;

  00009	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 1233 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1234 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1235 :     } else {
; 1236 :         return static_cast<_Iter&&>(_It);
; 1237 :     }
; 1238 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z ENDP ; std::_Get_unwrapped<CIniFile::Record * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1507 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1508 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1509 :         ++_Last;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	83 c1 18	 add	 ecx, 24			; 00000018H
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1510 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release, COMDAT
; _this$ = ecx

; 1512 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1513 :         _First = _Last;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 1514 :         return _Last;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1515 :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1502 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1503 :         _Destroy_range(_First, _Last, _Al);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00012	51		 push	 ecx
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1504 :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1497 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00023	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * const &>, COMDAT

; 1229 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1230 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1231 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1232 :         return _It + 0;

  00009	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 1233 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1234 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1235 :     } else {
; 1236 :         return static_cast<_Iter&&>(_It);
; 1237 :     }
; 1238 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z PROC ; std::forward<CIniFile::Record>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ENDP ; std::forward<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingRecordSort@3@@Z
_TEXT	SEGMENT
__Glast$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Plast$ = -12						; size = 4
__Pfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingRecordSort@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	d1 f8		 sar	 eax, 1
  00019	6b d0 64	 imul	 edx, eax, 100
  0001c	03 55 0c	 add	 edx, DWORD PTR __First$[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR __Mid$[ebp], edx

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00022	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  00030	83 c4 04	 add	 esp, 4
  00033	50		 push	 eax
  00034	8b 55 fc	 mov	 edx, DWORD PTR __Mid$[ebp]
  00037	52		 push	 edx
  00038	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingRecordSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 4040 :     _RanIt _Pfirst = _Mid;

  00044	8b 45 fc	 mov	 eax, DWORD PTR __Mid$[ebp]
  00047	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Next_iter<CIniFile::Record *>
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 4042 : 
; 4043 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00059	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0005c	3b 45 f8	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0005f	73 4b		 jae	 SHORT $LN4@Partition_
  00061	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00064	50		 push	 eax
  00065	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00075	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0007a	0f b6 d0	 movzx	 edx, al
  0007d	85 d2		 test	 edx, edx
  0007f	75 2b		 jne	 SHORT $LN4@Partition_
  00081	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0008a	83 c4 04	 add	 esp, 4
  0008d	50		 push	 eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00091	51		 push	 ecx
  00092	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00095	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0009a	0f b6 d0	 movzx	 edx, al
  0009d	85 d2		 test	 edx, edx
  0009f	75 0b		 jne	 SHORT $LN4@Partition_

; 4045 :         --_Pfirst;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000a4	83 e8 64	 sub	 eax, 100		; 00000064H
  000a7	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4046 :     }

  000aa	eb ad		 jmp	 SHORT $LN2@Partition_
$LN4@Partition_:

; 4047 : 
; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ac	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000af	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  000b2	73 39		 jae	 SHORT $LN5@Partition_
  000b4	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  000bb	51		 push	 ecx
  000bc	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000bf	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  000c4	0f b6 d0	 movzx	 edx, al
  000c7	85 d2		 test	 edx, edx
  000c9	75 22		 jne	 SHORT $LN5@Partition_
  000cb	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000d2	51		 push	 ecx
  000d3	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d6	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  000db	0f b6 d0	 movzx	 edx, al
  000de	85 d2		 test	 edx, edx
  000e0	75 0b		 jne	 SHORT $LN5@Partition_

; 4049 :         ++_Plast;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000e5	83 c0 64	 add	 eax, 100		; 00000064H
  000e8	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4050 :     }

  000eb	eb bf		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000f0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 4053 :     _RanIt _Glast  = _Pfirst;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000f6	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN8@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000f9	eb 09		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  000fb	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  000fe	83 c0 64	 add	 eax, 100		; 00000064H
  00101	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  00104	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00107	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0010a	73 62		 jae	 SHORT $LN10@Partition_

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  0010c	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00113	51		 push	 ecx
  00114	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00117	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0011c	0f b6 d0	 movzx	 edx, al
  0011f	85 d2		 test	 edx, edx
  00121	74 02		 je	 SHORT $LN15@Partition_
  00123	eb 47		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00125	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  0012c	51		 push	 ecx
  0012d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00130	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 04		 je	 SHORT $LN17@Partition_

; 4059 :                 break;

  0013c	eb 30		 jmp	 SHORT $LN10@Partition_
  0013e	eb 2c		 jmp	 SHORT $LN16@Partition_
$LN17@Partition_:

; 4060 :             } else if (_Plast != _Gfirst) {

  00140	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00143	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00146	74 1b		 je	 SHORT $LN19@Partition_

; 4061 :                 _STD iter_swap(_Plast, _Gfirst);

  00148	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00155	83 c4 08	 add	 esp, 8

; 4062 :                 ++_Plast;

  00158	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0015b	83 c0 64	 add	 eax, 100		; 00000064H
  0015e	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4063 :             } else {

  00161	eb 09		 jmp	 SHORT $LN16@Partition_
$LN19@Partition_:

; 4064 :                 ++_Plast;

  00163	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00166	83 c0 64	 add	 eax, 100		; 00000064H
  00169	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN16@Partition_:

; 4065 :             }
; 4066 :         }

  0016c	eb 8d		 jmp	 SHORT $LN9@Partition_
$LN10@Partition_:

; 4067 : 
; 4068 :         for (; _First < _Glast; --_Glast) {

  0016e	eb 09		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00170	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00173	83 e8 64	 sub	 eax, 100		; 00000064H
  00176	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  00179	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0017c	3b 45 ec	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0017f	73 7e		 jae	 SHORT $LN13@Partition_

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00181	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00184	50		 push	 eax
  00185	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0018e	83 c4 04	 add	 esp, 4
  00191	50		 push	 eax
  00192	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00195	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  0019a	0f b6 d0	 movzx	 edx, al
  0019d	85 d2		 test	 edx, edx
  0019f	74 02		 je	 SHORT $LN21@Partition_
  001a1	eb 57		 jmp	 SHORT $LN22@Partition_
$LN21@Partition_:

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  001a3	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ac	83 c4 04	 add	 esp, 4
  001af	50		 push	 eax
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001b3	51		 push	 ecx
  001b4	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  001b7	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  001bc	0f b6 d0	 movzx	 edx, al
  001bf	85 d2		 test	 edx, edx
  001c1	74 04		 je	 SHORT $LN23@Partition_

; 4071 :                 break;

  001c3	eb 3a		 jmp	 SHORT $LN13@Partition_
  001c5	eb 33		 jmp	 SHORT $LN22@Partition_
$LN23@Partition_:

; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001c7	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001ca	83 e8 64	 sub	 eax, 100		; 00000064H
  001cd	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001d9	83 c4 04	 add	 esp, 4
  001dc	39 45 f8	 cmp	 DWORD PTR __Pfirst$[ebp], eax
  001df	74 19		 je	 SHORT $LN22@Partition_

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  001e1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ea	83 c4 04	 add	 esp, 4
  001ed	50		 push	 eax
  001ee	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  001f7	83 c4 08	 add	 esp, 8
$LN22@Partition_:

; 4074 :             }
; 4075 :         }

  001fa	e9 71 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  001ff	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00202	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00205	75 20		 jne	 SHORT $LN26@Partition_
  00207	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0020a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0020d	75 18		 jne	 SHORT $LN26@Partition_

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0020f	8d 45 f4	 lea	 eax, DWORD PTR __Plast$[ebp]
  00212	50		 push	 eax
  00213	8d 4d f8	 lea	 ecx, DWORD PTR __Pfirst$[ebp]
  00216	51		 push	 ecx
  00217	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
  0021f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00222	e9 c1 00 00 00	 jmp	 $LN1@Partition_
$LN26@Partition_:

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  00227	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0022a	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  0022d	75 45		 jne	 SHORT $LN27@Partition_

; 4082 :             if (_Plast != _Gfirst) {

  0022f	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00232	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00235	74 10		 je	 SHORT $LN29@Partition_

; 4083 :                 _STD iter_swap(_Pfirst, _Plast);

  00237	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0023a	50		 push	 eax
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00244	83 c4 08	 add	 esp, 8
$LN29@Partition_:

; 4084 :             }
; 4085 : 
; 4086 :             ++_Plast;

  00247	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0024a	83 c0 64	 add	 eax, 100		; 00000064H
  0024d	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4087 :             _STD iter_swap(_Pfirst, _Gfirst);

  00250	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00253	50		 push	 eax
  00254	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0025d	83 c4 08	 add	 esp, 8

; 4088 :             ++_Pfirst;

  00260	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00263	83 c0 64	 add	 eax, 100		; 00000064H
  00266	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4089 :             ++_Gfirst;

  00269	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0026c	83 c0 64	 add	 eax, 100		; 00000064H
  0026f	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
  00272	eb 6f		 jmp	 SHORT $LN28@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00274	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00277	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0027a	75 45		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  0027c	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0027f	83 e8 64	 sub	 eax, 100		; 00000064H
  00282	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  00285	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00288	83 e9 64	 sub	 ecx, 100		; 00000064H
  0028b	89 4d f8	 mov	 DWORD PTR __Pfirst$[ebp], ecx
  0028e	8b 55 ec	 mov	 edx, DWORD PTR __Glast$[ebp]
  00291	3b 55 f8	 cmp	 edx, DWORD PTR __Pfirst$[ebp]
  00294	74 10		 je	 SHORT $LN32@Partition_

; 4092 :                 _STD iter_swap(_Glast, _Pfirst);

  00296	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00299	50		 push	 eax
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002a3	83 c4 08	 add	 esp, 8
$LN32@Partition_:

; 4093 :             }
; 4094 : 
; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  002a9	83 e8 64	 sub	 eax, 100		; 00000064H
  002ac	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
  002af	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 f8	 mov	 edx, DWORD PTR __Pfirst$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002bc	83 c4 08	 add	 esp, 8

; 4096 :         } else {

  002bf	eb 22		 jmp	 SHORT $LN28@Partition_
$LN30@Partition_:

; 4097 :             _STD iter_swap(_Gfirst, --_Glast);

  002c1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  002c4	83 e8 64	 sub	 eax, 100		; 00000064H
  002c7	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  002ca	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  002cd	51		 push	 ecx
  002ce	8b 55 f0	 mov	 edx, DWORD PTR __Gfirst$[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002d7	83 c4 08	 add	 esp, 8

; 4098 :             ++_Gfirst;

  002da	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  002dd	83 c0 64	 add	 eax, 100		; 00000064H
  002e0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN28@Partition_:

; 4099 :         }
; 4100 :     }

  002e3	e9 11 fe ff ff	 jmp	 $LN8@Partition_
$LN1@Partition_:

; 4101 : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingRecordSort@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z PROC ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 3507 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3508 :     // order heap by repeatedly popping, using _Pred
; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  00009	eb 09		 jmp	 SHORT $LN4@Sort_heap_
$LN2@Sort_heap_:
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	83 e8 64	 sub	 eax, 100		; 00000064H
  00011	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN4@Sort_heap_:
  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	99		 cdq
  0001b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00020	f7 f9		 idiv	 ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	7c 17		 jl	 SHORT $LN1@Sort_heap_

; 3510 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  00027	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 :     }

  0003c	eb cd		 jmp	 SHORT $LN2@Sort_heap_
$LN1@Sort_heap_:

; 3512 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ENDP ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -124						; size = 100
__Hole$3 = -24						; size = 4
__Bottom$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z PROC ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 3416 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3417 :     // make nontrivial [_First, _Last) into a heap, using _Pred
; 3418 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 3419 :     _Diff _Bottom = _Last - _First;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	89 45 ec	 mov	 DWORD PTR __Bottom$[ebp], eax

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  0003f	8b 45 ec	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00042	d1 f8		 sar	 eax, 1
  00044	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax
$LN4@Make_heap_:
  00047	83 7d e8 00	 cmp	 DWORD PTR __Hole$3[ebp], 0
  0004b	7e 60		 jle	 SHORT $LN1@Make_heap_

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;

  0004d	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax

; 3423 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00056	6b 45 e8 64	 imul	 eax, DWORD PTR __Hole$3[ebp], 100
  0005a	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00076	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00084	83 c4 04	 add	 esp, 4
  00087	50		 push	 eax
  00088	8b 55 ec	 mov	 edx, DWORD PTR __Bottom$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingRecordSort>
  00099	83 c4 14	 add	 esp, 20			; 00000014H

; 3425 :     }

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  000a6	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  000ab	eb 9a		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 3426 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ENDP ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__First1$2 = -128					; size = 4
__Val$3 = -124						; size = 100
__Next1$4 = -24						; size = 4
__Next$5 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z PROC ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 3979 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3980 :     // insertion sort [_First, _Last), using _Pred
; 3981 :     if (_First != _Last) {

  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	0f 84 f6 00 00
	00		 je	 $LN8@Insertion_

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  0003a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
$LN4@Insertion_:
  00040	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00043	83 c0 64	 add	 eax, 100		; 00000064H
  00046	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Next$5[ebp]
  0004c	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0004f	0f 84 db 00 00
	00		 je	 $LN8@Insertion_

; 3983 :             _BidIt _Next1              = _Next;

  00055	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00058	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax

; 3984 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3985 : 
; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00077	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0007e	51		 push	 ecx
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  00087	0f b6 d0	 movzx	 edx, al
  0008a	85 d2		 test	 edx, edx
  0008c	74 34		 je	 SHORT $LN9@Insertion_

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  00091	83 c0 64	 add	 eax, 100		; 00000064H
  00094	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 ec	 mov	 edx, DWORD PTR __Next$5[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3988 :                 *_First = _STD move(_Val);

  000ab	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000bb	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3989 :             } else { // look for insertion point after first

  000c0	eb 5a		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  000c2	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  000c5	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000c8	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000ca	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000cd	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
$LN7@Insertion_:
  000d0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000d3	83 e8 64	 sub	 eax, 100		; 00000064H
  000d6	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000d9	8b 4d 80	 mov	 ecx, DWORD PTR __First1$2[ebp]
  000dc	51		 push	 ecx
  000dd	8d 55 84	 lea	 edx, DWORD PTR __Val$3[ebp]
  000e0	52		 push	 edx
  000e1	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e4	e8 00 00 00 00	 call	 ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingRecordSort::operator()
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	74 17		 je	 SHORT $LN6@Insertion_

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down

  000f0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000f9	83 c4 04	 add	 esp, 4
  000fc	50		 push	 eax
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00100	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3992 :                 }

  00105	eb c3		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:

; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole

  00107	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00110	83 c4 04	 add	 esp, 4
  00113	50		 push	 eax
  00114	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00117	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z
$LN10@Insertion_:

; 3995 :             }
; 3996 :         }

  0011c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00123	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00126	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  0012b	e9 10 ff ff ff	 jmp	 $LN4@Insertion_
$LN8@Insertion_:

; 3997 :     }
; 3998 : 
; 3999 :     return _Last;

  00130	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 4000 : }

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00144	33 cd		 xor	 ecx, ebp
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 3c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-196]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z ENDP ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingRecordSort@3@@Z
_TEXT	SEGMENT
__Glast$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Plast$ = -12						; size = 4
__Pfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingRecordSort@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	d1 f8		 sar	 eax, 1
  00019	6b d0 64	 imul	 edx, eax, 100
  0001c	03 55 0c	 add	 edx, DWORD PTR __First$[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR __Mid$[ebp], edx

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00022	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  00030	83 c4 04	 add	 esp, 4
  00033	50		 push	 eax
  00034	8b 55 fc	 mov	 edx, DWORD PTR __Mid$[ebp]
  00037	52		 push	 edx
  00038	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingRecordSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 4040 :     _RanIt _Pfirst = _Mid;

  00044	8b 45 fc	 mov	 eax, DWORD PTR __Mid$[ebp]
  00047	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Next_iter<CIniFile::Record *>
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 4042 : 
; 4043 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00059	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0005c	3b 45 f8	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0005f	73 4b		 jae	 SHORT $LN4@Partition_
  00061	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00064	50		 push	 eax
  00065	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00075	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0007a	0f b6 d0	 movzx	 edx, al
  0007d	85 d2		 test	 edx, edx
  0007f	75 2b		 jne	 SHORT $LN4@Partition_
  00081	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0008a	83 c4 04	 add	 esp, 4
  0008d	50		 push	 eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00091	51		 push	 ecx
  00092	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00095	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0009a	0f b6 d0	 movzx	 edx, al
  0009d	85 d2		 test	 edx, edx
  0009f	75 0b		 jne	 SHORT $LN4@Partition_

; 4045 :         --_Pfirst;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000a4	83 e8 64	 sub	 eax, 100		; 00000064H
  000a7	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4046 :     }

  000aa	eb ad		 jmp	 SHORT $LN2@Partition_
$LN4@Partition_:

; 4047 : 
; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ac	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000af	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  000b2	73 39		 jae	 SHORT $LN5@Partition_
  000b4	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  000bb	51		 push	 ecx
  000bc	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000bf	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  000c4	0f b6 d0	 movzx	 edx, al
  000c7	85 d2		 test	 edx, edx
  000c9	75 22		 jne	 SHORT $LN5@Partition_
  000cb	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000d2	51		 push	 ecx
  000d3	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d6	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  000db	0f b6 d0	 movzx	 edx, al
  000de	85 d2		 test	 edx, edx
  000e0	75 0b		 jne	 SHORT $LN5@Partition_

; 4049 :         ++_Plast;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000e5	83 c0 64	 add	 eax, 100		; 00000064H
  000e8	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4050 :     }

  000eb	eb bf		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000f0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 4053 :     _RanIt _Glast  = _Pfirst;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000f6	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN8@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000f9	eb 09		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  000fb	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  000fe	83 c0 64	 add	 eax, 100		; 00000064H
  00101	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  00104	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00107	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0010a	73 62		 jae	 SHORT $LN10@Partition_

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  0010c	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00113	51		 push	 ecx
  00114	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00117	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0011c	0f b6 d0	 movzx	 edx, al
  0011f	85 d2		 test	 edx, edx
  00121	74 02		 je	 SHORT $LN15@Partition_
  00123	eb 47		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00125	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  0012c	51		 push	 ecx
  0012d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00130	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 04		 je	 SHORT $LN17@Partition_

; 4059 :                 break;

  0013c	eb 30		 jmp	 SHORT $LN10@Partition_
  0013e	eb 2c		 jmp	 SHORT $LN16@Partition_
$LN17@Partition_:

; 4060 :             } else if (_Plast != _Gfirst) {

  00140	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00143	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00146	74 1b		 je	 SHORT $LN19@Partition_

; 4061 :                 _STD iter_swap(_Plast, _Gfirst);

  00148	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00155	83 c4 08	 add	 esp, 8

; 4062 :                 ++_Plast;

  00158	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0015b	83 c0 64	 add	 eax, 100		; 00000064H
  0015e	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4063 :             } else {

  00161	eb 09		 jmp	 SHORT $LN16@Partition_
$LN19@Partition_:

; 4064 :                 ++_Plast;

  00163	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00166	83 c0 64	 add	 eax, 100		; 00000064H
  00169	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN16@Partition_:

; 4065 :             }
; 4066 :         }

  0016c	eb 8d		 jmp	 SHORT $LN9@Partition_
$LN10@Partition_:

; 4067 : 
; 4068 :         for (; _First < _Glast; --_Glast) {

  0016e	eb 09		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00170	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00173	83 e8 64	 sub	 eax, 100		; 00000064H
  00176	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  00179	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0017c	3b 45 ec	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0017f	73 7e		 jae	 SHORT $LN13@Partition_

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00181	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00184	50		 push	 eax
  00185	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0018e	83 c4 04	 add	 esp, 4
  00191	50		 push	 eax
  00192	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00195	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  0019a	0f b6 d0	 movzx	 edx, al
  0019d	85 d2		 test	 edx, edx
  0019f	74 02		 je	 SHORT $LN21@Partition_
  001a1	eb 57		 jmp	 SHORT $LN22@Partition_
$LN21@Partition_:

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  001a3	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ac	83 c4 04	 add	 esp, 4
  001af	50		 push	 eax
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001b3	51		 push	 ecx
  001b4	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  001b7	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  001bc	0f b6 d0	 movzx	 edx, al
  001bf	85 d2		 test	 edx, edx
  001c1	74 04		 je	 SHORT $LN23@Partition_

; 4071 :                 break;

  001c3	eb 3a		 jmp	 SHORT $LN13@Partition_
  001c5	eb 33		 jmp	 SHORT $LN22@Partition_
$LN23@Partition_:

; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001c7	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001ca	83 e8 64	 sub	 eax, 100		; 00000064H
  001cd	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001d9	83 c4 04	 add	 esp, 4
  001dc	39 45 f8	 cmp	 DWORD PTR __Pfirst$[ebp], eax
  001df	74 19		 je	 SHORT $LN22@Partition_

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  001e1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ea	83 c4 04	 add	 esp, 4
  001ed	50		 push	 eax
  001ee	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  001f7	83 c4 08	 add	 esp, 8
$LN22@Partition_:

; 4074 :             }
; 4075 :         }

  001fa	e9 71 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  001ff	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00202	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00205	75 20		 jne	 SHORT $LN26@Partition_
  00207	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0020a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0020d	75 18		 jne	 SHORT $LN26@Partition_

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0020f	8d 45 f4	 lea	 eax, DWORD PTR __Plast$[ebp]
  00212	50		 push	 eax
  00213	8d 4d f8	 lea	 ecx, DWORD PTR __Pfirst$[ebp]
  00216	51		 push	 ecx
  00217	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
  0021f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00222	e9 c1 00 00 00	 jmp	 $LN1@Partition_
$LN26@Partition_:

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  00227	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0022a	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  0022d	75 45		 jne	 SHORT $LN27@Partition_

; 4082 :             if (_Plast != _Gfirst) {

  0022f	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00232	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00235	74 10		 je	 SHORT $LN29@Partition_

; 4083 :                 _STD iter_swap(_Pfirst, _Plast);

  00237	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0023a	50		 push	 eax
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00244	83 c4 08	 add	 esp, 8
$LN29@Partition_:

; 4084 :             }
; 4085 : 
; 4086 :             ++_Plast;

  00247	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0024a	83 c0 64	 add	 eax, 100		; 00000064H
  0024d	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4087 :             _STD iter_swap(_Pfirst, _Gfirst);

  00250	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00253	50		 push	 eax
  00254	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0025d	83 c4 08	 add	 esp, 8

; 4088 :             ++_Pfirst;

  00260	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00263	83 c0 64	 add	 eax, 100		; 00000064H
  00266	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4089 :             ++_Gfirst;

  00269	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0026c	83 c0 64	 add	 eax, 100		; 00000064H
  0026f	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
  00272	eb 6f		 jmp	 SHORT $LN28@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00274	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00277	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0027a	75 45		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  0027c	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0027f	83 e8 64	 sub	 eax, 100		; 00000064H
  00282	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  00285	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00288	83 e9 64	 sub	 ecx, 100		; 00000064H
  0028b	89 4d f8	 mov	 DWORD PTR __Pfirst$[ebp], ecx
  0028e	8b 55 ec	 mov	 edx, DWORD PTR __Glast$[ebp]
  00291	3b 55 f8	 cmp	 edx, DWORD PTR __Pfirst$[ebp]
  00294	74 10		 je	 SHORT $LN32@Partition_

; 4092 :                 _STD iter_swap(_Glast, _Pfirst);

  00296	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00299	50		 push	 eax
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002a3	83 c4 08	 add	 esp, 8
$LN32@Partition_:

; 4093 :             }
; 4094 : 
; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  002a9	83 e8 64	 sub	 eax, 100		; 00000064H
  002ac	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
  002af	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 f8	 mov	 edx, DWORD PTR __Pfirst$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002bc	83 c4 08	 add	 esp, 8

; 4096 :         } else {

  002bf	eb 22		 jmp	 SHORT $LN28@Partition_
$LN30@Partition_:

; 4097 :             _STD iter_swap(_Gfirst, --_Glast);

  002c1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  002c4	83 e8 64	 sub	 eax, 100		; 00000064H
  002c7	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  002ca	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  002cd	51		 push	 ecx
  002ce	8b 55 f0	 mov	 edx, DWORD PTR __Gfirst$[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002d7	83 c4 08	 add	 esp, 8

; 4098 :             ++_Gfirst;

  002da	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  002dd	83 c0 64	 add	 eax, 100		; 00000064H
  002e0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN28@Partition_:

; 4099 :         }
; 4100 :     }

  002e3	e9 11 fe ff ff	 jmp	 $LN8@Partition_
$LN1@Partition_:

; 4101 : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingRecordSort@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z PROC ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 3507 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3508 :     // order heap by repeatedly popping, using _Pred
; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  00009	eb 09		 jmp	 SHORT $LN4@Sort_heap_
$LN2@Sort_heap_:
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	83 e8 64	 sub	 eax, 100		; 00000064H
  00011	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN4@Sort_heap_:
  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	99		 cdq
  0001b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00020	f7 f9		 idiv	 ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	7c 17		 jl	 SHORT $LN1@Sort_heap_

; 3510 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  00027	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 :     }

  0003c	eb cd		 jmp	 SHORT $LN2@Sort_heap_
$LN1@Sort_heap_:

; 3512 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ENDP ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -124						; size = 100
__Hole$3 = -24						; size = 4
__Bottom$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z PROC ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 3416 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3417 :     // make nontrivial [_First, _Last) into a heap, using _Pred
; 3418 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 3419 :     _Diff _Bottom = _Last - _First;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	89 45 ec	 mov	 DWORD PTR __Bottom$[ebp], eax

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  0003f	8b 45 ec	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00042	d1 f8		 sar	 eax, 1
  00044	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax
$LN4@Make_heap_:
  00047	83 7d e8 00	 cmp	 DWORD PTR __Hole$3[ebp], 0
  0004b	7e 60		 jle	 SHORT $LN1@Make_heap_

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;

  0004d	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax

; 3423 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00056	6b 45 e8 64	 imul	 eax, DWORD PTR __Hole$3[ebp], 100
  0005a	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00076	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00084	83 c4 04	 add	 esp, 4
  00087	50		 push	 eax
  00088	8b 55 ec	 mov	 edx, DWORD PTR __Bottom$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingRecordSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingRecordSort>
  00099	83 c4 14	 add	 esp, 20			; 00000014H

; 3425 :     }

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  000a6	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  000ab	eb 9a		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 3426 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ENDP ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__First1$2 = -128					; size = 4
__Val$3 = -124						; size = 100
__Next1$4 = -24						; size = 4
__Next$5 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z PROC ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 3979 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3980 :     // insertion sort [_First, _Last), using _Pred
; 3981 :     if (_First != _Last) {

  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	0f 84 f6 00 00
	00		 je	 $LN8@Insertion_

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  0003a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
$LN4@Insertion_:
  00040	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00043	83 c0 64	 add	 eax, 100		; 00000064H
  00046	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Next$5[ebp]
  0004c	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0004f	0f 84 db 00 00
	00		 je	 $LN8@Insertion_

; 3983 :             _BidIt _Next1              = _Next;

  00055	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00058	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax

; 3984 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3985 : 
; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00077	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0007e	51		 push	 ecx
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  00087	0f b6 d0	 movzx	 edx, al
  0008a	85 d2		 test	 edx, edx
  0008c	74 34		 je	 SHORT $LN9@Insertion_

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  00091	83 c0 64	 add	 eax, 100		; 00000064H
  00094	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 ec	 mov	 edx, DWORD PTR __Next$5[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3988 :                 *_First = _STD move(_Val);

  000ab	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000bb	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3989 :             } else { // look for insertion point after first

  000c0	eb 5a		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  000c2	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  000c5	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000c8	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000ca	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000cd	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
$LN7@Insertion_:
  000d0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000d3	83 e8 64	 sub	 eax, 100		; 00000064H
  000d6	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000d9	8b 4d 80	 mov	 ecx, DWORD PTR __First1$2[ebp]
  000dc	51		 push	 ecx
  000dd	8d 55 84	 lea	 edx, DWORD PTR __Val$3[ebp]
  000e0	52		 push	 edx
  000e1	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e4	e8 00 00 00 00	 call	 ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingRecordSort::operator()
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	74 17		 je	 SHORT $LN6@Insertion_

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down

  000f0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000f9	83 c4 04	 add	 esp, 4
  000fc	50		 push	 eax
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00100	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3992 :                 }

  00105	eb c3		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:

; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole

  00107	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00110	83 c4 04	 add	 esp, 4
  00113	50		 push	 eax
  00114	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00117	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z
$LN10@Insertion_:

; 3995 :             }
; 3996 :         }

  0011c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00123	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00126	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  0012b	e9 10 ff ff ff	 jmp	 $LN4@Insertion_
$LN8@Insertion_:

; 3997 :     }
; 3998 : 
; 3999 :     return _Last;

  00130	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 4000 : }

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00144	33 cd		 xor	 ecx, ebp
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 3c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-196]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z ENDP ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingSectionSort@3@@Z
_TEXT	SEGMENT
__Glast$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Plast$ = -12						; size = 4
__Pfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingSectionSort@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	d1 f8		 sar	 eax, 1
  00019	6b d0 64	 imul	 edx, eax, 100
  0001c	03 55 0c	 add	 edx, DWORD PTR __First$[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR __Mid$[ebp], edx

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00022	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  00030	83 c4 04	 add	 esp, 4
  00033	50		 push	 eax
  00034	8b 55 fc	 mov	 edx, DWORD PTR __Mid$[ebp]
  00037	52		 push	 edx
  00038	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UAscendingSectionSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 4040 :     _RanIt _Pfirst = _Mid;

  00044	8b 45 fc	 mov	 eax, DWORD PTR __Mid$[ebp]
  00047	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Next_iter<CIniFile::Record *>
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 4042 : 
; 4043 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00059	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0005c	3b 45 f8	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0005f	73 4b		 jae	 SHORT $LN4@Partition_
  00061	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00064	50		 push	 eax
  00065	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00075	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0007a	0f b6 d0	 movzx	 edx, al
  0007d	85 d2		 test	 edx, edx
  0007f	75 2b		 jne	 SHORT $LN4@Partition_
  00081	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0008a	83 c4 04	 add	 esp, 4
  0008d	50		 push	 eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00091	51		 push	 ecx
  00092	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00095	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0009a	0f b6 d0	 movzx	 edx, al
  0009d	85 d2		 test	 edx, edx
  0009f	75 0b		 jne	 SHORT $LN4@Partition_

; 4045 :         --_Pfirst;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000a4	83 e8 64	 sub	 eax, 100		; 00000064H
  000a7	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4046 :     }

  000aa	eb ad		 jmp	 SHORT $LN2@Partition_
$LN4@Partition_:

; 4047 : 
; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ac	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000af	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  000b2	73 39		 jae	 SHORT $LN5@Partition_
  000b4	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  000bb	51		 push	 ecx
  000bc	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000bf	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  000c4	0f b6 d0	 movzx	 edx, al
  000c7	85 d2		 test	 edx, edx
  000c9	75 22		 jne	 SHORT $LN5@Partition_
  000cb	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000d2	51		 push	 ecx
  000d3	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d6	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  000db	0f b6 d0	 movzx	 edx, al
  000de	85 d2		 test	 edx, edx
  000e0	75 0b		 jne	 SHORT $LN5@Partition_

; 4049 :         ++_Plast;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000e5	83 c0 64	 add	 eax, 100		; 00000064H
  000e8	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4050 :     }

  000eb	eb bf		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000f0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 4053 :     _RanIt _Glast  = _Pfirst;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000f6	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN8@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000f9	eb 09		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  000fb	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  000fe	83 c0 64	 add	 eax, 100		; 00000064H
  00101	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  00104	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00107	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0010a	73 62		 jae	 SHORT $LN10@Partition_

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  0010c	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00113	51		 push	 ecx
  00114	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00117	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0011c	0f b6 d0	 movzx	 edx, al
  0011f	85 d2		 test	 edx, edx
  00121	74 02		 je	 SHORT $LN15@Partition_
  00123	eb 47		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00125	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  0012c	51		 push	 ecx
  0012d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00130	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 04		 je	 SHORT $LN17@Partition_

; 4059 :                 break;

  0013c	eb 30		 jmp	 SHORT $LN10@Partition_
  0013e	eb 2c		 jmp	 SHORT $LN16@Partition_
$LN17@Partition_:

; 4060 :             } else if (_Plast != _Gfirst) {

  00140	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00143	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00146	74 1b		 je	 SHORT $LN19@Partition_

; 4061 :                 _STD iter_swap(_Plast, _Gfirst);

  00148	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00155	83 c4 08	 add	 esp, 8

; 4062 :                 ++_Plast;

  00158	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0015b	83 c0 64	 add	 eax, 100		; 00000064H
  0015e	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4063 :             } else {

  00161	eb 09		 jmp	 SHORT $LN16@Partition_
$LN19@Partition_:

; 4064 :                 ++_Plast;

  00163	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00166	83 c0 64	 add	 eax, 100		; 00000064H
  00169	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN16@Partition_:

; 4065 :             }
; 4066 :         }

  0016c	eb 8d		 jmp	 SHORT $LN9@Partition_
$LN10@Partition_:

; 4067 : 
; 4068 :         for (; _First < _Glast; --_Glast) {

  0016e	eb 09		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00170	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00173	83 e8 64	 sub	 eax, 100		; 00000064H
  00176	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  00179	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0017c	3b 45 ec	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0017f	73 7e		 jae	 SHORT $LN13@Partition_

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00181	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00184	50		 push	 eax
  00185	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0018e	83 c4 04	 add	 esp, 4
  00191	50		 push	 eax
  00192	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00195	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  0019a	0f b6 d0	 movzx	 edx, al
  0019d	85 d2		 test	 edx, edx
  0019f	74 02		 je	 SHORT $LN21@Partition_
  001a1	eb 57		 jmp	 SHORT $LN22@Partition_
$LN21@Partition_:

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  001a3	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ac	83 c4 04	 add	 esp, 4
  001af	50		 push	 eax
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001b3	51		 push	 ecx
  001b4	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  001b7	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  001bc	0f b6 d0	 movzx	 edx, al
  001bf	85 d2		 test	 edx, edx
  001c1	74 04		 je	 SHORT $LN23@Partition_

; 4071 :                 break;

  001c3	eb 3a		 jmp	 SHORT $LN13@Partition_
  001c5	eb 33		 jmp	 SHORT $LN22@Partition_
$LN23@Partition_:

; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001c7	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001ca	83 e8 64	 sub	 eax, 100		; 00000064H
  001cd	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001d9	83 c4 04	 add	 esp, 4
  001dc	39 45 f8	 cmp	 DWORD PTR __Pfirst$[ebp], eax
  001df	74 19		 je	 SHORT $LN22@Partition_

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  001e1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ea	83 c4 04	 add	 esp, 4
  001ed	50		 push	 eax
  001ee	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  001f7	83 c4 08	 add	 esp, 8
$LN22@Partition_:

; 4074 :             }
; 4075 :         }

  001fa	e9 71 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  001ff	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00202	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00205	75 20		 jne	 SHORT $LN26@Partition_
  00207	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0020a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0020d	75 18		 jne	 SHORT $LN26@Partition_

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0020f	8d 45 f4	 lea	 eax, DWORD PTR __Plast$[ebp]
  00212	50		 push	 eax
  00213	8d 4d f8	 lea	 ecx, DWORD PTR __Pfirst$[ebp]
  00216	51		 push	 ecx
  00217	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
  0021f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00222	e9 c1 00 00 00	 jmp	 $LN1@Partition_
$LN26@Partition_:

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  00227	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0022a	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  0022d	75 45		 jne	 SHORT $LN27@Partition_

; 4082 :             if (_Plast != _Gfirst) {

  0022f	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00232	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00235	74 10		 je	 SHORT $LN29@Partition_

; 4083 :                 _STD iter_swap(_Pfirst, _Plast);

  00237	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0023a	50		 push	 eax
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00244	83 c4 08	 add	 esp, 8
$LN29@Partition_:

; 4084 :             }
; 4085 : 
; 4086 :             ++_Plast;

  00247	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0024a	83 c0 64	 add	 eax, 100		; 00000064H
  0024d	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4087 :             _STD iter_swap(_Pfirst, _Gfirst);

  00250	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00253	50		 push	 eax
  00254	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0025d	83 c4 08	 add	 esp, 8

; 4088 :             ++_Pfirst;

  00260	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00263	83 c0 64	 add	 eax, 100		; 00000064H
  00266	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4089 :             ++_Gfirst;

  00269	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0026c	83 c0 64	 add	 eax, 100		; 00000064H
  0026f	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
  00272	eb 6f		 jmp	 SHORT $LN28@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00274	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00277	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0027a	75 45		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  0027c	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0027f	83 e8 64	 sub	 eax, 100		; 00000064H
  00282	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  00285	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00288	83 e9 64	 sub	 ecx, 100		; 00000064H
  0028b	89 4d f8	 mov	 DWORD PTR __Pfirst$[ebp], ecx
  0028e	8b 55 ec	 mov	 edx, DWORD PTR __Glast$[ebp]
  00291	3b 55 f8	 cmp	 edx, DWORD PTR __Pfirst$[ebp]
  00294	74 10		 je	 SHORT $LN32@Partition_

; 4092 :                 _STD iter_swap(_Glast, _Pfirst);

  00296	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00299	50		 push	 eax
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002a3	83 c4 08	 add	 esp, 8
$LN32@Partition_:

; 4093 :             }
; 4094 : 
; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  002a9	83 e8 64	 sub	 eax, 100		; 00000064H
  002ac	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
  002af	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 f8	 mov	 edx, DWORD PTR __Pfirst$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002bc	83 c4 08	 add	 esp, 8

; 4096 :         } else {

  002bf	eb 22		 jmp	 SHORT $LN28@Partition_
$LN30@Partition_:

; 4097 :             _STD iter_swap(_Gfirst, --_Glast);

  002c1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  002c4	83 e8 64	 sub	 eax, 100		; 00000064H
  002c7	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  002ca	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  002cd	51		 push	 ecx
  002ce	8b 55 f0	 mov	 edx, DWORD PTR __Gfirst$[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002d7	83 c4 08	 add	 esp, 8

; 4098 :             ++_Gfirst;

  002da	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  002dd	83 c0 64	 add	 eax, 100		; 00000064H
  002e0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN28@Partition_:

; 4099 :         }
; 4100 :     }

  002e3	e9 11 fe ff ff	 jmp	 $LN8@Partition_
$LN1@Partition_:

; 4101 : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingSectionSort@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z PROC ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 3507 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3508 :     // order heap by repeatedly popping, using _Pred
; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  00009	eb 09		 jmp	 SHORT $LN4@Sort_heap_
$LN2@Sort_heap_:
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	83 e8 64	 sub	 eax, 100		; 00000064H
  00011	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN4@Sort_heap_:
  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	99		 cdq
  0001b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00020	f7 f9		 idiv	 ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	7c 17		 jl	 SHORT $LN1@Sort_heap_

; 3510 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  00027	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 :     }

  0003c	eb cd		 jmp	 SHORT $LN2@Sort_heap_
$LN1@Sort_heap_:

; 3512 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ENDP ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -124						; size = 100
__Hole$3 = -24						; size = 4
__Bottom$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z PROC ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 3416 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3417 :     // make nontrivial [_First, _Last) into a heap, using _Pred
; 3418 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 3419 :     _Diff _Bottom = _Last - _First;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	89 45 ec	 mov	 DWORD PTR __Bottom$[ebp], eax

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  0003f	8b 45 ec	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00042	d1 f8		 sar	 eax, 1
  00044	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax
$LN4@Make_heap_:
  00047	83 7d e8 00	 cmp	 DWORD PTR __Hole$3[ebp], 0
  0004b	7e 60		 jle	 SHORT $LN1@Make_heap_

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;

  0004d	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax

; 3423 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00056	6b 45 e8 64	 imul	 eax, DWORD PTR __Hole$3[ebp], 100
  0005a	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00076	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00084	83 c4 04	 add	 esp, 4
  00087	50		 push	 eax
  00088	8b 55 ec	 mov	 edx, DWORD PTR __Bottom$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UAscendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::AscendingSectionSort>
  00099	83 c4 14	 add	 esp, 20			; 00000014H

; 3425 :     }

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  000a6	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  000ab	eb 9a		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 3426 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ENDP ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__First1$2 = -128					; size = 4
__Val$3 = -124						; size = 100
__Next1$4 = -24						; size = 4
__Next$5 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z PROC ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 3979 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3980 :     // insertion sort [_First, _Last), using _Pred
; 3981 :     if (_First != _Last) {

  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	0f 84 f6 00 00
	00		 je	 $LN8@Insertion_

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  0003a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
$LN4@Insertion_:
  00040	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00043	83 c0 64	 add	 eax, 100		; 00000064H
  00046	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Next$5[ebp]
  0004c	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0004f	0f 84 db 00 00
	00		 je	 $LN8@Insertion_

; 3983 :             _BidIt _Next1              = _Next;

  00055	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00058	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax

; 3984 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3985 : 
; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00077	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0007e	51		 push	 ecx
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  00087	0f b6 d0	 movzx	 edx, al
  0008a	85 d2		 test	 edx, edx
  0008c	74 34		 je	 SHORT $LN9@Insertion_

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  00091	83 c0 64	 add	 eax, 100		; 00000064H
  00094	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 ec	 mov	 edx, DWORD PTR __Next$5[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3988 :                 *_First = _STD move(_Val);

  000ab	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000bb	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3989 :             } else { // look for insertion point after first

  000c0	eb 5a		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  000c2	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  000c5	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000c8	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000ca	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000cd	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
$LN7@Insertion_:
  000d0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000d3	83 e8 64	 sub	 eax, 100		; 00000064H
  000d6	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000d9	8b 4d 80	 mov	 ecx, DWORD PTR __First1$2[ebp]
  000dc	51		 push	 ecx
  000dd	8d 55 84	 lea	 edx, DWORD PTR __Val$3[ebp]
  000e0	52		 push	 edx
  000e1	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e4	e8 00 00 00 00	 call	 ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::AscendingSectionSort::operator()
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	74 17		 je	 SHORT $LN6@Insertion_

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down

  000f0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000f9	83 c4 04	 add	 esp, 4
  000fc	50		 push	 eax
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00100	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3992 :                 }

  00105	eb c3		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:

; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole

  00107	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00110	83 c4 04	 add	 esp, 4
  00113	50		 push	 eax
  00114	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00117	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z
$LN10@Insertion_:

; 3995 :             }
; 3996 :         }

  0011c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00123	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00126	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  0012b	e9 10 ff ff ff	 jmp	 $LN4@Insertion_
$LN8@Insertion_:

; 3997 :     }
; 3998 : 
; 3999 :     return _Last;

  00130	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 4000 : }

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00144	33 cd		 xor	 ecx, ebp
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 3c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-196]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z ENDP ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingSectionSort@3@@Z
_TEXT	SEGMENT
__Glast$ = -20						; size = 4
__Gfirst$ = -16						; size = 4
__Plast$ = -12						; size = 4
__Pfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingSectionSort@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 4036 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4037 :     // partition [_First, _Last), using _Pred
; 4038 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	d1 f8		 sar	 eax, 1
  00019	6b d0 64	 imul	 edx, eax, 100
  0001c	03 55 0c	 add	 edx, DWORD PTR __First$[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR __Mid$[ebp], edx

; 4039 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00022	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  00030	83 c4 04	 add	 esp, 4
  00033	50		 push	 eax
  00034	8b 55 fc	 mov	 edx, DWORD PTR __Mid$[ebp]
  00037	52		 push	 edx
  00038	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@00UDescendingSectionSort@2@@Z ; std::_Guess_median_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 4040 :     _RanIt _Pfirst = _Mid;

  00044	8b 45 fc	 mov	 eax, DWORD PTR __Mid$[ebp]
  00047	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4041 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Next_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Next_iter<CIniFile::Record *>
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 4042 : 
; 4043 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 4044 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00059	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0005c	3b 45 f8	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0005f	73 4b		 jae	 SHORT $LN4@Partition_
  00061	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00064	50		 push	 eax
  00065	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0006e	83 c4 04	 add	 esp, 4
  00071	50		 push	 eax
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00075	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0007a	0f b6 d0	 movzx	 edx, al
  0007d	85 d2		 test	 edx, edx
  0007f	75 2b		 jne	 SHORT $LN4@Partition_
  00081	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0008a	83 c4 04	 add	 esp, 4
  0008d	50		 push	 eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00091	51		 push	 ecx
  00092	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00095	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0009a	0f b6 d0	 movzx	 edx, al
  0009d	85 d2		 test	 edx, edx
  0009f	75 0b		 jne	 SHORT $LN4@Partition_

; 4045 :         --_Pfirst;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000a4	83 e8 64	 sub	 eax, 100		; 00000064H
  000a7	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4046 :     }

  000aa	eb ad		 jmp	 SHORT $LN2@Partition_
$LN4@Partition_:

; 4047 : 
; 4048 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ac	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000af	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  000b2	73 39		 jae	 SHORT $LN5@Partition_
  000b4	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  000bb	51		 push	 ecx
  000bc	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000bf	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  000c4	0f b6 d0	 movzx	 edx, al
  000c7	85 d2		 test	 edx, edx
  000c9	75 22		 jne	 SHORT $LN5@Partition_
  000cb	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000d2	51		 push	 ecx
  000d3	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d6	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  000db	0f b6 d0	 movzx	 edx, al
  000de	85 d2		 test	 edx, edx
  000e0	75 0b		 jne	 SHORT $LN5@Partition_

; 4049 :         ++_Plast;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000e5	83 c0 64	 add	 eax, 100		; 00000064H
  000e8	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4050 :     }

  000eb	eb bf		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 4051 : 
; 4052 :     _RanIt _Gfirst = _Plast;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  000f0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 4053 :     _RanIt _Glast  = _Pfirst;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000f6	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN8@Partition_:

; 4054 : 
; 4055 :     for (;;) { // partition
; 4056 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000f9	eb 09		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  000fb	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  000fe	83 c0 64	 add	 eax, 100		; 00000064H
  00101	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  00104	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00107	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0010a	73 62		 jae	 SHORT $LN10@Partition_

; 4057 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  0010c	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00113	51		 push	 ecx
  00114	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00117	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0011c	0f b6 d0	 movzx	 edx, al
  0011f	85 d2		 test	 edx, edx
  00121	74 02		 je	 SHORT $LN15@Partition_
  00123	eb 47		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:

; 4058 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00125	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  0012c	51		 push	 ecx
  0012d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00130	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 04		 je	 SHORT $LN17@Partition_

; 4059 :                 break;

  0013c	eb 30		 jmp	 SHORT $LN10@Partition_
  0013e	eb 2c		 jmp	 SHORT $LN16@Partition_
$LN17@Partition_:

; 4060 :             } else if (_Plast != _Gfirst) {

  00140	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00143	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00146	74 1b		 je	 SHORT $LN19@Partition_

; 4061 :                 _STD iter_swap(_Plast, _Gfirst);

  00148	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00155	83 c4 08	 add	 esp, 8

; 4062 :                 ++_Plast;

  00158	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0015b	83 c0 64	 add	 eax, 100		; 00000064H
  0015e	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4063 :             } else {

  00161	eb 09		 jmp	 SHORT $LN16@Partition_
$LN19@Partition_:

; 4064 :                 ++_Plast;

  00163	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00166	83 c0 64	 add	 eax, 100		; 00000064H
  00169	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
$LN16@Partition_:

; 4065 :             }
; 4066 :         }

  0016c	eb 8d		 jmp	 SHORT $LN9@Partition_
$LN10@Partition_:

; 4067 : 
; 4068 :         for (; _First < _Glast; --_Glast) {

  0016e	eb 09		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00170	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00173	83 e8 64	 sub	 eax, 100		; 00000064H
  00176	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  00179	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0017c	3b 45 ec	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0017f	73 7e		 jae	 SHORT $LN13@Partition_

; 4069 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00181	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00184	50		 push	 eax
  00185	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  0018e	83 c4 04	 add	 esp, 4
  00191	50		 push	 eax
  00192	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00195	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  0019a	0f b6 d0	 movzx	 edx, al
  0019d	85 d2		 test	 edx, edx
  0019f	74 02		 je	 SHORT $LN21@Partition_
  001a1	eb 57		 jmp	 SHORT $LN22@Partition_
$LN21@Partition_:

; 4070 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  001a3	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ac	83 c4 04	 add	 esp, 4
  001af	50		 push	 eax
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001b3	51		 push	 ecx
  001b4	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  001b7	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  001bc	0f b6 d0	 movzx	 edx, al
  001bf	85 d2		 test	 edx, edx
  001c1	74 04		 je	 SHORT $LN23@Partition_

; 4071 :                 break;

  001c3	eb 3a		 jmp	 SHORT $LN13@Partition_
  001c5	eb 33		 jmp	 SHORT $LN22@Partition_
$LN23@Partition_:

; 4072 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  001c7	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001ca	83 e8 64	 sub	 eax, 100		; 00000064H
  001cd	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001d9	83 c4 04	 add	 esp, 4
  001dc	39 45 f8	 cmp	 DWORD PTR __Pfirst$[ebp], eax
  001df	74 19		 je	 SHORT $LN22@Partition_

; 4073 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  001e1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ??$_Prev_iter@PAURecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Prev_iter<CIniFile::Record *>
  001ea	83 c4 04	 add	 esp, 4
  001ed	50		 push	 eax
  001ee	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  001f7	83 c4 08	 add	 esp, 8
$LN22@Partition_:

; 4074 :             }
; 4075 :         }

  001fa	e9 71 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 4076 : 
; 4077 :         if (_Glast == _First && _Gfirst == _Last) {

  001ff	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  00202	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00205	75 20		 jne	 SHORT $LN26@Partition_
  00207	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0020a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0020d	75 18		 jne	 SHORT $LN26@Partition_

; 4078 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0020f	8d 45 f4	 lea	 eax, DWORD PTR __Plast$[ebp]
  00212	50		 push	 eax
  00213	8d 4d f8	 lea	 ecx, DWORD PTR __Pfirst$[ebp]
  00216	51		 push	 ecx
  00217	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$?0AAPAURecord@CIniFile@@AAPAU01@$0A@@?$pair@PAURecord@CIniFile@@PAU12@@std@@QAE@AAPAURecord@CIniFile@@0@Z ; std::pair<CIniFile::Record *,CIniFile::Record *>::pair<CIniFile::Record *,CIniFile::Record *><CIniFile::Record * &,CIniFile::Record * &,0>
  0021f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00222	e9 c1 00 00 00	 jmp	 $LN1@Partition_
$LN26@Partition_:

; 4079 :         }
; 4080 : 
; 4081 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  00227	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0022a	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  0022d	75 45		 jne	 SHORT $LN27@Partition_

; 4082 :             if (_Plast != _Gfirst) {

  0022f	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  00232	3b 45 f0	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00235	74 10		 je	 SHORT $LN29@Partition_

; 4083 :                 _STD iter_swap(_Pfirst, _Plast);

  00237	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0023a	50		 push	 eax
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  00244	83 c4 08	 add	 esp, 8
$LN29@Partition_:

; 4084 :             }
; 4085 : 
; 4086 :             ++_Plast;

  00247	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  0024a	83 c0 64	 add	 eax, 100		; 00000064H
  0024d	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax

; 4087 :             _STD iter_swap(_Pfirst, _Gfirst);

  00250	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00253	50		 push	 eax
  00254	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  0025d	83 c4 08	 add	 esp, 8

; 4088 :             ++_Pfirst;

  00260	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00263	83 c0 64	 add	 eax, 100		; 00000064H
  00266	89 45 f8	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 4089 :             ++_Gfirst;

  00269	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0026c	83 c0 64	 add	 eax, 100		; 00000064H
  0026f	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
  00272	eb 6f		 jmp	 SHORT $LN28@Partition_
$LN27@Partition_:

; 4090 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00274	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00277	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  0027a	75 45		 jne	 SHORT $LN30@Partition_

; 4091 :             if (--_Glast != --_Pfirst) {

  0027c	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  0027f	83 e8 64	 sub	 eax, 100		; 00000064H
  00282	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  00285	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00288	83 e9 64	 sub	 ecx, 100		; 00000064H
  0028b	89 4d f8	 mov	 DWORD PTR __Pfirst$[ebp], ecx
  0028e	8b 55 ec	 mov	 edx, DWORD PTR __Glast$[ebp]
  00291	3b 55 f8	 cmp	 edx, DWORD PTR __Pfirst$[ebp]
  00294	74 10		 je	 SHORT $LN32@Partition_

; 4092 :                 _STD iter_swap(_Glast, _Pfirst);

  00296	8b 45 f8	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00299	50		 push	 eax
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002a3	83 c4 08	 add	 esp, 8
$LN32@Partition_:

; 4093 :             }
; 4094 : 
; 4095 :             _STD iter_swap(_Pfirst, --_Plast);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR __Plast$[ebp]
  002a9	83 e8 64	 sub	 eax, 100		; 00000064H
  002ac	89 45 f4	 mov	 DWORD PTR __Plast$[ebp], eax
  002af	8b 4d f4	 mov	 ecx, DWORD PTR __Plast$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 f8	 mov	 edx, DWORD PTR __Pfirst$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002bc	83 c4 08	 add	 esp, 8

; 4096 :         } else {

  002bf	eb 22		 jmp	 SHORT $LN28@Partition_
$LN30@Partition_:

; 4097 :             _STD iter_swap(_Gfirst, --_Glast);

  002c1	8b 45 ec	 mov	 eax, DWORD PTR __Glast$[ebp]
  002c4	83 e8 64	 sub	 eax, 100		; 00000064H
  002c7	89 45 ec	 mov	 DWORD PTR __Glast$[ebp], eax
  002ca	8b 4d ec	 mov	 ecx, DWORD PTR __Glast$[ebp]
  002cd	51		 push	 ecx
  002ce	8b 55 f0	 mov	 edx, DWORD PTR __Gfirst$[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 ??$iter_swap@PAURecord@CIniFile@@PAU12@@std@@YAXPAURecord@CIniFile@@0@Z ; std::iter_swap<CIniFile::Record *,CIniFile::Record *>
  002d7	83 c4 08	 add	 esp, 8

; 4098 :             ++_Gfirst;

  002da	8b 45 f0	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  002dd	83 c0 64	 add	 eax, 100		; 00000064H
  002e0	89 45 f0	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN28@Partition_:

; 4099 :         }
; 4100 :     }

  002e3	e9 11 fe ff ff	 jmp	 $LN8@Partition_
$LN1@Partition_:

; 4101 : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingSectionSort@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z PROC ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 3507 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3508 :     // order heap by repeatedly popping, using _Pred
; 3509 :     for (; 2 <= _Last - _First; --_Last) {

  00009	eb 09		 jmp	 SHORT $LN4@Sort_heap_
$LN2@Sort_heap_:
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	83 e8 64	 sub	 eax, 100		; 00000064H
  00011	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN4@Sort_heap_:
  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	99		 cdq
  0001b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00020	f7 f9		 idiv	 ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	7c 17		 jl	 SHORT $LN1@Sort_heap_

; 3510 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  00027	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Pop_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 :     }

  0003c	eb cd		 jmp	 SHORT $LN2@Sort_heap_
$LN1@Sort_heap_:

; 3512 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ENDP ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Val$2 = -124						; size = 100
__Hole$3 = -24						; size = 4
__Bottom$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z PROC ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 3416 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3417 :     // make nontrivial [_First, _Last) into a heap, using _Pred
; 3418 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 3419 :     _Diff _Bottom = _Last - _First;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00034	99		 cdq
  00035	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003a	f7 f9		 idiv	 ecx
  0003c	89 45 ec	 mov	 DWORD PTR __Bottom$[ebp], eax

; 3420 :     for (_Diff _Hole = _Bottom >> 1; 0 < _Hole;) { // shift for codegen

  0003f	8b 45 ec	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00042	d1 f8		 sar	 eax, 1
  00044	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax
$LN4@Make_heap_:
  00047	83 7d e8 00	 cmp	 DWORD PTR __Hole$3[ebp], 0
  0004b	7e 60		 jle	 SHORT $LN1@Make_heap_

; 3421 :         // reheap top half, bottom to top
; 3422 :         --_Hole;

  0004d	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 e8	 mov	 DWORD PTR __Hole$3[ebp], eax

; 3423 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00056	6b 45 e8 64	 imul	 eax, DWORD PTR __Hole$3[ebp], 100
  0005a	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3424 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00076	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00084	83 c4 04	 add	 esp, 4
  00087	50		 push	 eax
  00088	8b 55 ec	 mov	 edx, DWORD PTR __Bottom$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Hole$3[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAURecord@CIniFile@@U12@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@HH$$QAU12@UDescendingSectionSort@2@@Z ; std::_Pop_heap_hole_by_index<CIniFile::Record *,CIniFile::Record,CIniFile::DescendingSectionSort>
  00099	83 c4 14	 add	 esp, 20			; 00000014H

; 3425 :     }

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  000a6	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  000ab	eb 9a		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 3426 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ENDP ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__First1$2 = -128					; size = 4
__Val$3 = -124						; size = 100
__Next1$4 = -24						; size = 4
__Next$5 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z PROC ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 3979 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3980 :     // insertion sort [_First, _Last), using _Pred
; 3981 :     if (_First != _Last) {

  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	0f 84 f6 00 00
	00		 je	 $LN8@Insertion_

; 3982 :         for (_BidIt _Next = _First; ++_Next != _Last;) { // order next element

  0003a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
$LN4@Insertion_:
  00040	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00043	83 c0 64	 add	 eax, 100		; 00000064H
  00046	89 45 ec	 mov	 DWORD PTR __Next$5[ebp], eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Next$5[ebp]
  0004c	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0004f	0f 84 db 00 00
	00		 je	 $LN8@Insertion_

; 3983 :             _BidIt _Next1              = _Next;

  00055	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  00058	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax

; 3984 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Next$5[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3985 : 
; 3986 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00077	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  0007e	51		 push	 ecx
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  00087	0f b6 d0	 movzx	 edx, al
  0008a	85 d2		 test	 edx, edx
  0008c	74 34		 je	 SHORT $LN9@Insertion_

; 3987 :                 _Move_backward_unchecked(_First, _Next, ++_Next1);

  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  00091	83 c0 64	 add	 eax, 100		; 00000064H
  00094	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 ec	 mov	 edx, DWORD PTR __Next$5[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3988 :                 *_First = _STD move(_Val);

  000ab	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000bb	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3989 :             } else { // look for insertion point after first

  000c0	eb 5a		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 3990 :                 for (_BidIt _First1 = _Next1; _DEBUG_LT_PRED(_Pred, _Val, *--_First1); _Next1 = _First1) {

  000c2	8b 45 e8	 mov	 eax, DWORD PTR __Next1$4[ebp]
  000c5	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000c8	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000ca	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000cd	89 45 e8	 mov	 DWORD PTR __Next1$4[ebp], eax
$LN7@Insertion_:
  000d0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000d3	83 e8 64	 sub	 eax, 100		; 00000064H
  000d6	89 45 80	 mov	 DWORD PTR __First1$2[ebp], eax
  000d9	8b 4d 80	 mov	 ecx, DWORD PTR __First1$2[ebp]
  000dc	51		 push	 ecx
  000dd	8d 55 84	 lea	 edx, DWORD PTR __Val$3[ebp]
  000e0	52		 push	 edx
  000e1	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e4	e8 00 00 00 00	 call	 ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ; CIniFile::DescendingSectionSort::operator()
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	74 17		 je	 SHORT $LN6@Insertion_

; 3991 :                     *_Next1 = _STD move(*_First1); // move hole down

  000f0	8b 45 80	 mov	 eax, DWORD PTR __First1$2[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000f9	83 c4 04	 add	 esp, 4
  000fc	50		 push	 eax
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00100	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 3992 :                 }

  00105	eb c3		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:

; 3993 : 
; 3994 :                 *_Next1 = _STD move(_Val); // insert element in hole

  00107	8d 45 84	 lea	 eax, DWORD PTR __Val$3[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00110	83 c4 04	 add	 esp, 4
  00113	50		 push	 eax
  00114	8b 4d e8	 mov	 ecx, DWORD PTR __Next1$4[ebp]
  00117	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z
$LN10@Insertion_:

; 3995 :             }
; 3996 :         }

  0011c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00123	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00126	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  0012b	e9 10 ff ff ff	 jmp	 $LN4@Insertion_
$LN8@Insertion_:

; 3997 :     }
; 3998 : 
; 3999 :     return _Last;

  00130	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 4000 : }

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00144	33 cd		 xor	 ecx, ebp
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR __Val$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 3c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-196]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z ENDP ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 105  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  :             return _Ok;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 107  :         }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 103  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	0f b6 45 0c	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  00042	50		 push	 eax
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00048	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  0004d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00050	88 42 04	 mov	 BYTE PTR [edx+4], al
  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -88						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 88   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :             const auto _Rdbuf = _Myistr.rdbuf();

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 4d a8	 mov	 DWORD PTR tv72[ebp], ecx
  00033	8b 55 a8	 mov	 edx, DWORD PTR tv72[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d a8	 mov	 ecx, DWORD PTR tv72[ebp]
  0003b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0003e	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00043	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 90   :             if (_Rdbuf) {

  00046	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0004a	74 0d		 je	 SHORT $LN3@Sentry_bas

; 91   :                 _Rdbuf->_Unlock();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0004f	8b 10		 mov	 edx, DWORD PTR [eax]
  00051	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00054	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00057	ff d0		 call	 eax
$LN3@Sentry_bas:

; 92   :             }
; 93   :         }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Rdbuf$ = -8						; size = 4
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 81   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 82   :             const auto _Rdbuf = _Myistr.rdbuf();

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b4	 mov	 DWORD PTR tv73[ebp], ecx
  0001c	8b 55 b4	 mov	 edx, DWORD PTR tv73[ebp]
  0001f	8b 02		 mov	 eax, DWORD PTR [edx]
  00021	8b 4d b4	 mov	 ecx, DWORD PTR tv73[ebp]
  00024	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00027	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0002c	89 45 f8	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 83   :             if (_Rdbuf) {

  0002f	83 7d f8 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00033	74 0d		 je	 SHORT $LN1@Sentry_bas

; 84   :                 _Rdbuf->_Lock();

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	ff d0		 call	 eax
$LN1@Sentry_bas:

; 85   :             }
; 86   :         }

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::codecvt<char,char,_Mbstatet>::id'', COMDAT

; 835  : __PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	6a 00		 push	 0
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<char,char,_Mbstatet>::id
  00010	e8 00 00 00 00	 call	 ??0id@locale@std@@QAE@I@Z ; std::locale::id::id
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::codecvt<char,char,_Mbstatet>::id''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0GE@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0GE@@std@@YAII@Z PROC		; std::_Get_size_of_n<100>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000d	c7 45 f8 28 5c
	8f 02		 mov	 DWORD PTR __Max_possible$1[ebp], 42949672 ; 028f5c28H

; 60   :         if (_Count > _Max_possible) {

  00014	81 7d 08 28 5c
	8f 02		 cmp	 DWORD PTR __Count$[ebp], 42949672 ; 028f5c28H
  0001b	76 05		 jbe	 SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0001d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00022	6b 45 08 64	 imul	 eax, DWORD PTR __Count$[ebp], 100
$LN3@Get_size_o:

; 66   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Get_size_of_n@$0GE@@std@@YAII@Z ENDP		; std::_Get_size_of_n<100>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 4
__Backout$3 = -32					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z PROC ; std::_Uninitialized_move<CIniFile::Record *,std::allocator<CIniFile::Record> >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);

  00028	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z ; std::_Get_unwrapped<CIniFile::Record * const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1652 :     const auto _ULast = _Get_unwrapped(_Last);

  00037	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAURecord@CIniFile@@@std@@YA@ABQAURecord@CIniFile@@@Z ; std::_Get_unwrapped<CIniFile::Record * const &>
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00046	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0004d	51		 push	 ecx
  0004e	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00051	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@PAURecord@CIniFile@@AAV?$allocator@URecord@CIniFile@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0005d	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  0005f	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	83 c0 64	 add	 eax, 100		; 00000064H
  00065	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00068	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0006b	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  0006e	74 17		 je	 SHORT $LN3@Uninitiali

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));

  00070	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00079	83 c4 04	 add	 esp, 4
  0007c	50		 push	 eax
  0007d	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00080	e8 00 00 00 00	 call	 ??$_Emplace_back@URecord@CIniFile@@@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEX$$QAURecord@CIniFile@@@Z ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Emplace_back<CIniFile::Record>

; 1661 :         }

  00085	eb d8		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1662 : 
; 1663 :         return _Backout._Release();

  00087	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@XZ ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::_Release
  0008f	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::~_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
  000a1	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]

; 1664 :     }
; 1665 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CIniFile::Record> >::~_Uninitialized_backout_al<std::allocator<CIniFile::Record> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ENDP ; std::_Uninitialized_move<CIniFile::Record *,std::allocator<CIniFile::Record> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000d	c7 45 f8 aa aa
	aa 0a		 mov	 DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 60   :         if (_Count > _Max_possible) {

  00014	81 7d 08 aa aa
	aa 0a		 cmp	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH
  0001b	76 05		 jbe	 SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0001d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00022	6b 45 08 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
$LN3@Get_size_o:

; 66   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 4
__Backout$3 = -32					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1647 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1648 :     // move [_First, _Last) to raw _Dest, using _Al
; 1649 :     // note: only called internally from elsewhere in the STL
; 1650 :     using _Ptrval     = typename _Alloc::value_type*;
; 1651 :     auto _UFirst      = _Get_unwrapped(_First);

  00028	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1652 :     const auto _ULast = _Get_unwrapped(_Last);

  00037	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * const &>
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1653 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1654 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1655 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1656 :         return _Dest + (_ULast - _UFirst);
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00046	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0004d	51		 push	 ecx
  0004e	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00051	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {

  0005d	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  0005f	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	83 c0 18	 add	 eax, 24			; 00000018H
  00065	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00068	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0006b	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  0006e	74 17		 je	 SHORT $LN3@Uninitiali

; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));

  00070	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00079	83 c4 04	 add	 esp, 4
  0007c	50		 push	 eax
  0007d	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00080	e8 00 00 00 00	 call	 ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1661 :         }

  00085	eb d8		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1662 : 
; 1663 :         return _Backout._Release();

  00087	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
  0008f	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000a1	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]

; 1664 :     }
; 1665 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 698  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 699  :         _Ptr->~_Uty();

  00009	6a 00		 push	 0
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z

; 700  :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__End$2 = -4						; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<char> >, COMDAT

; 763  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 764  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 765  :     // general algorithm
; 766  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00009	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0000f	73 47		 jae	 SHORT $LN5@Traits_fin

; 767  :         const auto _End = _Haystack + _Hay_size;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00014	03 45 0c	 add	 eax, DWORD PTR __Hay_size$[ebp]
  00017	89 45 fc	 mov	 DWORD PTR __End$2[ebp], eax

; 768  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0001a	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  0001d	03 45 10	 add	 eax, DWORD PTR __Start_at$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
  00023	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00025	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
$LN4@Traits_fin:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00031	3b 45 fc	 cmp	 eax, DWORD PTR __End$2[ebp]
  00034	73 22		 jae	 SHORT $LN5@Traits_fin

; 769  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	85 c0		 test	 eax, eax
  0004c	75 08		 jne	 SHORT $LN6@Traits_fin

; 770  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00051	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00054	eb 05		 jmp	 SHORT $LN7@Traits_fin
$LN6@Traits_fin:

; 771  :             }
; 772  :         }

  00056	eb cd		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 773  :     }
; 774  : 
; 775  :     return static_cast<size_t>(-1); // no match

  00058	83 c8 ff	 or	 eax, -1
$LN7@Traits_fin:

; 776  : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
__Match_try$2 = -4					; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<char> >, COMDAT

; 822  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 823  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 824  :     // general algorithm
; 825  :     if (_Hay_size != 0) { // worth searching, do it

  00009	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  0000d	74 58		 je	 SHORT $LN5@Traits_fin

; 826  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  00012	83 e8 01	 sub	 eax, 1
  00015	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 10	 lea	 edx, DWORD PTR __Start_at$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00025	83 c4 08	 add	 esp, 8
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  0002b	03 08		 add	 ecx, DWORD PTR [eax]
  0002d	89 4d fc	 mov	 DWORD PTR __Match_try$2[ebp], ecx
  00030	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00032	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	89 45 fc	 mov	 DWORD PTR __Match_try$2[ebp], eax
$LN4@Traits_fin:

; 827  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	85 c0		 test	 eax, eax
  00051	75 08		 jne	 SHORT $LN6@Traits_fin

; 828  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00053	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00056	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00059	eb 0f		 jmp	 SHORT $LN8@Traits_fin
$LN6@Traits_fin:

; 829  :             }
; 830  : 
; 831  :             if (_Match_try == _Haystack) {

  0005b	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  0005e	3b 45 08	 cmp	 eax, DWORD PTR __Haystack$[ebp]
  00061	75 02		 jne	 SHORT $LN7@Traits_fin

; 832  :                 break; // at beginning, no more chance for match

  00063	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN7@Traits_fin:

; 833  :             }
; 834  :         }

  00065	eb cb		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 835  :     }
; 836  : 
; 837  :     return static_cast<size_t>(-1); // no match

  00067	83 c8 ff	 or	 eax, -1
$LN8@Traits_fin:

; 838  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_String_bitmap@D$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_bitmap@D$00@std@@QAE@XZ PROC		; std::_String_bitmap<char,1>::_String_bitmap<char,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _memset
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$_String_bitmap@D$00@std@@QAE@XZ ENDP		; std::_String_bitmap<char,1>::_String_bitmap<char,1>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z PROC	; std::_String_bitmap<char,1>::_Match, COMDAT
; _this$ = ecx

; 632  :     constexpr bool _Match(const _Elem _Ch) const { // test if _Ch is in the bitmap

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 633  :         return _Matches[static_cast<unsigned char>(_Ch)];

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 634  :     }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ENDP	; std::_String_bitmap<char,1>::_Match
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z PROC	; std::_String_bitmap<char,1>::_Mark, COMDAT
; _this$ = ecx

; 622  :     constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 623  :         // mark this bitmap such that the characters in [_First, _Last) are intended to match
; 624  :         // returns whether all inputs can be placed in the bitmap
; 625  :         for (; _First != _Last; ++_First) {

  0000c	eb 09		 jmp	 SHORT $LN4@Mark
$LN2@Mark:
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	83 c0 01	 add	 eax, 1
  00014	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Mark:
  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001d	74 0f		 je	 SHORT $LN3@Mark

; 626  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  0001f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00022	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c6 04 0a 01	 mov	 BYTE PTR [edx+ecx], 1

; 627  :         }

  0002c	eb e0		 jmp	 SHORT $LN2@Mark
$LN3@Mark:

; 628  : 
; 629  :         return true;

  0002e	b0 01		 mov	 al, 1

; 630  :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ENDP	; std::_String_bitmap<char,1>::_Mark
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@V?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z PROC ; std::forward<std::allocator<CIniFile::Record> >, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z PROC ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>, COMDAT

; 4432 : _CONSTEXPR20 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Move_backw:

; 4433 :     // move [_First, _Last) backwards to [..., _Dest)
; 4434 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4435 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4436 : #ifdef __cpp_lib_is_constant_evaluated
; 4437 :         if (!_STD is_constant_evaluated())
; 4438 : #endif // __cpp_lib_is_constant_evaluated
; 4439 :         {
; 4440 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4441 :         }
; 4442 :     }
; 4443 : 
; 4444 :     while (_First != _Last) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000f	74 29		 je	 SHORT $LN3@Move_backw

; 4445 :         *--_Dest = _STD move(*--_Last);

  00011	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00014	83 e8 64	 sub	 eax, 100		; 00000064H
  00017	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001d	83 e9 64	 sub	 ecx, 100		; 00000064H
  00020	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00023	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00033	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 4446 :     }

  00038	eb cf		 jmp	 SHORT $LN2@Move_backw
$LN3@Move_backw:

; 4447 : 
; 4448 :     return _Dest;

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 4449 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ENDP ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record>, COMDAT

; 693  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 64		 push	 100			; 00000064H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@URecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::forward<CIniFile::Record>
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@$$QAU01@@Z

; 695  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z PROC ; std::addressof<CIniFile::Record>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z ENDP ; std::addressof<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0ABURecord@CIniFile@@@?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@AAV?$allocator@URecord@CIniFile@@@1@ABURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
_<_Vals_0>$ = 12					; size = 4
??$?0ABURecord@CIniFile@@@?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@AAV?$allocator@URecord@CIniFile@@@1@ABURecord@CIniFile@@@Z PROC ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::_Alloc_temporary<std::allocator<CIniFile::Record> ><CIniFile::Record const &>, COMDAT
; _this$ = ecx

; 1986 :         : _Al(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 1987 :         _Traits::construct(_Al, _STD addressof(_Storage._Value), _STD forward<_Args>(_Vals)...);

  00014	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z ; std::addressof<CIniFile::Record>
  0002d	83 c4 04	 add	 esp, 4
  00030	50		 push	 eax
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1988 :     }

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$?0ABURecord@CIniFile@@@?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@AAV?$allocator@URecord@CIniFile@@@1@ABURecord@CIniFile@@@Z ENDP ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::_Alloc_temporary<std::allocator<CIniFile::Record> ><CIniFile::Record const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::~_Alloc_temporary<std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 1993 :     ~_Alloc_temporary() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1994 :         _Traits::destroy(_Al, _STD addressof(_Storage._Value));

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 04	 add	 eax, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$addressof@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@AAU12@@Z ; std::addressof<CIniFile::Record>
  00037	83 c4 04	 add	 esp, 4
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>
  00046	83 c4 08	 add	 esp, 8

; 1995 :     }

  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
  0005e	cc		 int	 3
  0005f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::~_Alloc_temporary<std::allocator<CIniFile::Record> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z PROC ; std::move<CIniFile::Record &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ENDP ; std::move<CIniFile::Record &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z PROC ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	7f 1a		 jg	 SHORT $LN5@Sort_unche

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  0001c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingRecordSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4109 :             return;

  00031	e9 c5 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00036	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0003a	7f 2f		 jg	 SHORT $LN6@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);

  0003c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00051	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingRecordSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4115 :             return;

  00066	e9 90 00 00 00	 jmp	 $LN1@Sort_unche
$LN6@Sort_unche:

; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0006b	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00077	52		 push	 edx
  00078	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingRecordSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00081	83 c4 10	 add	 esp, 16			; 00000010H

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00084	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  00087	d1 f8		 sar	 eax, 1
  00089	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  0008c	c1 f9 02	 sar	 ecx, 2
  0008f	03 c1		 add	 eax, ecx
  00091	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00094	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00097	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0009a	99		 cdq
  0009b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a0	f7 f9		 idiv	 ecx
  000a2	8b c8		 mov	 ecx, eax
  000a4	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000a7	2b 45 fc	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000aa	99		 cdq
  000ab	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  000b0	f7 fe		 idiv	 esi
  000b2	3b c8		 cmp	 ecx, eax
  000b4	7d 21		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000b6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 4125 :             _First = _Mid.second;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000d2	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 4126 :         } else { // loop on first half

  000d5	eb 1f		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000d7	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 4128 :             _Last = _Mid.first;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000f3	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 4129 :         }
; 4130 :     }

  000f6	e9 0e ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 4131 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z ENDP ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Pass_fn@UAscendingRecordSort@CIniFile@@$0A@@std@@YA?AUAscendingRecordSort@CIniFile@@U12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@UAscendingRecordSort@CIniFile@@$0A@@std@@YA?AUAscendingRecordSort@CIniFile@@U12@@Z PROC ; std::_Pass_fn<CIniFile::AscendingRecordSort,0>, COMDAT

; 205  : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  :     return _Val;

  00009	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 207  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Pass_fn@UAscendingRecordSort@CIniFile@@$0A@@std@@YA?AUAscendingRecordSort@CIniFile@@U12@@Z ENDP ; std::_Pass_fn<CIniFile::AscendingRecordSort,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z PROC ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	7f 1a		 jg	 SHORT $LN5@Sort_unche

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  0001c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingRecordSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4109 :             return;

  00031	e9 c5 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00036	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0003a	7f 2f		 jg	 SHORT $LN6@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);

  0003c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00051	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingRecordSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4115 :             return;

  00066	e9 90 00 00 00	 jmp	 $LN1@Sort_unche
$LN6@Sort_unche:

; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0006b	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00077	52		 push	 edx
  00078	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingRecordSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00081	83 c4 10	 add	 esp, 16			; 00000010H

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00084	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  00087	d1 f8		 sar	 eax, 1
  00089	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  0008c	c1 f9 02	 sar	 ecx, 2
  0008f	03 c1		 add	 eax, ecx
  00091	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00094	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00097	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0009a	99		 cdq
  0009b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a0	f7 f9		 idiv	 ecx
  000a2	8b c8		 mov	 ecx, eax
  000a4	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000a7	2b 45 fc	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000aa	99		 cdq
  000ab	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  000b0	f7 fe		 idiv	 esi
  000b2	3b c8		 cmp	 ecx, eax
  000b4	7d 21		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000b6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 4125 :             _First = _Mid.second;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000d2	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 4126 :         } else { // loop on first half

  000d5	eb 1f		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000d7	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 4128 :             _Last = _Mid.first;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000f3	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 4129 :         }
; 4130 :     }

  000f6	e9 0e ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 4131 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z ENDP ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Pass_fn@UDescendingRecordSort@CIniFile@@$0A@@std@@YA?AUDescendingRecordSort@CIniFile@@U12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@UDescendingRecordSort@CIniFile@@$0A@@std@@YA?AUDescendingRecordSort@CIniFile@@U12@@Z PROC ; std::_Pass_fn<CIniFile::DescendingRecordSort,0>, COMDAT

; 205  : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  :     return _Val;

  00009	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 207  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Pass_fn@UDescendingRecordSort@CIniFile@@$0A@@std@@YA?AUDescendingRecordSort@CIniFile@@U12@@Z ENDP ; std::_Pass_fn<CIniFile::DescendingRecordSort,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z PROC ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	7f 1a		 jg	 SHORT $LN5@Sort_unche

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  0001c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UAscendingSectionSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4109 :             return;

  00031	e9 c5 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00036	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0003a	7f 2f		 jg	 SHORT $LN6@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);

  0003c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00051	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UAscendingSectionSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4115 :             return;

  00066	e9 90 00 00 00	 jmp	 $LN1@Sort_unche
$LN6@Sort_unche:

; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0006b	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00077	52		 push	 edx
  00078	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UAscendingSectionSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00081	83 c4 10	 add	 esp, 16			; 00000010H

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00084	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  00087	d1 f8		 sar	 eax, 1
  00089	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  0008c	c1 f9 02	 sar	 ecx, 2
  0008f	03 c1		 add	 eax, ecx
  00091	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00094	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00097	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0009a	99		 cdq
  0009b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a0	f7 f9		 idiv	 ecx
  000a2	8b c8		 mov	 ecx, eax
  000a4	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000a7	2b 45 fc	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000aa	99		 cdq
  000ab	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  000b0	f7 fe		 idiv	 esi
  000b2	3b c8		 cmp	 ecx, eax
  000b4	7d 21		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000b6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 4125 :             _First = _Mid.second;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000d2	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 4126 :         } else { // loop on first half

  000d5	eb 1f		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000d7	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 4128 :             _Last = _Mid.first;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000f3	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 4129 :         }
; 4130 :     }

  000f6	e9 0e ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 4131 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z ENDP ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Pass_fn@UAscendingSectionSort@CIniFile@@$0A@@std@@YA?AUAscendingSectionSort@CIniFile@@U12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@UAscendingSectionSort@CIniFile@@$0A@@std@@YA?AUAscendingSectionSort@CIniFile@@U12@@Z PROC ; std::_Pass_fn<CIniFile::AscendingSectionSort,0>, COMDAT

; 205  : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  :     return _Val;

  00009	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 207  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Pass_fn@UAscendingSectionSort@CIniFile@@$0A@@std@@YA?AUAscendingSectionSort@CIniFile@@U12@@Z ENDP ; std::_Pass_fn<CIniFile::AscendingSectionSort,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z PROC ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>, COMDAT

; 4104 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@Sort_unche:

; 4105 :     // order [_First, _Last), using _Pred
; 4106 :     for (;;) {
; 4107 :         if (_Last - _First <= _ISORT_MAX) { // small

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000f	99		 cdq
  00010	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	7f 1a		 jg	 SHORT $LN5@Sort_unche

; 4108 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  0001c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAPAURecord@CIniFile@@PAU12@QAU12@UDescendingSectionSort@2@@Z ; std::_Insertion_sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4109 :             return;

  00031	e9 c5 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 4110 :         }
; 4111 : 
; 4112 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00036	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0003a	7f 2f		 jg	 SHORT $LN6@Sort_unche

; 4113 :             _Make_heap_unchecked(_First, _Last, _Pred);

  0003c	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Make_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4114 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00051	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??$_Sort_heap_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0UDescendingSectionSort@2@@Z ; std::_Sort_heap_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4115 :             return;

  00066	e9 90 00 00 00	 jmp	 $LN1@Sort_unche
$LN6@Sort_unche:

; 4116 :         }
; 4117 : 
; 4118 :         // divide and conquer by quicksort
; 4119 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0006b	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00077	52		 push	 edx
  00078	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YA?AU?$pair@PAURecord@CIniFile@@PAU12@@0@PAURecord@CIniFile@@0UDescendingSectionSort@3@@Z ; std::_Partition_by_median_guess_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00081	83 c4 10	 add	 esp, 16			; 00000010H

; 4120 : 
; 4121 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00084	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  00087	d1 f8		 sar	 eax, 1
  00089	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  0008c	c1 f9 02	 sar	 ecx, 2
  0008f	03 c1		 add	 eax, ecx
  00091	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 4122 : 
; 4123 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00094	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00097	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0009a	99		 cdq
  0009b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a0	f7 f9		 idiv	 ecx
  000a2	8b c8		 mov	 ecx, eax
  000a4	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000a7	2b 45 fc	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000aa	99		 cdq
  000ab	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  000b0	f7 fe		 idiv	 esi
  000b2	3b c8		 cmp	 ecx, eax
  000b4	7d 21		 jge	 SHORT $LN7@Sort_unche

; 4124 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000b6	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 4125 :             _First = _Mid.second;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000d2	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 4126 :         } else { // loop on first half

  000d5	eb 1f		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 4127 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000d7	0f b6 45 14	 movzx	 eax, BYTE PTR __Pred$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 4128 :             _Last = _Mid.first;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000f3	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 4129 :         }
; 4130 :     }

  000f6	e9 0e ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 4131 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z ENDP ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Pass_fn@UDescendingSectionSort@CIniFile@@$0A@@std@@YA?AUDescendingSectionSort@CIniFile@@U12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@UDescendingSectionSort@CIniFile@@$0A@@std@@YA?AUDescendingSectionSort@CIniFile@@U12@@Z PROC ; std::_Pass_fn<CIniFile::DescendingSectionSort,0>, COMDAT

; 205  : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 206  :     return _Val;

  00009	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 207  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Pass_fn@UDescendingSectionSort@CIniFile@@$0A@@std@@YA?AUDescendingSectionSort@CIniFile@@U12@@Z ENDP ; std::_Pass_fn<CIniFile::DescendingSectionSort,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z PROC ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::Record * &>, COMDAT

; 1417 : constexpr void _Seek_wrapped(_Iter& _It, _UIter&& _UIt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1418 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1419 :         _It._Seek_to(static_cast<_UIter&&>(_UIt));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __UIt$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEXPBURecord@CIniFile@@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Seek_to

; 1420 :     } else {
; 1421 :         _It = static_cast<_UIter&&>(_UIt);
; 1422 :     }
; 1423 : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z ENDP ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::Record * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>, COMDAT

; 1229 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1230 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1231 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1232 :         return _It + 0;
; 1233 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1234 :         return static_cast<_Iter&&>(_It)._Unwrapped();

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Unwrapped

; 1235 :     } else {
; 1236 :         return static_cast<_Iter&&>(_It);
; 1237 :     }
; 1238 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > &>, COMDAT

; 1229 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1230 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1231 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1232 :         return _It + 0;
; 1233 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1234 :         return static_cast<_Iter&&>(_It)._Unwrapped();

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Unwrapped

; 1235 :     } else {
; 1236 :         return static_cast<_Iter&&>(_It);
; 1237 :     }
; 1238 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >, COMDAT

; 1192 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1193 :     // check that [_First, _Last) forms an iterator range
; 1194 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1195 :         _Verify_range(_First, _Last);
; 1196 :     }
; 1197 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv386 = -136						; size = 8
tv289 = -128						; size = 4
tv286 = -128						; size = 8
tv284 = -128						; size = 4
tv321 = -124						; size = 8
tv288 = -124						; size = 4
tv283 = -124						; size = 4
tv285 = -120						; size = 4
tv135 = -120						; size = 4
tv287 = -117						; size = 1
tv282 = -117						; size = 1
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 423  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 78	 sub	 esp, 120		; 00000078H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 424  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 425  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 426  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 427  : 
; 428  :     _SizeT _Pad;
; 429  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00033	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0003b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0003e	8b ca		 mov	 ecx, edx
  00040	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  00045	89 45 84	 mov	 DWORD PTR tv321[ebp], eax
  00048	89 55 88	 mov	 DWORD PTR tv321[ebp+4], edx
  0004b	83 7d 88 00	 cmp	 DWORD PTR tv321[ebp+4], 0
  0004f	7c 1f		 jl	 SHORT $LN10@Insert_str
  00051	7f 06		 jg	 SHORT $LN25@Insert_str
  00053	83 7d 84 00	 cmp	 DWORD PTR tv321[ebp], 0
  00057	76 17		 jbe	 SHORT $LN10@Insert_str
$LN25@Insert_str:
  00059	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00061	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00064	8b ca		 mov	 ecx, edx
  00066	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  0006b	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  0006e	77 09		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 430  :         _Pad = 0;

  00070	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Pad$[ebp], 0

; 431  :     } else {

  00077	eb 18		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 432  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  00079	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00081	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00084	8b ca		 mov	 ecx, edx
  00086	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  0008b	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  0008e	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN9@Insert_str:

; 433  :     }
; 434  : 
; 435  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	50		 push	 eax
  00095	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00098	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 436  : 
; 437  :     if (!_Ok) {

  000a4	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a7	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000ac	0f b6 c0	 movzx	 eax, al
  000af	85 c0		 test	 eax, eax
  000b1	75 0e		 jne	 SHORT $LN11@Insert_str

; 438  :         _State |= _Ostr_t::badbit;

  000b3	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000b6	83 c8 04	 or	 eax, 4
  000b9	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 439  :     } else { // state okay, insert characters

  000bc	e9 ca 01 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 440  :         _TRY_IO_BEGIN

  000c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 441  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d0	8b ca		 mov	 ecx, edx
  000d2	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  000d7	89 45 88	 mov	 DWORD PTR tv135[ebp], eax
  000da	8b 45 88	 mov	 eax, DWORD PTR tv135[ebp]
  000dd	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000e2	83 f8 40	 cmp	 eax, 64			; 00000040H
  000e5	74 7d		 je	 SHORT $LN14@Insert_str

; 442  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000e7	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  000e9	8b 45 e8	 mov	 eax, DWORD PTR __Pad$[ebp]
  000ec	83 e8 01	 sub	 eax, 1
  000ef	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  000f2	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  000f6	76 6c		 jbe	 SHORT $LN14@Insert_str

; 443  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000f8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00100	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00103	8b ca		 mov	 ecx, edx
  00105	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  0010a	88 45 8b	 mov	 BYTE PTR tv282[ebp], al
  0010d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00115	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00118	8b ca		 mov	 ecx, edx
  0011a	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0011f	89 45 84	 mov	 DWORD PTR tv283[ebp], eax
  00122	0f b6 45 8b	 movzx	 eax, BYTE PTR tv282[ebp]
  00126	50		 push	 eax
  00127	8b 4d 84	 mov	 ecx, DWORD PTR tv283[ebp]
  0012a	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0012f	89 45 80	 mov	 DWORD PTR tv284[ebp], eax
  00132	8b 4d 80	 mov	 ecx, DWORD PTR tv284[ebp]
  00135	89 4d 9c	 mov	 DWORD PTR $T6[ebp], ecx
  00138	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0013d	89 45 98	 mov	 DWORD PTR $T5[ebp], eax
  00140	8d 55 9c	 lea	 edx, DWORD PTR $T6[ebp]
  00143	52		 push	 edx
  00144	8d 45 98	 lea	 eax, DWORD PTR $T5[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0014d	83 c4 08	 add	 esp, 8
  00150	0f b6 c8	 movzx	 ecx, al
  00153	85 c9		 test	 ecx, ecx
  00155	74 0b		 je	 SHORT $LN15@Insert_str

; 444  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  00157	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0015a	83 c8 04	 or	 eax, 4
  0015d	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 445  :                     break;

  00160	eb 02		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 446  :                 }
; 447  :             }

  00162	eb 85		 jmp	 SHORT $LN2@Insert_str
$LN14@Insert_str:

; 448  :         }
; 449  : 
; 450  :         if (_State == _Ostr_t::goodbit
; 451  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00164	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00168	75 60		 jne	 SHORT $LN16@Insert_str
  0016a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0016d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00172	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00175	8b ca		 mov	 ecx, edx
  00177	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0017c	89 45 88	 mov	 DWORD PTR tv285[ebp], eax
  0017f	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00182	33 c9		 xor	 ecx, ecx
  00184	51		 push	 ecx
  00185	50		 push	 eax
  00186	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  00189	52		 push	 edx
  0018a	8b 4d 88	 mov	 ecx, DWORD PTR tv285[ebp]
  0018d	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00192	89 45 80	 mov	 DWORD PTR tv286[ebp], eax
  00195	89 55 84	 mov	 DWORD PTR tv286[ebp+4], edx
  00198	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0019b	33 c9		 xor	 ecx, ecx
  0019d	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv386[ebp], eax
  001a3	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv386[ebp+4], ecx
  001a9	8b 55 80	 mov	 edx, DWORD PTR tv286[ebp]
  001ac	3b 95 78 ff ff
	ff		 cmp	 edx, DWORD PTR tv386[ebp]
  001b2	75 0b		 jne	 SHORT $LN26@Insert_str
  001b4	8b 45 84	 mov	 eax, DWORD PTR tv286[ebp+4]
  001b7	3b 85 7c ff ff
	ff		 cmp	 eax, DWORD PTR tv386[ebp+4]
  001bd	74 0b		 je	 SHORT $LN16@Insert_str
$LN26@Insert_str:

; 452  :             _State |= _Ostr_t::badbit;

  001bf	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001c2	83 c8 04	 or	 eax, 4
  001c5	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 453  :         } else {

  001c8	eb 7d		 jmp	 SHORT $LN17@Insert_str
$LN16@Insert_str:

; 454  :             for (; 0 < _Pad; --_Pad) { // pad on right

  001ca	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  001cc	8b 45 e8	 mov	 eax, DWORD PTR __Pad$[ebp]
  001cf	83 e8 01	 sub	 eax, 1
  001d2	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  001d5	83 7d e8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001d9	76 6c		 jbe	 SHORT $LN17@Insert_str

; 455  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001db	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001de	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e6	8b ca		 mov	 ecx, edx
  001e8	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  001ed	88 45 8b	 mov	 BYTE PTR tv287[ebp], al
  001f0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001f8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001fb	8b ca		 mov	 ecx, edx
  001fd	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00202	89 45 84	 mov	 DWORD PTR tv288[ebp], eax
  00205	0f b6 45 8b	 movzx	 eax, BYTE PTR tv287[ebp]
  00209	50		 push	 eax
  0020a	8b 4d 84	 mov	 ecx, DWORD PTR tv288[ebp]
  0020d	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00212	89 45 80	 mov	 DWORD PTR tv289[ebp], eax
  00215	8b 4d 80	 mov	 ecx, DWORD PTR tv289[ebp]
  00218	89 4d 94	 mov	 DWORD PTR $T4[ebp], ecx
  0021b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00220	89 45 90	 mov	 DWORD PTR $T3[ebp], eax
  00223	8d 55 94	 lea	 edx, DWORD PTR $T4[ebp]
  00226	52		 push	 edx
  00227	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00230	83 c4 08	 add	 esp, 8
  00233	0f b6 c8	 movzx	 ecx, al
  00236	85 c9		 test	 ecx, ecx
  00238	74 0b		 je	 SHORT $LN18@Insert_str

; 456  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  0023a	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0023d	83 c8 04	 or	 eax, 4
  00240	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 457  :                     break;

  00243	eb 02		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 458  :                 }
; 459  :             }

  00245	eb 85		 jmp	 SHORT $LN5@Insert_str
$LN17@Insert_str:

; 460  :         }
; 461  : 
; 462  :         _Ostr.width(0);

  00247	6a 00		 push	 0
  00249	6a 00		 push	 0
  0024b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0024e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00250	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00253	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00256	8b ca		 mov	 ecx, edx
  00258	e8 00 00 00 00	 call	 ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width
  0025d	eb 1c		 jmp	 SHORT $LN20@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 463  :         _CATCH_IO_(_Ostr_t, _Ostr)

  0025f	6a 01		 push	 1
  00261	6a 04		 push	 4
  00263	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00266	8b 08		 mov	 ecx, DWORD PTR [eax]
  00268	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0026b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0026e	8b ca		 mov	 ecx, edx
  00270	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00275	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  0027a	c3		 ret	 0
$LN20@Insert_str:
  0027b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00282	eb 07		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
  00284	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@Insert_str:

; 464  :     }
; 465  : 
; 466  :     _Ostr.setstate(_State);

  0028b	6a 00		 push	 0
  0028d	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00290	50		 push	 eax
  00291	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00294	8b 11		 mov	 edx, DWORD PTR [ecx]
  00296	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00299	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0029c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 467  :     return _Ostr;

  002a1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002a4	89 45 8c	 mov	 DWORD PTR $T2[ebp], eax
  002a7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002ae	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002b1	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  002b6	8b 45 8c	 mov	 eax, DWORD PTR $T2[ebp]

; 468  : }

  002b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c3	59		 pop	 ecx
  002c4	5f		 pop	 edi
  002c5	5e		 pop	 esi
  002c6	5b		 pop	 ebx
  002c7	8b e5		 mov	 esp, ebp
  002c9	5d		 pop	 ebp
  002ca	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :             return _Ok;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 127  :         }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -82						; size = 1
__Zero_uncaught_exceptions$ = -17			; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0002b	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00030	0f b6 c0	 movzx	 eax, al
  00033	85 c0		 test	 eax, eax
  00035	75 06		 jne	 SHORT $LN4@sentry
  00037	c6 45 ae 01	 mov	 BYTE PTR tv72[ebp], 1
  0003b	eb 04		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0003d	c6 45 ae 00	 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00041	8a 4d ae	 mov	 cl, BYTE PTR tv72[ebp]
  00044	88 4d ef	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  00047	0f b6 45 ef	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 0a		 je	 SHORT $LN1@sentry

; 120  :                 this->_Myostr._Osfx();

  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry:

; 121  :             }
; 122  :         }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
  00077	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00046	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00049	8b ca		 mov	 ecx, edx
  0004b	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00050	0f b6 c0	 movzx	 eax, al
  00053	85 c0		 test	 eax, eax
  00055	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  0005e	eb 4c		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00060	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00068	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006b	8b ca		 mov	 ecx, edx
  0006d	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00072	89 45 ec	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00075	83 7d ec 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  00079	74 08		 je	 SHORT $LN4@sentry
  0007b	8b 45 ec	 mov	 eax, DWORD PTR __Tied$[ebp]
  0007e	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  00081	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  00083	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00086	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  0008a	eb 20		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  0008c	8b 4d ec	 mov	 ecx, DWORD PTR __Tied$[ebp]
  0008f	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00094	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0009c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009f	8b ca		 mov	 ecx, edx
  000a1	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c0	59		 pop	 ecx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -88						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 4d a8	 mov	 DWORD PTR tv72[ebp], ecx
  00033	8b 55 a8	 mov	 edx, DWORD PTR tv72[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d a8	 mov	 ecx, DWORD PTR tv72[ebp]
  0003b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0003e	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00043	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  00046	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0004a	74 0d		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0004f	8b 10		 mov	 edx, DWORD PTR [eax]
  00051	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00054	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00057	ff d0		 call	 eax
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -76						; size = 4
__Rdbuf$ = -8						; size = 4
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b4	 mov	 DWORD PTR tv73[ebp], ecx
  0001c	8b 55 b4	 mov	 edx, DWORD PTR tv73[ebp]
  0001f	8b 02		 mov	 eax, DWORD PTR [edx]
  00021	8b 4d b4	 mov	 ecx, DWORD PTR tv73[ebp]
  00024	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00027	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0002c	89 45 f8	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  0002f	83 7d f8 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00033	74 0d		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	ff d0		 call	 eax
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@$$CBD@std@@YAPBDABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBD@std@@YAPBDABD@Z PROC			; std::addressof<char const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBD@std@@YAPBDABD@Z ENDP			; std::addressof<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv201 = -120						; size = 4
tv199 = -120						; size = 4
tv202 = -116						; size = 4
tv200 = -116						; size = 4
tv65 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
__Meta$4 = -40						; size = 4
__Metadelim$5 = -36					; size = 4
__Ok$ = -32						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 29   :     const _Elem _Delim) { // get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 68	 sub	 esp, 104		; 00000068H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 30   :     using _Myis = basic_istream<_Elem, _Traits>;
; 31   : 
; 32   :     typename _Myis::iostate _State = _Myis::goodbit;

  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 33   :     bool _Changed                  = false;

  00033	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 34   :     const typename _Myis::sentry _Ok(_Istr, true);

  00037	6a 01		 push	 1
  00039	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0003c	50		 push	 eax
  0003d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00040	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 35   : 
; 36   :     if (_Ok) { // state okay, extract characters

  0004c	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0004f	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00054	0f b6 c0	 movzx	 eax, al
  00057	85 c0		 test	 eax, eax
  00059	0f 84 48 01 00
	00		 je	 $LN5@getline

; 37   :         _TRY_IO_BEGIN

  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 38   :         _Str.erase();

  00063	6a 00		 push	 0
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00068	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 39   :         const typename _Traits::int_type _Metadelim = _Traits::to_int_type(_Delim);

  0006d	8d 45 10	 lea	 eax, DWORD PTR __Delim$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00076	83 c4 04	 add	 esp, 4
  00079	89 45 dc	 mov	 DWORD PTR __Metadelim$5[ebp], eax

; 40   :         typename _Traits::int_type _Meta            = _Istr.rdbuf()->sgetc();

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00084	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00087	8b ca		 mov	 ecx, edx
  00089	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0008e	89 45 8c	 mov	 DWORD PTR tv65[ebp], eax
  00091	8b 4d 8c	 mov	 ecx, DWORD PTR tv65[ebp]
  00094	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  00099	89 45 88	 mov	 DWORD PTR tv199[ebp], eax
  0009c	8b 45 88	 mov	 eax, DWORD PTR tv199[ebp]
  0009f	89 45 d8	 mov	 DWORD PTR __Meta$4[ebp], eax

; 41   : 
; 42   :         for (;; _Meta = _Istr.rdbuf()->snextc()) {

  000a2	eb 26		 jmp	 SHORT $LN4@getline
$LN2@getline:
  000a4	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ac	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000af	8b ca		 mov	 ecx, edx
  000b1	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  000b6	89 45 8c	 mov	 DWORD PTR tv200[ebp], eax
  000b9	8b 4d 8c	 mov	 ecx, DWORD PTR tv200[ebp]
  000bc	e8 00 00 00 00	 call	 ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
  000c1	89 45 88	 mov	 DWORD PTR tv201[ebp], eax
  000c4	8b 45 88	 mov	 eax, DWORD PTR tv201[ebp]
  000c7	89 45 d8	 mov	 DWORD PTR __Meta$4[ebp], eax
$LN4@getline:

; 43   :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  000ca	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000cf	89 45 94	 mov	 DWORD PTR $T3[ebp], eax
  000d2	8d 45 d8	 lea	 eax, DWORD PTR __Meta$4[ebp]
  000d5	50		 push	 eax
  000d6	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000df	83 c4 08	 add	 esp, 8
  000e2	0f b6 d0	 movzx	 edx, al
  000e5	85 d2		 test	 edx, edx
  000e7	74 10		 je	 SHORT $LN7@getline

; 44   :                 _State |= _Myis::eofbit;

  000e9	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000ec	83 c8 01	 or	 eax, 1
  000ef	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 45   :                 break;

  000f2	e9 82 00 00 00	 jmp	 $LN3@getline
  000f7	eb 7b		 jmp	 SHORT $LN8@getline
$LN7@getline:

; 46   :             } else if (_Traits::eq_int_type(_Meta, _Metadelim)) { // got a delimiter, discard it and quit

  000f9	8d 45 dc	 lea	 eax, DWORD PTR __Metadelim$5[ebp]
  000fc	50		 push	 eax
  000fd	8d 4d d8	 lea	 ecx, DWORD PTR __Meta$4[ebp]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00106	83 c4 08	 add	 esp, 8
  00109	0f b6 d0	 movzx	 edx, al
  0010c	85 d2		 test	 edx, edx
  0010e	74 25		 je	 SHORT $LN9@getline

; 47   :                 _Changed = true;

  00110	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 48   :                 _Istr.rdbuf()->sbumpc();

  00114	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00117	8b 08		 mov	 ecx, DWORD PTR [eax]
  00119	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0011c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0011f	8b ca		 mov	 ecx, edx
  00121	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00126	89 45 8c	 mov	 DWORD PTR tv202[ebp], eax
  00129	8b 4d 8c	 mov	 ecx, DWORD PTR tv202[ebp]
  0012c	e8 00 00 00 00	 call	 ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc

; 49   :                 break;

  00131	eb 46		 jmp	 SHORT $LN3@getline
  00133	eb 3f		 jmp	 SHORT $LN8@getline
$LN9@getline:

; 50   :             } else if (_Str.max_size() <= _Str.size()) { // string too large, quit

  00135	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00138	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0013d	8b f0		 mov	 esi, eax
  0013f	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00142	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00147	3b c6		 cmp	 eax, esi
  00149	77 0d		 ja	 SHORT $LN11@getline

; 51   :                 _State |= _Myis::failbit;

  0014b	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0014e	83 c8 02	 or	 eax, 2
  00151	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 52   :                 break;

  00154	eb 23		 jmp	 SHORT $LN3@getline

; 53   :             } else { // got a character, add it to string

  00156	eb 1c		 jmp	 SHORT $LN8@getline
$LN11@getline:

; 54   :                 _Str += _Traits::to_char_type(_Meta);

  00158	8d 45 d8	 lea	 eax, DWORD PTR __Meta$4[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00161	83 c4 04	 add	 esp, 4
  00164	0f b6 c8	 movzx	 ecx, al
  00167	51		 push	 ecx
  00168	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0016b	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 55   :                 _Changed = true;

  00170	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN8@getline:

; 56   :             }
; 57   :         }

  00174	e9 2b ff ff ff	 jmp	 $LN2@getline
$LN3@getline:
  00179	eb 1c		 jmp	 SHORT $LN15@getline
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:

; 58   :         _CATCH_IO_(_Myis, _Istr)

  0017b	6a 01		 push	 1
  0017d	6a 04		 push	 4
  0017f	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00182	8b 08		 mov	 ecx, DWORD PTR [eax]
  00184	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00187	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018a	8b ca		 mov	 ecx, edx
  0018c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00191	b8 00 00 00 00	 mov	 eax, $LN19@getline
  00196	c3		 ret	 0
$LN15@getline:
  00197	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0019e	eb 07		 jmp	 SHORT $LN5@getline
$LN19@getline:
  001a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN5@getline:

; 59   :     }
; 60   : 
; 61   :     if (!_Changed) {

  001a7	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  001ab	85 c0		 test	 eax, eax
  001ad	75 09		 jne	 SHORT $LN13@getline

; 62   :         _State |= _Myis::failbit;

  001af	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001b2	83 c8 02	 or	 eax, 2
  001b5	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN13@getline:

; 63   :     }
; 64   : 
; 65   :     _Istr.setstate(_State);

  001b8	6a 00		 push	 0
  001ba	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c3	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001c6	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001c9	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 66   :     return _Istr;

  001ce	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001d1	89 45 90	 mov	 DWORD PTR $T2[ebp], eax
  001d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001db	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  001de	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  001e3	8b 45 90	 mov	 eax, DWORD PTR $T2[ebp]

; 67   : }

  001e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f0	59		 pop	 ecx
  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {

  00028	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  0002a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002d	83 c0 18	 add	 eax, 24			; 00000018H
  00030	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  00033	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00036	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00039	74 1b		 je	 SHORT $LN5@Destroy_ra

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  0003b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00051	83 c4 08	 add	 esp, 8

; 961  :         }

  00054	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 962  :     }
; 963  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 901  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 902  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 903  :         _Left = _STD move(_Right);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00012	83 c4 04	 add	 esp, 4

; 904  :     }
; 905  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 878  : void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 879  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 880  :         _Left = _Right;
; 881  :     }
; 882  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z
_TEXT	SEGMENT
__Old_ptr$1 = -40					; size = 4
__Raw_new$ = -36					; size = 4
__New_ptr$ = -32					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>, COMDAT
; _this$ = ecx

; 4244 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4245 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4246 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4247 :         auto& _My_data            = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00023	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00026	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00029	73 05		 jae	 SHORT $LN2@Reallocate

; 4250 :             _Xlen_string(); // result too long

  0002b	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00030	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00033	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00036	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00039	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003f	89 4d ec	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4255 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004e	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4256 :         auto& _Al                     = _Getal();

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00059	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0005c	8b 45 e8	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	50		 push	 eax
  00063	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00066	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0006b	89 45 e0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4258 :         _My_data._Orphan_all();

  0006e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 4259 :         _My_data._Mysize      = _New_size;

  00076	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4260 :         _My_data._Myres       = _New_capacity;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00082	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00085	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00088	8b 45 e0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00091	83 c4 04	 add	 esp, 4
  00094	89 45 dc	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00097	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009b	72 47		 jb	 SHORT $LN3@Reallocate

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009d	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	89 4d d8	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 4264 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000a5	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 d8	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b7	83 c4 04	 add	 esp, 4
  000ba	50		 push	 eax
  000bb	8b 45 dc	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000be	50		 push	 eax
  000bf	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000c2	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000c7	8b 45 ec	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000ca	83 c0 01	 add	 eax, 1
  000cd	50		 push	 eax
  000ce	8b 4d d8	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000d1	51		 push	 ecx
  000d2	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d5	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000da	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000dd	8b 4d e0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e0	89 08		 mov	 DWORD PTR [eax], ecx

; 4267 :         } else {

  000e2	eb 29		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4268 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000e4	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000ec	51		 push	 ecx
  000ed	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  000f0	52		 push	 edx
  000f1	8b 45 dc	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000f4	50		 push	 eax
  000f5	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f8	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fd	8d 45 e0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00100	50		 push	 eax
  00101	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0010a	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4270 :         }
; 4271 : 
; 4272 :         return *this;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4273 :     }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ch$ = 20						; size = 1
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z PROC ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator(), COMDAT
; _this$ = ecx

; 3619 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3620 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00020	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00027	03 4d 10	 add	 ecx, DWORD PTR __Old_size$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00030	83 c4 08	 add	 esp, 8

; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00033	c6 45 bb 00	 mov	 BYTE PTR $T1[ebp], 0
  00037	8d 45 bb	 lea	 eax, DWORD PTR $T1[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0003e	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00041	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0004b	83 c4 08	 add	 esp, 8

; 3623 :             },

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ENDP ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z PROC ; std::addressof<std::codecvt<char,char,_Mbstatet> const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ENDP ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CIniFile::Record> >, COMDAT

; 955  : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 956  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 957  :     using _Ty = typename _Alloc::value_type;
; 958  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 959  :         for (; _First != _Last; ++_First) {

  00028	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  0002a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002d	83 c0 64	 add	 eax, 100		; 00000064H
  00030	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  00033	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00036	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00039	74 1b		 je	 SHORT $LN5@Destroy_ra

; 960  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  0003b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>
  00051	83 c4 08	 add	 esp, 8

; 961  :         }

  00054	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 962  :     }
; 963  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CIniFile::Record> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z PROC			; std::_Unfancy<char const >, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ENDP			; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_find_ch@U?$char_traits@D@std@@@std@@YAIQBDIID@Z
_TEXT	SEGMENT
__Found_at$1 = -4					; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Ch$ = 20						; size = 1
??$_Traits_find_ch@U?$char_traits@D@std@@@std@@YAIQBDIID@Z PROC ; std::_Traits_find_ch<std::char_traits<char> >, COMDAT

; 564  :     const size_t _Start_at, const _Traits_ch_t<_Traits> _Ch) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 565  :     // search [_Haystack, _Haystack + _Hay_size) for _Ch, at/after _Start_at
; 566  :     if (_Start_at < _Hay_size) {

  00009	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0000f	73 2b		 jae	 SHORT $LN2@Traits_fin

; 567  :         const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);

  00011	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  00018	2b 4d 10	 sub	 ecx, DWORD PTR __Start_at$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  0001f	03 55 10	 add	 edx, DWORD PTR __Start_at$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	89 45 fc	 mov	 DWORD PTR __Found_at$1[ebp], eax

; 568  :         if (_Found_at) {

  0002e	83 7d fc 00	 cmp	 DWORD PTR __Found_at$1[ebp], 0
  00032	74 08		 je	 SHORT $LN2@Traits_fin

; 569  :             return static_cast<size_t>(_Found_at - _Haystack);

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Found_at$1[ebp]
  00037	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  0003a	eb 03		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:

; 570  :         }
; 571  :     }
; 572  : 
; 573  :     return static_cast<size_t>(-1); // (npos) no match

  0003c	83 c8 ff	 or	 eax, -1
$LN4@Traits_fin:

; 574  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Traits_find_ch@U?$char_traits@D@std@@@std@@YAIQBDIID@Z ENDP ; std::_Traits_find_ch<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -345						; size = 1
__Match_try$3 = -280					; size = 4
__End$4 = -276						; size = 4
__Matches$5 = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<char> >, COMDAT

; 781  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 782  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 783  :     // special case for std::char_traits
; 784  :     if (_Start_at < _Hay_size) { // room for match, look for it

  0002e	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00031	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  00034	0f 83 b6 00 00
	00		 jae	 $LN5@Traits_fin

; 785  :         _String_bitmap<typename _Traits::char_type> _Matches;

  0003a	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$_String_bitmap@D$00@std@@QAE@XZ

; 786  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00045	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00048	03 45 18	 add	 eax, DWORD PTR __Needle_size$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0004f	51		 push	 ecx
  00050	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00056	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  0005b	0f b6 d0	 movzx	 edx, al
  0005e	85 d2		 test	 edx, edx
  00060	75 2e		 jne	 SHORT $LN6@Traits_fin

; 787  :                                                                 // fall back to the serial algorithm
; 788  :             return _Traits_find_first_not_of<_Traits>(

  00062	33 c0		 xor	 eax, eax
  00064	88 85 a7 fe ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  0006a	0f b6 8d a7 fe
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00071	51		 push	 ecx
  00072	8b 55 18	 mov	 edx, DWORD PTR __Needle_size$[ebp]
  00075	52		 push	 edx
  00076	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  00081	52		 push	 edx
  00082	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
  0008b	83 c4 18	 add	 esp, 24			; 00000018H
  0008e	eb 63		 jmp	 SHORT $LN8@Traits_fin
$LN6@Traits_fin:

; 789  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 790  :         }
; 791  : 
; 792  :         const auto _End = _Haystack + _Hay_size;

  00090	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00093	03 45 0c	 add	 eax, DWORD PTR __Hay_size$[ebp]
  00096	89 85 ec fe ff
	ff		 mov	 DWORD PTR __End$4[ebp], eax

; 793  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0009c	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  0009f	03 45 10	 add	 eax, DWORD PTR __Start_at$[ebp]
  000a2	89 85 e8 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], eax
  000a8	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000aa	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000b0	83 c0 01	 add	 eax, 1
  000b3	89 85 e8 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], eax
$LN4@Traits_fin:
  000b9	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000bf	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR __End$4[ebp]
  000c5	73 29		 jae	 SHORT $LN5@Traits_fin

; 794  :             if (!_Matches._Match(*_Match_try)) {

  000c7	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000cd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000d0	51		 push	 ecx
  000d1	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ; std::_String_bitmap<char,1>::_Match
  000dc	0f b6 d0	 movzx	 edx, al
  000df	85 d2		 test	 edx, edx
  000e1	75 0b		 jne	 SHORT $LN7@Traits_fin

; 795  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000e3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000e9	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000ec	eb 05		 jmp	 SHORT $LN8@Traits_fin
$LN7@Traits_fin:

; 796  :             }
; 797  :         }

  000ee	eb ba		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 798  :     }
; 799  : 
; 800  :     return static_cast<size_t>(-1); // no match

  000f0	83 c8 ff	 or	 eax, -1
$LN8@Traits_fin:

; 801  : }

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
  0010f	cc		 int	 3
  00110	cc		 int	 3
  00111	cc		 int	 3
  00112	cc		 int	 3
  00113	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -348						; size = 4
$T3 = -341						; size = 1
__Match_try$4 = -276					; size = 4
__Matches$5 = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<char> >, COMDAT

; 843  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 844  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 845  :     // special case for std::char_traits
; 846  :     if (_Hay_size != 0) { // worth searching, do it

  0002e	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00032	0f 84 c7 00 00
	00		 je	 $LN5@Traits_fin

; 847  :         _String_bitmap<typename _Traits::char_type> _Matches;

  00038	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  0003e	e8 00 00 00 00	 call	 ??0?$_String_bitmap@D$00@std@@QAE@XZ

; 848  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00043	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00046	03 45 18	 add	 eax, DWORD PTR __Needle_size$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0004d	51		 push	 ecx
  0004e	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00054	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  00059	0f b6 d0	 movzx	 edx, al
  0005c	85 d2		 test	 edx, edx
  0005e	75 2e		 jne	 SHORT $LN6@Traits_fin

; 849  :                                                                 // fall back to the serial algorithm
; 850  :             return _Traits_find_last_not_of<_Traits>(

  00060	33 c0		 xor	 eax, eax
  00062	88 85 ab fe ff
	ff		 mov	 BYTE PTR $T3[ebp], al
  00068	0f b6 8d ab fe
	ff ff		 movzx	 ecx, BYTE PTR $T3[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 18	 mov	 edx, DWORD PTR __Needle_size$[ebp]
  00073	52		 push	 edx
  00074	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00077	50		 push	 eax
  00078	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
  00089	83 c4 18	 add	 esp, 24			; 00000018H
  0008c	eb 74		 jmp	 SHORT $LN9@Traits_fin
$LN6@Traits_fin:

; 851  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 852  :         }
; 853  : 
; 854  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  00091	83 e8 01	 sub	 eax, 1
  00094	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0009a	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000a0	51		 push	 ecx
  000a1	8d 55 10	 lea	 edx, DWORD PTR __Start_at$[ebp]
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  000aa	83 c4 08	 add	 esp, 8
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  000b0	03 08		 add	 ecx, DWORD PTR [eax]
  000b2	89 8d ec fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], ecx
  000b8	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000ba	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000c0	83 e8 01	 sub	 eax, 1
  000c3	89 85 ec fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], eax
$LN4@Traits_fin:

; 855  :             if (!_Matches._Match(*_Match_try)) {

  000c9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000cf	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000d2	51		 push	 ecx
  000d3	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000d9	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ; std::_String_bitmap<char,1>::_Match
  000de	0f b6 d0	 movzx	 edx, al
  000e1	85 d2		 test	 edx, edx
  000e3	75 0b		 jne	 SHORT $LN7@Traits_fin

; 856  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000e5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000eb	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000ee	eb 12		 jmp	 SHORT $LN9@Traits_fin
$LN7@Traits_fin:

; 857  :             }
; 858  : 
; 859  :             if (_Match_try == _Haystack) {

  000f0	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000f6	3b 45 08	 cmp	 eax, DWORD PTR __Haystack$[ebp]
  000f9	75 02		 jne	 SHORT $LN8@Traits_fin

; 860  :                 break; // at beginning, no more chance for match

  000fb	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN8@Traits_fin:

; 861  :             }
; 862  :         }

  000fd	eb bb		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 863  :     }
; 864  : 
; 865  :     return static_cast<size_t>(-1); // no match

  000ff	83 c8 ff	 or	 eax, -1
$LN9@Traits_fin:

; 866  : }

  00102	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00105	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010c	59		 pop	 ecx
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
  0011e	cc		 int	 3
  0011f	cc		 int	 3
  00120	cc		 int	 3
  00121	cc		 int	 3
  00122	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z PROC	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ ; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z ENDP	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
__Dist$ = -8						; size = 4
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Count$ = 20						; size = 4
?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_length, COMDAT
; _this$ = ecx

; 819  :         _Statype&, const _Byte* _First1, const _Byte* _Last1, size_t _Count) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 820  :         // return p - _First1, for the largest value p in [_First1, _Last1] such that [_First1, p) successfully
; 821  :         // converts to at most _Count _Elems
; 822  :         // assumes 1:1 conversion
; 823  :         const auto _Dist = static_cast<size_t>((_STD min)(_Last1 - _First1, ptrdiff_t{INT_MAX}));

  0000c	c7 45 b4 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
  00013	8b 45 10	 mov	 eax, DWORD PTR __Last1$[ebp]
  00016	2b 45 0c	 sub	 eax, DWORD PTR __First1$[ebp]
  00019	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0001f	51		 push	 ecx
  00020	8d 55 b0	 lea	 edx, DWORD PTR $T1[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ??$min@H@std@@YAABHABH0@Z ; std::min<int>
  00029	83 c4 08	 add	 esp, 8
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	89 45 f8	 mov	 DWORD PTR __Dist$[ebp], eax

; 824  :         return static_cast<int>((_STD min)(_Count, _Dist));

  00031	8d 45 f8	 lea	 eax, DWORD PTR __Dist$[ebp]
  00034	50		 push	 eax
  00035	8d 4d 14	 lea	 ecx, DWORD PTR __Count$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  0003e	83 c4 08	 add	 esp, 8
  00041	8b 00		 mov	 eax, DWORD PTR [eax]

; 825  :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 10 00	 ret	 16			; 00000010H
?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First2$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_unshift, COMDAT
; _this$ = ecx

; 812  :     virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&, _Byte* _First2, _Byte*, _Byte*& _Mid2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 813  :         // generate bytes to return to default shift state
; 814  :         _Mid2 = _First2;

  0000c	8b 45 14	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 815  :         return noconv; // no termination required

  00014	b8 03 00 00 00	 mov	 eax, 3

; 816  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 10 00	 ret	 16			; 00000010H
?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_unshift
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_out, COMDAT
; _this$ = ecx

; 794  :         _Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const { // convert [_First1, _Last1) to bytes [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 795  :         _Mid1 = _First1;

  0000c	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __First1$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 796  :         _Mid2 = _First2;

  00014	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  00017	8b 4d 18	 mov	 ecx, DWORD PTR __First2$[ebp]
  0001a	89 08		 mov	 DWORD PTR [eax], ecx

; 797  :         if _CONSTEXPR_IF (is_same_v<_Byte, _Elem>) {
; 798  :             return noconv; // convert nothing

  0001c	b8 03 00 00 00	 mov	 eax, 3

; 799  :         } else {
; 800  :             // types differ, copy one for one
; 801  :             for (; _Mid1 != _Last1; ++_Mid1, ++_Mid2) {
; 802  :                 if (_Mid2 == _Last2) {
; 803  :                     return partial;
; 804  :                 }
; 805  :                 *_Mid2 = static_cast<_Byte>(*_Mid1);
; 806  :             }
; 807  : 
; 808  :             return ok;
; 809  :         }
; 810  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 1c 00	 ret	 28			; 0000001cH
?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_out
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_in, COMDAT
; _this$ = ecx

; 775  :         _Elem* _First2, _Elem* _Last2, _Elem*& _Mid2) const { // convert bytes [_First1, _Last1) to [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 776  :         _Mid1 = _First1;

  0000c	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __First1$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 777  :         _Mid2 = _First2;

  00014	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  00017	8b 4d 18	 mov	 ecx, DWORD PTR __First2$[ebp]
  0001a	89 08		 mov	 DWORD PTR [eax], ecx

; 778  :         if _CONSTEXPR_IF (is_same_v<_Byte, _Elem>) {
; 779  :             return noconv; // convert nothing

  0001c	b8 03 00 00 00	 mov	 eax, 3

; 780  :         } else {
; 781  :             // types differ, copy one for one
; 782  :             for (; _Mid1 != _Last1; ++_Mid1, ++_Mid2) {
; 783  :                 if (_Mid2 == _Last2) {
; 784  :                     return partial;
; 785  :                 }
; 786  :                 *_Mid2 = static_cast<_Elem>(*_Mid1);
; 787  :             }
; 788  : 
; 789  :             return ok;
; 790  :         }
; 791  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 1c 00	 ret	 28			; 0000001cH
?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_in
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ PROC ; std::codecvt<char,char,_Mbstatet>::do_always_noconv, COMDAT
; _this$ = ecx

; 769  :     virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 770  :         // return true if conversions never change input (from codecvt)
; 771  :         return is_same_v<_Byte, _Elem>;

  0000c	b0 01		 mov	 al, 1

; 772  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ ENDP ; std::codecvt<char,char,_Mbstatet>::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::codecvt<char,char,_Mbstatet>::_Init, COMDAT
; _this$ = ecx

; 767  :     void __CLR_OR_THIS_CALL _Init(const _Locinfo&) {} // initialize from _Locinfo object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::codecvt<char,char,_Mbstatet>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ PROC		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>, COMDAT
; _this$ = ecx

; 765  :     virtual __CLR_OR_THIS_CALL ~codecvt() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ ENDP		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
tv89 = -152						; size = 4
tv128 = -148						; size = 4
tv131 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -136						; size = 52
$T4 = -84						; size = 4
$T5 = -80						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::codecvt<char,char,_Mbstatet>::_Getcat, COMDAT

; 755  :     static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 756  :         // return locale category mask and construct standard facet
; 757  :         if (_Ppf && !*_Ppf) {

  00035	83 7d 08 00	 cmp	 DWORD PTR __Ppf$[ebp], 0
  00039	0f 84 be 00 00
	00		 je	 $LN2@Getcat
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  00042	83 38 00	 cmp	 DWORD PTR [eax], 0
  00045	0f 85 b2 00 00
	00		 jne	 $LN2@Getcat

; 758  :             *_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));

  0004b	6a 08		 push	 8
  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4
  00055	89 45 ac	 mov	 DWORD PTR $T4[ebp], eax
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	83 7d ac 00	 cmp	 DWORD PTR $T4[ebp], 0
  00063	74 52		 je	 SHORT $LN4@Getcat
  00065	6a 00		 push	 0
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  0006a	e8 00 00 00 00	 call	 ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str
  0006f	50		 push	 eax
  00070	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0007b	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv131[ebp], eax
  00081	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  00087	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00091	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00097	83 c9 01	 or	 ecx, 1
  0009a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000a0	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv128[ebp]
  000a6	52		 push	 edx
  000a7	8b 4d ac	 mov	 ecx, DWORD PTR $T4[ebp]
  000aa	e8 00 00 00 00	 call	 ??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
  000af	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  000b5	eb 0a		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000b7	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN5@Getcat:
  000c1	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000c7	89 45 b0	 mov	 DWORD PTR $T5[ebp], eax
  000ca	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR __Ppf$[ebp]
  000d4	8b 55 b0	 mov	 edx, DWORD PTR $T5[ebp]
  000d7	89 11		 mov	 DWORD PTR [ecx], edx
  000d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  000e6	83 e0 01	 and	 eax, 1
  000e9	74 12		 je	 SHORT $LN2@Getcat
  000eb	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000f2	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000f8	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 759  :         }
; 760  : 
; 761  :         return _X_CTYPE;

  000fd	b8 02 00 00 00	 mov	 eax, 2

; 762  :     }

  00102	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00105	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010c	59		 pop	 ecx
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 ac	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001e	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00025	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00030	c3		 ret	 0
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::codecvt<char,char,_Mbstatet>::_Getcat
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>, COMDAT
; _this$ = ecx

; 751  :     explicit __CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0) : codecvt_base(_Refs) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0codecvt_base@std@@QAE@I@Z ; std::codecvt_base::codecvt_base
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@

; 752  :         _Init(_Lobj);

  00047	8b 45 08	 mov	 eax, DWORD PTR __Lobj$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ; std::codecvt<char,char,_Mbstatet>::_Init

; 753  :     }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::unshift, COMDAT
; _this$ = ecx

; 734  :     result __CLR_OR_THIS_CALL unshift(_Statype& _State, _Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 735  :         // generate bytes to return to default shift state
; 736  :         return do_unshift(_State, _First2, _Last2, _Mid2);

  0000c	8b 45 14	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 10	 mov	 ecx, DWORD PTR __Last2$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR __First2$[ebp]
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00027	ff d0		 call	 eax

; 737  :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::unshift
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::out, COMDAT
; _this$ = ecx

; 730  :         _Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const { // convert [_First1, _Last1) to bytes [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 731  :         return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  0000c	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 1c	 mov	 ecx, DWORD PTR __Last2$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  00017	52		 push	 edx
  00018	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR __Last1$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR __First1$[ebp]
  00023	52		 push	 edx
  00024	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00033	ff d0		 call	 eax

; 732  :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 1c 00	 ret	 28			; 0000001cH
?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::out
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::in, COMDAT
; _this$ = ecx

; 725  :         _Elem* _First2, _Elem* _Last2, _Elem*& _Mid2) const { // convert bytes [_First1, _Last1) to [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 726  :         return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);

  0000c	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 1c	 mov	 ecx, DWORD PTR __Last2$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  00017	52		 push	 edx
  00018	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR __Last1$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR __First1$[ebp]
  00023	52		 push	 edx
  00024	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00033	ff d0		 call	 eax

; 727  :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 1c 00	 ret	 28			; 0000001cH
?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::in
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 67   :     operator streamoff() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   :         // TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old
; 69   :         // basic_filebuf would set _Fpos.
; 70   :         return _Myoff + _Fpos;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  00017	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0001a	13 71 0c	 adc	 esi, DWORD PTR [ecx+12]
  0001d	8b c2		 mov	 eax, edx
  0001f	8b d6		 mov	 edx, esi

; 71   :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT
; _this$ = ecx

; 59   :     _NODISCARD _Statetype state() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   :         return _Mystate;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 61   :     }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 8
__Fileposition$ = 16					; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 57   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 14	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00024	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00031	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR __State$[ebp+4]
  00037	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00024	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002b	33 c0		 xor	 eax, eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 10	 add	 ecx, 16			; 00000010H
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 4
__Psave_guard$3 = -36					; size = 4
__Pfmod$4 = -32						; size = 4
__Pf$5 = -28						; size = 4
__Id$6 = -24						; size = 4
__Psave$7 = -20						; size = 4
__Lock$8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 426  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 427  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 428  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  0003e	89 45 ec	 mov	 DWORD PTR __Psave$7[ebp], eax

; 429  : 
; 430  :     const size_t _Id         = _Facet::id;

  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<char,char,_Mbstatet>::id
  00046	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int
  0004b	89 45 e8	 mov	 DWORD PTR __Id$6[ebp], eax

; 431  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Id$6[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00055	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  0005a	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 432  : 
; 433  :     if (!_Pf) {

  0005d	83 7d e4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  00061	75 7b		 jne	 SHORT $LN2@use_facet

; 434  :         if (_Psave) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  00067	74 08		 je	 SHORT $LN3@use_facet

; 435  :             _Pf = _Psave; // lazy facet already allocated

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0006c	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax
  0006f	eb 6d		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 436  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  00071	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00074	50		 push	 eax
  00075	8d 4d ec	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,_Mbstatet>::_Getcat
  0007e	83 c4 08	 add	 esp, 8
  00081	83 f8 ff	 cmp	 eax, -1
  00084	75 07		 jne	 SHORT $LN5@use_facet

; 437  : #if _HAS_EXCEPTIONS
; 438  :             _Throw_bad_cast(); // lazy disallowed

  00086	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 439  : #else // _HAS_EXCEPTIONS
; 440  :             _CSTD abort(); // lazy disallowed
; 441  : #endif // _HAS_EXCEPTIONS
; 442  :         } else { // queue up lazy facet for destruction

  0008b	eb 51		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 443  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  0008d	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  00090	89 45 e0	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 444  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  00093	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  00096	50		 push	 eax
  00097	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  0009a	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  0009f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 445  : 
; 446  : #if defined(_M_CEE)
; 447  :             _Facet_Register_m(_Pfmod);
; 448  : #else // defined(_M_CEE)
; 449  :             _Facet_Register(_Pfmod);

  000a3	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000ac	83 c4 04	 add	 esp, 4

; 450  : #endif // defined(_M_CEE)
; 451  : 
; 452  :             _Pfmod->_Incref();

  000af	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000b2	8b 10		 mov	 edx, DWORD PTR [eax]
  000b4	8b 4d e0	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	ff d0		 call	 eax

; 453  :             _Facetptr<_Facet>::_Psave = _Psave;

  000bc	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 454  :             _Pf                       = _Psave;

  000c4	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000c7	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 455  : 
; 456  :             (void) _Psave_guard.release();

  000ca	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000cd	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 457  :         }

  000d2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d6	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 458  :     }
; 459  : 
; 460  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000de	8b 45 e4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  000e1	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000f3	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
$LN7@use_facet:

; 461  :     _END_LOCK()
; 462  : } // end of use_facet body

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><>, COMDAT
; _this$ = ecx

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@URecord@CIniFile@@@std@@QAE@XZ ; std::allocator<CIniFile::Record>::allocator<CIniFile::Record>
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Vector_val<std::_Simple_types<CIniFile::Record> >
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0V?$allocator@URecord@CIniFile@@@std@@$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URecord@CIniFile@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@URecord@CIniFile@@@std@@$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URecord@CIniFile@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 1341 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ; std::forward<std::allocator<CIniFile::Record> >
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Vector_val<std::_Simple_types<CIniFile::Record> >
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0V?$allocator@URecord@CIniFile@@@std@@$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URecord@CIniFile@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAV?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z PROC ; std::move<std::allocator<CIniFile::Record> &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ENDP ; std::move<std::allocator<CIniFile::Record> &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_reallocate<CIniFile::Record const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 70	 sub	 esp, 112		; 00000070H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00037	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 728  :         auto& _My_data    = _Mypair._Myval2;

  0003a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00040	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00043	89 45 e0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  00046	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	83 c0 04	 add	 eax, 4
  0004c	89 45 dc	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0004f	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00055	2b 08		 sub	 ecx, DWORD PTR [eax]
  00057	8b c1		 mov	 eax, ecx
  00059	99		 cdq
  0005a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0005f	f7 f9		 idiv	 ecx
  00061	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00064	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00067	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006a	8b 00		 mov	 eax, DWORD PTR [eax]
  0006c	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006e	99		 cdq
  0006f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00074	f7 f9		 idiv	 ecx
  00076	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::max_size
  00081	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  00084	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  00086	e8 00 00 00 00	 call	 ?_Xlength@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@CAXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0008b	8b 45 d4	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 d0	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  00094	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	50		 push	 eax
  00098	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEII@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Calculate_growth
  000a0	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000a3	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000aa	e8 00 00 00 00	 call	 ?allocate@?$allocator@URecord@CIniFile@@@std@@QAEPAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::allocate
  000af	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000b2	6b 45 d8 64	 imul	 eax, DWORD PTR __Whereoff$[ebp], 100
  000b6	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000b9	8d 54 01 64	 lea	 edx, DWORD PTR [ecx+eax+100]
  000bd	89 55 c4	 mov	 DWORD PTR __Constructed_last$[ebp], edx

; 746  :         pointer _Constructed_first      = _Constructed_last;

  000c0	8b 45 c4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  000c3	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  000d6	83 c4 04	 add	 esp, 4
  000d9	50		 push	 eax
  000da	6b 4d d8 64	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 100
  000de	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  000e7	83 c4 04	 add	 esp, 4
  000ea	50		 push	 eax
  000eb	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  000f7	6b 45 d8 64	 imul	 eax, DWORD PTR __Whereoff$[ebp], 100
  000fb	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  000fe	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00101	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00104	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00107	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00109	75 1a		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  0010b	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	52		 push	 edx
  00115	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	51		 push	 ecx
  0011b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept

; 754  :         } else { // provide basic guarantee

  00123	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  00125	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00128	50		 push	 eax
  00129	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 e0	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00130	8b 02		 mov	 eax, DWORD PTR [edx]
  00132	50		 push	 eax
  00133	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	e8 00 00 00 00	 call	 ?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove

; 756  :             _Constructed_first = _Newvec;

  0013b	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0013e	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00141	6b 45 d8 64	 imul	 eax, DWORD PTR __Whereoff$[ebp], 100
  00145	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00148	8d 54 01 64	 lea	 edx, DWORD PTR [ecx+eax+100]
  0014c	52		 push	 edx
  0014d	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00150	8b 08		 mov	 ecx, DWORD PTR [eax]
  00152	51		 push	 ecx
  00153	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00156	52		 push	 edx
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove
$LN5@Emplace_re:
  0015f	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00161	8b 45 c4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00164	50		 push	 eax
  00165	8b 4d c0	 mov	 ecx, DWORD PTR __Constructed_first$[ebp]
  00168	51		 push	 ecx
  00169	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00171	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00174	50		 push	 eax
  00175	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00178	51		 push	 ecx
  00179	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0017c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::deallocate

; 762  :         _RERAISE;

  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  0018a	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0018f	c3		 ret	 0
$LN7@Emplace_re:
  00190	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00197	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$1
$LN10@Emplace_re:
  00199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z$1:

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001a0	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d d0	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001ab	52		 push	 edx
  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?_Change_array@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXQAURecord@CIniFile@@II@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  001b4	6b 45 d8 64	 imul	 eax, DWORD PTR __Whereoff$[ebp], 100
  001b8	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 767  :     }

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 08 00	 ret	 8
  001cf	cc		 int	 3
  001d0	cc		 int	 3
  001d1	cc		 int	 3
  001d2	cc		 int	 3
  001d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_reallocate<CIniFile::Record const &>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>, COMDAT

; 693  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 64		 push	 100			; 00000064H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@ABU01@@Z

; 695  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_back_with_unused_capacity<CIniFile::Record const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 686  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$construct@URecord@CIniFile@@ABU12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record const &>
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Orphan_range

; 689  :         _Ty& _Result = *_Mylast;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 690  :         ++_Mylast;

  00064	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	83 c1 64	 add	 ecx, 100		; 00000064H
  0006c	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0006f	89 0a		 mov	 DWORD PTR [edx], ecx

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_back_with_unused_capacity<CIniFile::Record const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z PROC ; std::forward<CIniFile::Record const &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ENDP ; std::forward<CIniFile::Record const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$emplace_back@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@ABURecord@CIniFile@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@ABURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace_back<CIniFile::Record const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00026	74 17		 je	 SHORT $LN2@emplace_ba

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00028	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_back_with_unused_capacity<CIniFile::Record const &>
  0003d	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	52		 push	 edx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_reallocate<CIniFile::Record const &>
  0005a	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??$emplace_back@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@ABURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace_back<CIniFile::Record const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z
_TEXT	SEGMENT
__Obj$2 = -136						; size = 104
__Al$3 = -32						; size = 4
__Oldlast$ = -28					; size = 4
__My_data$ = -24					; size = 4
__Whereptr$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace<CIniFile::Record const &>, COMDAT
; _this$ = ecx

; 770  :     iterator emplace(const_iterator _Where, _Valty&&... _Val) { // insert by perfectly forwarding _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 771  :         const pointer _Whereptr = _Where._Ptr;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00031	89 45 ec	 mov	 DWORD PTR __Whereptr$[ebp], eax

; 772  :         auto& _My_data          = _Mypair._Myval2;

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 773  :         const pointer _Oldlast  = _My_data._Mylast;

  0003a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00040	89 4d e4	 mov	 DWORD PTR __Oldlast$[ebp], ecx

; 774  : #if _ITERATOR_DEBUG_LEVEL == 2
; 775  :         _STL_VERIFY(
; 776  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 777  :             "vector emplace iterator outside range");
; 778  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 779  : 
; 780  :         if (_Oldlast != _My_data._Myend) {

  00043	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00046	8b 4d e4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  00049	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0004c	0f 84 f3 00 00
	00		 je	 $LN2@emplace

; 781  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee

  00052	8b 45 ec	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00055	3b 45 e4	 cmp	 eax, DWORD PTR __Oldlast$[ebp]
  00058	75 1a		 jne	 SHORT $LN3@emplace

; 782  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0005a	8b 45 10	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_back_with_unused_capacity<CIniFile::Record const &>

; 783  :             } else {

  0006f	e9 bc 00 00 00	 jmp	 $LN4@emplace
$LN3@emplace:

; 784  :                 auto& _Al = _Getal();

  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  0007c	89 45 e0	 mov	 DWORD PTR __Al$3[ebp], eax

; 785  :                 _Alloc_temporary<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing

  0007f	8b 45 10	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  00088	83 c4 04	 add	 esp, 4
  0008b	50		 push	 eax
  0008c	8b 4d e0	 mov	 ecx, DWORD PTR __Al$3[ebp]
  0008f	51		 push	 ecx
  00090	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR __Obj$2[ebp]
  00096	e8 00 00 00 00	 call	 ??$?0ABURecord@CIniFile@@@?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@AAV?$allocator@URecord@CIniFile@@@1@ABURecord@CIniFile@@@Z ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::_Alloc_temporary<std::allocator<CIniFile::Record> ><CIniFile::Record const &>
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 786  :                 // after constructing _Obj, provide basic guarantee
; 787  :                 _Orphan_range(_Whereptr, _Oldlast);

  000a2	8b 45 e4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Orphan_range

; 788  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  000b2	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000b7	6b c8 ff	 imul	 ecx, eax, -1
  000ba	03 4d e4	 add	 ecx, DWORD PTR __Oldlast$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  000c3	83 c4 04	 add	 esp, 4
  000c6	50		 push	 eax
  000c7	8b 55 e4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  000d0	83 c4 04	 add	 esp, 4
  000d3	50		 push	 eax
  000d4	8b 45 e0	 mov	 eax, DWORD PTR __Al$3[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$construct@URecord@CIniFile@@U12@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@$$QAU34@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::construct<CIniFile::Record,CIniFile::Record>
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 789  :                 ++_My_data._Mylast;

  000e0	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	83 c1 64	 add	 ecx, 100		; 00000064H
  000e9	8b 55 e8	 mov	 edx, DWORD PTR __My_data$[ebp]
  000ec	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 790  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);

  000ef	8b 45 e4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  000f6	83 e9 64	 sub	 ecx, 100		; 00000064H
  000f9	51		 push	 ecx
  000fa	8b 55 ec	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_backward_unchecked<CIniFile::Record *,CIniFile::Record *>
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 791  :                 *_Whereptr = _STD move(_Obj._Storage._Value);

  00106	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR __Obj$2[ebp+4]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  00112	83 c4 04	 add	 esp, 4
  00115	50		 push	 eax
  00116	8b 4d ec	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00119	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 792  :             }

  0011e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00125	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR __Obj$2[ebp]
  0012b	e8 00 00 00 00	 call	 ??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::~_Alloc_temporary<std::allocator<CIniFile::Record> >
$LN4@emplace:

; 793  : 
; 794  :             return _Make_iterator(_Whereptr);

  00130	8b 45 ec	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00133	50		 push	 eax
  00134	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00137	51		 push	 ecx
  00138	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	e8 00 00 00 00	 call	 ?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Make_iterator
  00140	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00143	eb 29		 jmp	 SHORT $LN1@emplace
$LN2@emplace:

; 795  :         }
; 796  : 
; 797  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));

  00145	8b 45 10	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ??$forward@ABURecord@CIniFile@@@std@@YAABURecord@CIniFile@@ABU12@@Z ; std::forward<CIniFile::Record const &>
  0014e	83 c4 04	 add	 esp, 4
  00151	50		 push	 eax
  00152	8b 4d ec	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00155	51		 push	 ecx
  00156	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEPAURecord@CIniFile@@QAU23@ABU23@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Emplace_reallocate<CIniFile::Record const &>
  0015e	50		 push	 eax
  0015f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00162	52		 push	 edx
  00163	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00166	e8 00 00 00 00	 call	 ?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Make_iterator
  0016b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@emplace:

; 798  :     }

  0016e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00171	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00178	59		 pop	 ecx
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR __Obj$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_Alloc_temporary@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::_Alloc_temporary<std::allocator<CIniFile::Record> >::~_Alloc_temporary<std::allocator<CIniFile::Record> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace<CIniFile::Record const &>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z PROC ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>, COMDAT

; 698  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 699  :         _Ptr->~_Uty();

  00009	6a 00		 push	 0
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 ??_GRecord@CIniFile@@QAEPAXI@Z

; 700  :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z PROC ; std::_Unfancy<CIniFile::Record>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ENDP ; std::_Unfancy<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Move_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z PROC ; std::_Move_unchecked<CIniFile::Record *,CIniFile::Record *>, COMDAT

; 4364 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4365 :     // move [_First, _Last) to [_Dest, ...)
; 4366 :     // note: _Move_unchecked has callers other than the move family
; 4367 :     if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
; 4368 : #ifdef __cpp_lib_is_constant_evaluated
; 4369 :         if (!_STD is_constant_evaluated())
; 4370 : #endif // __cpp_lib_is_constant_evaluated
; 4371 :         {
; 4372 :             return _Copy_memmove(_First, _Last, _Dest);
; 4373 :         }
; 4374 :     }
; 4375 : 
; 4376 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00009	eb 12		 jmp	 SHORT $LN4@Move_unche
$LN2@Move_unche:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000e	83 c0 64	 add	 eax, 100		; 00000064H
  00011	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	83 c1 64	 add	 ecx, 100		; 00000064H
  0001a	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN4@Move_unche:
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00023	74 17		 je	 SHORT $LN3@Move_unche

; 4377 :         *_Dest = _STD move(*_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$move@AAURecord@CIniFile@@@std@@YA$$QAURecord@CIniFile@@AAU12@@Z ; std::move<CIniFile::Record &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00035	e8 00 00 00 00	 call	 ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z

; 4378 :     }

  0003a	eb cf		 jmp	 SHORT $LN2@Move_unche
$LN3@Move_unche:

; 4379 : 
; 4380 :     return _Dest;

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 4381 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Move_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ENDP ; std::_Move_unchecked<CIniFile::Record *,CIniFile::Record *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; _this$ = ecx

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1341 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 70	 sub	 esp, 112		; 00000070H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00037	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 728  :         auto& _My_data    = _Mypair._Myval2;

  0003a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00040	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00043	89 45 e0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  00046	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	83 c0 04	 add	 eax, 4
  0004c	89 45 dc	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0004f	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00055	2b 08		 sub	 ecx, DWORD PTR [eax]
  00057	8b c1		 mov	 eax, ecx
  00059	99		 cdq
  0005a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005f	f7 f9		 idiv	 ecx
  00061	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00064	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00067	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006a	8b 00		 mov	 eax, DWORD PTR [eax]
  0006c	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006e	99		 cdq
  0006f	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00074	f7 f9		 idiv	 ecx
  00076	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  00081	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  00084	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  00086	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0008b	8b 45 d4	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 d0	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  00094	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	50		 push	 eax
  00098	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
  000a0	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000a3	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000aa	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
  000af	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000b2	6b 45 d8 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  000b6	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000b9	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  000bd	89 55 c4	 mov	 DWORD PTR __Constructed_last$[ebp], edx

; 746  :         pointer _Constructed_first      = _Constructed_last;

  000c0	8b 45 c4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  000c3	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  000d6	83 c4 04	 add	 esp, 4
  000d9	50		 push	 eax
  000da	6b 4d d8 18	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 24
  000de	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000e7	83 c4 04	 add	 esp, 4
  000ea	50		 push	 eax
  000eb	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  000f7	6b 45 d8 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  000fb	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  000fe	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00101	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00104	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00107	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00109	75 1a		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  0010b	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	52		 push	 edx
  00115	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	51		 push	 ecx
  0011b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept

; 754  :         } else { // provide basic guarantee

  00123	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  00125	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00128	50		 push	 eax
  00129	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0012c	51		 push	 ecx
  0012d	8b 55 e0	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00130	8b 02		 mov	 eax, DWORD PTR [edx]
  00132	50		 push	 eax
  00133	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove

; 756  :             _Constructed_first = _Newvec;

  0013b	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0013e	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00141	6b 45 d8 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  00145	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00148	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  0014c	52		 push	 edx
  0014d	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00150	8b 08		 mov	 ecx, DWORD PTR [eax]
  00152	51		 push	 ecx
  00153	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00156	52		 push	 edx
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
$LN5@Emplace_re:
  0015f	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00161	8b 45 c4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00164	50		 push	 eax
  00165	8b 4d c0	 mov	 ecx, DWORD PTR __Constructed_first$[ebp]
  00168	51		 push	 ecx
  00169	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00171	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00174	50		 push	 eax
  00175	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00178	51		 push	 ecx
  00179	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0017c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 762  :         _RERAISE;

  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  0018a	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0018f	c3		 ret	 0
$LN7@Emplace_re:
  00190	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00197	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$1
$LN10@Emplace_re:
  00199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$1:

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001a0	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d d0	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001ab	52		 push	 edx
  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  001b4	6b 45 d8 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  001b8	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 767  :     }

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 08 00	 ret	 8
  001cf	cc		 int	 3
  001d0	cc		 int	 3
  001d1	cc		 int	 3
  001d2	cc		 int	 3
  001d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 693  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 694  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 18		 push	 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 695  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 686  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 689  :         _Ty& _Result = *_Mylast;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 690  :         ++_Mylast;

  00064	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	83 c1 18	 add	 ecx, 24			; 00000018H
  0006c	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0006f	89 0a		 mov	 DWORD PTR [edx], ecx

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00026	74 17		 je	 SHORT $LN2@emplace_ba

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00028	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0003d	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	52		 push	 edx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0005a	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Const_cast@$$CBURecord@CIniFile@@@std@@YA@PBURecord@CIniFile@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBURecord@CIniFile@@@std@@YA@PBURecord@CIniFile@@@Z PROC ; std::_Const_cast<CIniFile::Record const >, COMDAT

; 282  : auto _Const_cast(_Ty* _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 283  :     return const_cast<remove_const_t<_Ty>*>(_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Const_cast@$$CBURecord@CIniFile@@@std@@YA@PBURecord@CIniFile@@@Z ENDP ; std::_Const_cast<CIniFile::Record const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingRecordSort@CIniFile@@@Z
_TEXT	SEGMENT
$T1 = -73						; size = 1
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingRecordSort@CIniFile@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingRecordSort>, COMDAT

; 4134 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4135 :     _Adl_verify_range(_First, _Last);

  00009	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  00016	83 c4 08	 add	 esp, 8

; 4136 :     const auto _UFirst = _Get_unwrapped(_First);

  00019	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 4137 :     const auto _ULast  = _Get_unwrapped(_Last);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00037	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Pass_fn@UAscendingRecordSort@CIniFile@@$0A@@std@@YA?AUAscendingRecordSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::AscendingRecordSort,0>
  00041	83 c4 04	 add	 esp, 4
  00044	88 45 b7	 mov	 BYTE PTR $T1[ebp], al
  00047	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0004f	2b 45 fc	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00052	99		 cdq
  00053	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00058	f7 f9		 idiv	 ecx
  0005a	50		 push	 eax
  0005b	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingRecordSort>
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 4139 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingRecordSort@CIniFile@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingRecordSort@CIniFile@@@Z
_TEXT	SEGMENT
$T1 = -73						; size = 1
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingRecordSort@CIniFile@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingRecordSort>, COMDAT

; 4134 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4135 :     _Adl_verify_range(_First, _Last);

  00009	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  00016	83 c4 08	 add	 esp, 8

; 4136 :     const auto _UFirst = _Get_unwrapped(_First);

  00019	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 4137 :     const auto _ULast  = _Get_unwrapped(_Last);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00037	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Pass_fn@UDescendingRecordSort@CIniFile@@$0A@@std@@YA?AUDescendingRecordSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::DescendingRecordSort,0>
  00041	83 c4 04	 add	 esp, 4
  00044	88 45 b7	 mov	 BYTE PTR $T1[ebp], al
  00047	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0004f	2b 45 fc	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00052	99		 cdq
  00053	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00058	f7 f9		 idiv	 ecx
  0005a	50		 push	 eax
  0005b	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingRecordSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingRecordSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingRecordSort>
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 4139 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingRecordSort@CIniFile@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingRecordSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingSectionSort@CIniFile@@@Z
_TEXT	SEGMENT
$T1 = -73						; size = 1
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingSectionSort@CIniFile@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingSectionSort>, COMDAT

; 4134 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4135 :     _Adl_verify_range(_First, _Last);

  00009	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  00016	83 c4 08	 add	 esp, 8

; 4136 :     const auto _UFirst = _Get_unwrapped(_First);

  00019	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 4137 :     const auto _ULast  = _Get_unwrapped(_Last);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00037	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Pass_fn@UAscendingSectionSort@CIniFile@@$0A@@std@@YA?AUAscendingSectionSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::AscendingSectionSort,0>
  00041	83 c4 04	 add	 esp, 4
  00044	88 45 b7	 mov	 BYTE PTR $T1[ebp], al
  00047	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0004f	2b 45 fc	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00052	99		 cdq
  00053	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00058	f7 f9		 idiv	 ecx
  0005a	50		 push	 eax
  0005b	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UAscendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUAscendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::AscendingSectionSort>
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 4139 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingSectionSort@CIniFile@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingSectionSort@CIniFile@@@Z
_TEXT	SEGMENT
$T1 = -73						; size = 1
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingSectionSort@CIniFile@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingSectionSort>, COMDAT

; 4134 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4135 :     _Adl_verify_range(_First, _Last);

  00009	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  00016	83 c4 08	 add	 esp, 8

; 4136 :     const auto _UFirst = _Get_unwrapped(_First);

  00019	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 4137 :     const auto _ULast  = _Get_unwrapped(_Last);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 4138 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00037	0f b6 45 10	 movzx	 eax, BYTE PTR __Pred$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Pass_fn@UDescendingSectionSort@CIniFile@@$0A@@std@@YA?AUDescendingSectionSort@CIniFile@@U12@@Z ; std::_Pass_fn<CIniFile::DescendingSectionSort,0>
  00041	83 c4 04	 add	 esp, 4
  00044	88 45 b7	 mov	 BYTE PTR $T1[ebp], al
  00047	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0004f	2b 45 fc	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00052	99		 cdq
  00053	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00058	f7 f9		 idiv	 ecx
  0005a	50		 push	 eax
  0005b	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAURecord@CIniFile@@UDescendingSectionSort@2@@std@@YAXPAURecord@CIniFile@@0HUDescendingSectionSort@2@@Z ; std::_Sort_unchecked<CIniFile::Record *,CIniFile::DescendingSectionSort>
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 4139 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingSectionSort@CIniFile@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingSectionSort>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z
_TEXT	SEGMENT
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 24
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z PROC ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionIs>, COMDAT

; 5662 : _NODISCARD _CONSTEXPR20 _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) { // find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 5663 :     _Adl_verify_range(_First, _Last);

  0002f	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00032	50		 push	 eax
  00033	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  0003c	83 c4 08	 add	 esp, 8

; 5664 :     auto _UFirst      = _Get_unwrapped(_First);

  0003f	8d 45 0c	 lea	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > &>
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 5665 :     const auto _ULast = _Get_unwrapped(_Last);

  0004e	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 5666 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005d	eb 09		 jmp	 SHORT $LN4@find_if
$LN2@find_if:
  0005f	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	83 c0 64	 add	 eax, 100		; 00000064H
  00065	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@find_if:
  00068	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0006b	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  0006e	74 17		 je	 SHORT $LN3@find_if

; 5667 :         if (_Pred(*_UFirst)) {

  00070	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00073	50		 push	 eax
  00074	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00077	e8 00 00 00 00	 call	 ??RRecordSectionIs@CIniFile@@QBE_NABURecord@1@@Z ; CIniFile::RecordSectionIs::operator()
  0007c	0f b6 c8	 movzx	 ecx, al
  0007f	85 c9		 test	 ecx, ecx
  00081	74 02		 je	 SHORT $LN5@find_if

; 5668 :             break;

  00083	eb 02		 jmp	 SHORT $LN3@find_if
$LN5@find_if:

; 5669 :         }
; 5670 :     }

  00085	eb d8		 jmp	 SHORT $LN2@find_if
$LN3@find_if:

; 5671 : 
; 5672 :     _Seek_wrapped(_First, _UFirst);

  00087	8d 45 f0	 lea	 eax, DWORD PTR __UFirst$[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::Record * &>
  00094	83 c4 08	 add	 esp, 8

; 5673 :     return _First;

  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a9	e8 00 00 00 00	 call	 ??1RecordSectionIs@CIniFile@@QAE@XZ
  000ae	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5674 : }

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1RecordSectionIs@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z ENDP ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionIs>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z
_TEXT	SEGMENT
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 48
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z PROC ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>, COMDAT

; 5662 : _NODISCARD _CONSTEXPR20 _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) { // find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 5663 :     _Adl_verify_range(_First, _Last);

  0002f	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00032	50		 push	 eax
  00033	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > >
  0003c	83 c4 08	 add	 esp, 8

; 5664 :     auto _UFirst      = _Get_unwrapped(_First);

  0003f	8d 45 0c	 lea	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > &>
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 5665 :     const auto _ULast = _Get_unwrapped(_Last);

  0004e	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@@std@@YA@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > > const &>
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 5666 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005d	eb 09		 jmp	 SHORT $LN4@find_if
$LN2@find_if:
  0005f	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00062	83 c0 64	 add	 eax, 100		; 00000064H
  00065	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@find_if:
  00068	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0006b	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  0006e	74 17		 je	 SHORT $LN3@find_if

; 5667 :         if (_Pred(*_UFirst)) {

  00070	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00073	50		 push	 eax
  00074	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00077	e8 00 00 00 00	 call	 ??RRecordSectionKeyIs@CIniFile@@QBE_NABURecord@1@@Z ; CIniFile::RecordSectionKeyIs::operator()
  0007c	0f b6 c8	 movzx	 ecx, al
  0007f	85 c9		 test	 ecx, ecx
  00081	74 02		 je	 SHORT $LN5@find_if

; 5668 :             break;

  00083	eb 02		 jmp	 SHORT $LN3@find_if
$LN5@find_if:

; 5669 :         }
; 5670 :     }

  00085	eb d8		 jmp	 SHORT $LN2@find_if
$LN3@find_if:

; 5671 : 
; 5672 :     _Seek_wrapped(_First, _UFirst);

  00087	8d 45 f0	 lea	 eax, DWORD PTR __UFirst$[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@AAPAURecord@CIniFile@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@AAPAURecord@CIniFile@@@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::Record * &>
  00094	83 c4 08	 add	 esp, 8

; 5673 :     return _First;

  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a9	e8 00 00 00 00	 call	 ??1RecordSectionKeyIs@CIniFile@@QAE@XZ
  000ae	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5674 : }

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1RecordSectionKeyIs@CIniFile@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ENDP ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR ___param1$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___param0$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 309  :     _NODISCARD value_type* _Unwrapped() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 310  :         return _Unfancy(this->_Ptr);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  00017	83 c4 04	 add	 esp, 4

; 311  :     }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+, COMDAT
; _this$ = ecx

; 286  :     _NODISCARD _Vector_iterator operator+(const difference_type _Off) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 287  :         _Vector_iterator _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 288  :         return _Tmp += _Off;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00017	50		 push	 eax
  00018	8d 4d f8	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0001b	e8 00 00 00 00	 call	 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 289  :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=, COMDAT
; _this$ = ecx

; 281  :     _Vector_iterator& operator+=(const difference_type _Off) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 282  :         _Mybase::operator+=(_Off);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=

; 283  :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 284  :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++, COMDAT
; _this$ = ecx

; 264  :     _Vector_iterator operator++(int) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  :         _Vector_iterator _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 266  :         _Mybase::operator++();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++

; 267  :         return _Tmp;

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$[ebp]
  00022	89 08		 mov	 DWORD PTR [eax], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->, COMDAT
; _this$ = ecx

; 255  :     _NODISCARD pointer operator->() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :         return _Const_cast(_Mybase::operator->());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPBURecord@CIniFile@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBURecord@CIniFile@@@std@@YA@PBURecord@CIniFile@@@Z ; std::_Const_cast<CIniFile::Record const >
  0001a	83 c4 04	 add	 esp, 4

; 257  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*, COMDAT
; _this$ = ecx

; 251  :     _NODISCARD reference operator*() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 252  :         return const_cast<reference>(_Mybase::operator*());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEABURecord@CIniFile@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*

; 253  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEXPBURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__It$ = 8						; size = 4
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEXPBURecord@CIniFile@@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Seek_to, COMDAT
; _this$ = ecx

; 194  :     void _Seek_to(const value_type* _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 195  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Refancy@PAURecord@CIniFile@@$0A@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Refancy<CIniFile::Record *,0>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax

; 196  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEXPBURecord@CIniFile@@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Compat, COMDAT
; _this$ = ecx

; 173  :     void _Compat(const _Vector_const_iterator& _Right) const { // test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : #if _ITERATOR_DEBUG_LEVEL == 0
; 175  :         (void) _Right;
; 176  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 177  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");
; 178  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 179  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<, COMDAT
; _this$ = ecx

; 156  :     _NODISCARD bool operator<(const _Vector_const_iterator& _Right) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  :         _Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Compat

; 158  :         return _Ptr < _Right._Ptr;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00022	73 09		 jae	 SHORT $LN3@operator
  00024	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  00034	8a 45 b8	 mov	 al, BYTE PTR tv69[ebp]

; 159  :     }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==, COMDAT
; _this$ = ecx

; 147  :     _NODISCARD bool operator==(const _Vector_const_iterator& _Right) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 148  :         _Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Compat

; 149  :         return _Ptr == _Right._Ptr;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00022	75 09		 jne	 SHORT $LN3@operator
  00024	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  00034	8a 45 b8	 mov	 al, BYTE PTR tv69[ebp]

; 150  :     }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :     _Vector_const_iterator& operator+=(const difference_type _Off) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  :         _Verify_offset(_Off);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Verify_offset

; 120  :         _Ptr += _Off;

  00018	6b 45 08 64	 imul	 eax, DWORD PTR __Off$[ebp], 100
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	03 01		 add	 eax, DWORD PTR [ecx]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	89 02		 mov	 DWORD PTR [edx], eax

; 121  :         return *this;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 122  :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Verify_offset, COMDAT
; _this$ = ecx

; 102  :     void _Verify_offset(const difference_type _Off) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : #if _ITERATOR_DEBUG_LEVEL == 0
; 104  :         (void) _Off;
; 105  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 106  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 107  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 108  :         if (_Off < 0) {
; 109  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 110  :         }
; 111  : 
; 112  :         if (_Off > 0) {
; 113  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 114  :         }
; 115  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 116  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++, COMDAT
; _this$ = ecx

; 68   :     _Vector_const_iterator& operator++() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 69   : #if _ITERATOR_DEBUG_LEVEL != 0
; 70   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 71   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");
; 72   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");
; 73   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 74   : 
; 75   :         ++_Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	83 c1 64	 add	 ecx, 100		; 00000064H
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 76   :         return *this;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 77   :     }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPBURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPBURecord@CIniFile@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->, COMDAT
; _this$ = ecx

; 57   :     _NODISCARD pointer operator->() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : #if _ITERATOR_DEBUG_LEVEL != 0
; 59   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 60   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 61   :         _STL_VERIFY(
; 62   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 63   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 64   : 
; 65   :         return _Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 66   :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPBURecord@CIniFile@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEABURecord@CIniFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEABURecord@CIniFile@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*, COMDAT
; _this$ = ecx

; 46   :     _NODISCARD reference operator*() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : #if _ITERATOR_DEBUG_LEVEL != 0
; 48   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 49   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 50   :         _STL_VERIFY(
; 51   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 52   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 53   : 
; 54   :         return *_Ptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 55   :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEABURecord@CIniFile@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >, COMDAT
; _this$ = ecx

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 43   :         this->_Adopt(_Pvector);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 44   :     }

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1347 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1348 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1349 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1344 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1345 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents, COMDAT
; _this$ = ecx

; 384  :     void _Take_contents(_Vector_val& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         this->_Swap_proxy_and_iterators(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 386  :         _Myfirst = _Right._Myfirst;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 387  :         _Mylast  = _Right._Mylast;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00028	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 388  :         _Myend   = _Right._Myend;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00034	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00037	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 389  : 
; 390  :         _Right._Myfirst = pointer();

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 391  :         _Right._Mylast  = pointer();

  00043	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00046	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 392  :         _Right._Myend   = pointer();

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00050	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 393  :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal, COMDAT
; _this$ = ecx

; 1735 :     const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1736 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first

; 1737 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal, COMDAT
; _this$ = ecx

; 1731 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1732 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first

; 1733 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1711 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1712 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1713 :         _Lockit _Lock(_LOCK_DEBUG);
; 1714 : 
; 1715 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1716 :         while (*_Pnext) {
; 1717 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 1718 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator
; 1719 :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 1720 :             } else { // orphan the iterator
; 1721 :                 (*_Pnext)->_Myproxy = nullptr;
; 1722 :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 1723 :             }
; 1724 :         }
; 1725 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1726 :         (void) _First;
; 1727 :         (void) _Last;
; 1728 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1729 :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1703 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1704 :         _Xlength_error("vector too long");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  0000e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1705 :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1685 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1686 :         auto& _My_data    = _Mypair._Myval2;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1687 :         pointer& _Myfirst = _My_data._Myfirst;

  00031	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00034	89 45 e8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1688 :         pointer& _Mylast  = _My_data._Mylast;

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	83 c0 04	 add	 eax, 4
  0003d	89 45 e4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1689 :         pointer& _Myend   = _My_data._Myend;

  00040	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00043	83 c0 08	 add	 eax, 8
  00046	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1690 : 
; 1691 :         _My_data._Orphan_all();

  00049	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1692 : 
; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00054	83 38 00	 cmp	 DWORD PTR [eax], 0
  00057	74 57		 je	 SHORT $LN3@Tidy

; 1694 :             _Destroy(_Myfirst, _Mylast);

  00059	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	50		 push	 eax
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00070	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	2b 01		 sub	 eax, DWORD PTR [ecx]
  00077	99		 cdq
  00078	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0007d	f7 f9		 idiv	 ecx
  0007f	50		 push	 eax
  00080	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0008e	8b c8		 mov	 ecx, eax
  00090	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 1696 : 
; 1697 :             _Myfirst = pointer();

  00095	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00098	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1698 :             _Mylast  = pointer();

  0009e	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000a1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1699 :             _Myend   = pointer();

  000a7	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000aa	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1700 :         }
; 1701 :     }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	cc		 int	 3
  000c3	cc		 int	 3
  000c4	cc		 int	 3
  000c5	cc		 int	 3
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1669 :         pointer& _Myfirst = _My_data._Myfirst;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1670 :         pointer& _Mylast  = _My_data._Mylast;

  00018	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0001b	83 c0 04	 add	 eax, 4
  0001e	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1671 :         pointer& _Myend   = _My_data._Myend;

  00021	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00024	83 c0 08	 add	 eax, 8
  00027	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1672 : 
; 1673 :         _My_data._Orphan_all();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00032	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00035	83 38 00	 cmp	 DWORD PTR [eax], 0
  00038	74 3c		 je	 SHORT $LN2@Change_arr

; 1676 :             _Destroy(_Myfirst, _Mylast);

  0003a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	51		 push	 ecx
  00040	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0004e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	2b 01		 sub	 eax, DWORD PTR [ecx]
  00058	99		 cdq
  00059	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0005e	f7 f9		 idiv	 ecx
  00060	50		 push	 eax
  00061	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00064	8b 02		 mov	 eax, DWORD PTR [edx]
  00066	50		 push	 eax
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0006f	8b c8		 mov	 ecx, eax
  00071	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
$LN2@Change_arr:

; 1678 :         }
; 1679 : 
; 1680 :         _Myfirst = _Newvec;

  00076	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0007c	89 08		 mov	 DWORD PTR [eax], ecx

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0007e	6b 45 0c 18	 imul	 eax, DWORD PTR __Newsize$[ebp], 24
  00082	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00085	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00088	89 01		 mov	 DWORD PTR [ecx], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0008a	6b 45 10 18	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 24
  0008e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00091	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :     }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1618 : 
; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00029	76 05		 jbe	 SHORT $LN2@Calculate_

; 1620 :             return _Newsize; // geometric growth would overflow

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002e	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00033	d1 e8		 shr	 eax, 1
  00035	03 45 f8	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00038	89 45 f4	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0003e	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00041	73 05		 jae	 SHORT $LN3@Calculate_

; 1626 :             return _Newsize; // geometric growth would be insufficient

  00043	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00046	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1627 :         }
; 1628 : 
; 1629 :         return _Geometric; // geometric growth is sufficient

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1630 :     }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1605 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00011	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00021	51		 push	 ecx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1

; 1608 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1609 :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1595 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1596 :         // move [_First, _Last) to raw _Dest, using allocator
; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1598 :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove, COMDAT
; _this$ = ecx

; 1591 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1593 :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 1492 :     _NODISCARD size_type capacity() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001d	99		 cdq
  0001e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00023	f7 f9		 idiv	 ecx

; 1495 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 1487 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1488 :         return (_STD min)(

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  00020	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00025	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00028	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0002b	50		 push	 eax
  0002c	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00035	83 c4 08	 add	 esp, 8
  00038	8b 00		 mov	 eax, DWORD PTR [eax]

; 1489 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1490 :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 717  :         emplace_back(_Val);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>

; 718  :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -71						; size = 1
$T2 = -70						; size = 1
$T3 = -69						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	0f b6 45 bb	 movzx	 eax, BYTE PTR $T3[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 582  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002b	8d 45 ba	 lea	 eax, DWORD PTR $T2[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 583  :         _Move_construct(_Right, true_type{});

  00037	33 c0		 xor	 eax, eax
  00039	88 45 b9	 mov	 BYTE PTR $T1[ebp], al
  0003c	0f b6 4d b9	 movzx	 ecx, BYTE PTR $T1[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00044	52		 push	 edx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct

; 584  :     }

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct, COMDAT
; _this$ = ecx

; 556  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents

; 558  :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -70						; size = 1
$T2 = -69						; size = 1
_this$ = -4						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	0f b6 45 bb	 movzx	 eax, BYTE PTR $T2[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>

; 446  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00019	8d 45 ba	 lea	 eax, DWORD PTR $T1[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 447  :     }

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT

; 702  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 703  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00009	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 704  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 806  :     _NODISCARD __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BI@@std@@YAII@Z ; std::_Get_size_of_n<24>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 808  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	6b 45 0c 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8

; 804  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 795  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4426 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 4427 :     return _STD move(_Left.append(_Right));

  00010	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00017	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00022	83 c4 04	 add	 esp, 4
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  00031	83 c9 01	 or	 ecx, 1
  00034	89 4d bc	 mov	 DWORD PTR $T1[ebp], ecx
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4428 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT
tv86 = -84						; size = 4
tv83 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -71						; size = 1
$T3 = -70						; size = 1
$T4 = -69						; size = 1
__Right_size$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4385 :     const _Elem _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 4386 :     const auto _Right_size = _Right.size();

  00010	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00013	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00018	89 45 fc	 mov	 DWORD PTR __Right_size$[ebp], eax

; 4387 :     if (_Right_size == _Right.max_size()) {

  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00023	39 45 fc	 cmp	 DWORD PTR __Right_size$[ebp], eax
  00026	75 05		 jne	 SHORT $LN2@operator

; 4388 :         _Xlen_string();

  00028	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@operator:

; 4389 :     }
; 4390 : 
; 4391 :     return {_String_constructor_concat_tag{}, _Right, _STD addressof(_Left), 1, _Right.c_str(), _Right_size};

  0002d	8a 45 bb	 mov	 al, BYTE PTR $T4[ebp]
  00030	88 45 ba	 mov	 BYTE PTR $T3[ebp], al
  00033	8a 4d ba	 mov	 cl, BYTE PTR $T3[ebp]
  00036	88 4d b9	 mov	 BYTE PTR $T2[ebp], cl
  00039	8d 55 0c	 lea	 edx, DWORD PTR __Left$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 ??$addressof@$$CBD@std@@YAPBDABD@Z ; std::addressof<char const >
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  00048	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00050	89 45 ac	 mov	 DWORD PTR tv86[ebp], eax
  00053	8b 45 fc	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  0005a	51		 push	 ecx
  0005b	6a 01		 push	 1
  0005d	8b 55 b0	 mov	 edx, DWORD PTR tv83[ebp]
  00060	52		 push	 edx
  00061	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00064	50		 push	 eax
  00065	0f b6 4d b9	 movzx	 ecx, BYTE PTR $T2[ebp]
  00069	51		 push	 ecx
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00072	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00075	83 ca 01	 or	 edx, 1
  00078	89 55 b4	 mov	 DWORD PTR $T1[ebp], edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@operator:

; 4392 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4496 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4497 :     return !(_Left == _Right);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00016	83 c4 08	 add	 esp, 8
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	75 09		 jne	 SHORT $LN3@operator
  00020	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00029	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  00030	8a 45 bc	 mov	 al, BYTE PTR tv69[ebp]

; 4498 : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 982  :     _Ostr.put(_Ostr.widen('\n'));

  00009	6a 0a		 push	 10			; 0000000aH
  0000b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00013	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00016	8b ca		 mov	 ecx, edx
  00018	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  0001d	0f b6 c0	 movzx	 eax, al
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00024	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 983  :     _Ostr.flush();

  00029	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0002c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 984  :     return _Ostr;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4641 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4642 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0000c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00015	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0001a	50		 push	 eax
  0001b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4643 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -152						; size = 8
tv338 = -144						; size = 8
tv290 = -140						; size = 4
tv287 = -140						; size = 8
tv285 = -140						; size = 4
tv326 = -136						; size = 8
tv289 = -136						; size = 4
tv284 = -136						; size = 4
tv286 = -132						; size = 4
tv137 = -132						; size = 4
tv288 = -129						; size = 1
tv283 = -129						; size = 1
$T2 = -128						; size = 4
$T3 = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
$T6 = -112						; size = 4
__Ok$ = -44						; size = 8
__Pad$ = -36						; size = 8
__Count$ = -28						; size = 8
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 735  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 736  :     using _Elem = char;
; 737  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 738  : 
; 739  :     ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 740  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00036	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0003f	83 c4 04	 add	 esp, 4
  00042	33 c9		 xor	 ecx, ecx
  00044	89 45 e4	 mov	 DWORD PTR __Count$[ebp], eax
  00047	89 4d e8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 741  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0004a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00052	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00055	8b ca		 mov	 ecx, edx
  00057	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  0005c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv326[ebp], eax
  00062	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv326[ebp+4], edx
  00068	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv326[ebp+4], 0
  0006f	7c 65		 jl	 SHORT $LN17@operator
  00071	7f 09		 jg	 SHORT $LN24@operator
  00073	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR tv326[ebp], 0
  0007a	76 5a		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0007c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00084	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00087	8b ca		 mov	 ecx, edx
  00089	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  0008e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv338[ebp], eax
  00094	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv338[ebp+4], edx
  0009a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv338[ebp+4]
  000a0	3b 45 e8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000a3	7c 31		 jl	 SHORT $LN17@operator
  000a5	7f 0b		 jg	 SHORT $LN25@operator
  000a7	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv338[ebp]
  000ad	3b 4d e4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000b0	76 24		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000b2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ba	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000bd	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  000c2	2b 45 e4	 sub	 eax, DWORD PTR __Count$[ebp]
  000c5	1b 55 e8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000c8	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  000ce	89 95 6c ff ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  000d4	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	66 0f 13 85 68
	ff ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  000e1	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  000e7	89 4d dc	 mov	 DWORD PTR __Pad$[ebp], ecx
  000ea	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  000f0	89 55 e0	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 742  :     const typename _Myos::sentry _Ok(_Ostr);

  000f3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000f6	50		 push	 eax
  000f7	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000fa	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 743  : 
; 744  :     if (!_Ok) {

  00106	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00109	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0010e	0f b6 c0	 movzx	 eax, al
  00111	85 c0		 test	 eax, eax
  00113	75 0e		 jne	 SHORT $LN8@operator

; 745  :         _State |= ios_base::badbit;

  00115	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00118	83 c8 04	 or	 eax, 4
  0011b	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 746  :     } else { // state okay, insert

  0011e	e9 34 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 747  :         _TRY_IO_BEGIN

  00123	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 748  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00127	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0012a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0012f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00132	8b ca		 mov	 ecx, edx
  00134	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  00139	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0013f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00145	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0014a	83 f8 40	 cmp	 eax, 64			; 00000040H
  0014d	0f 84 ab 00 00
	00		 je	 $LN11@operator

; 749  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00153	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00155	8b 45 dc	 mov	 eax, DWORD PTR __Pad$[ebp]
  00158	83 e8 01	 sub	 eax, 1
  0015b	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0015e	83 d9 00	 sbb	 ecx, 0
  00161	89 45 dc	 mov	 DWORD PTR __Pad$[ebp], eax
  00164	89 4d e0	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  00167	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0016b	0f 8c 8d 00 00
	00		 jl	 $LN11@operator
  00171	7f 0a		 jg	 SHORT $LN26@operator
  00173	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00177	0f 86 81 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 750  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00180	8b 08		 mov	 ecx, DWORD PTR [eax]
  00182	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00185	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00188	8b ca		 mov	 ecx, edx
  0018a	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  0018f	88 85 7f ff ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  00195	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00198	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0019d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a0	8b ca		 mov	 ecx, edx
  001a2	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001a7	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001ad	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001b4	50		 push	 eax
  001b5	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001bb	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  001c0	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c6	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001cc	89 4d 90	 mov	 DWORD PTR $T6[ebp], ecx
  001cf	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001d4	89 45 8c	 mov	 DWORD PTR $T5[ebp], eax
  001d7	8d 55 90	 lea	 edx, DWORD PTR $T6[ebp]
  001da	52		 push	 edx
  001db	8d 45 8c	 lea	 eax, DWORD PTR $T5[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001e4	83 c4 08	 add	 esp, 8
  001e7	0f b6 c8	 movzx	 ecx, al
  001ea	85 c9		 test	 ecx, ecx
  001ec	74 0b		 je	 SHORT $LN12@operator

; 751  :                     _State |= ios_base::badbit; // insertion failed, quit

  001ee	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001f1	83 c8 04	 or	 eax, 4
  001f4	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 752  :                     break;

  001f7	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 753  :                 }
; 754  :             }

  001f9	e9 57 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  001fe	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00202	75 5a		 jne	 SHORT $LN13@operator
  00204	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00207	8b 08		 mov	 ecx, DWORD PTR [eax]
  00209	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0020c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0020f	8b ca		 mov	 ecx, edx
  00211	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00216	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0021c	8b 45 e8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0021f	50		 push	 eax
  00220	8b 4d e4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00223	51		 push	 ecx
  00224	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00227	52		 push	 edx
  00228	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  0022e	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00233	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00239	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  0023f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  00245	3b 45 e4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00248	75 0b		 jne	 SHORT $LN27@operator
  0024a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  00250	3b 4d e8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  00253	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 758  :             _State |= ios_base::badbit;

  00255	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 759  :         }
; 760  : 
; 761  :         if (_State == ios_base::goodbit) {

  0025e	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00262	0f 85 ab 00 00
	00		 jne	 $LN14@operator

; 762  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00268	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0026a	8b 45 dc	 mov	 eax, DWORD PTR __Pad$[ebp]
  0026d	83 e8 01	 sub	 eax, 1
  00270	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00273	83 d9 00	 sbb	 ecx, 0
  00276	89 45 dc	 mov	 DWORD PTR __Pad$[ebp], eax
  00279	89 4d e0	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  0027c	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00280	0f 8c 8d 00 00
	00		 jl	 $LN14@operator
  00286	7f 0a		 jg	 SHORT $LN28@operator
  00288	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0028c	0f 86 81 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 763  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00292	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00295	8b 08		 mov	 ecx, DWORD PTR [eax]
  00297	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0029a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0029d	8b ca		 mov	 ecx, edx
  0029f	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  002a4	88 85 7f ff ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002aa	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  002af	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002b2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002b5	8b ca		 mov	 ecx, edx
  002b7	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  002bc	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002c2	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  002c9	50		 push	 eax
  002ca	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  002d0	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  002d5	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  002db	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  002e1	89 4d 88	 mov	 DWORD PTR $T4[ebp], ecx
  002e4	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002e9	89 45 84	 mov	 DWORD PTR $T3[ebp], eax
  002ec	8d 55 88	 lea	 edx, DWORD PTR $T4[ebp]
  002ef	52		 push	 edx
  002f0	8d 45 84	 lea	 eax, DWORD PTR $T3[ebp]
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002f9	83 c4 08	 add	 esp, 8
  002fc	0f b6 c8	 movzx	 ecx, al
  002ff	85 c9		 test	 ecx, ecx
  00301	74 0b		 je	 SHORT $LN15@operator

; 764  :                     _State |= ios_base::badbit; // insertion failed, quit

  00303	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00306	83 c8 04	 or	 eax, 4
  00309	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 765  :                     break;

  0030c	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 766  :                 }
; 767  :             }

  0030e	e9 57 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 768  :         }
; 769  : 
; 770  :         _Ostr.width(0);

  00313	6a 00		 push	 0
  00315	6a 00		 push	 0
  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b ca		 mov	 ecx, edx
  00324	e8 00 00 00 00	 call	 ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width
  00329	eb 1c		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 771  :         _CATCH_IO_(ios_base, _Ostr)

  0032b	6a 01		 push	 1
  0032d	6a 04		 push	 4
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b ca		 mov	 ecx, edx
  0033c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00341	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00346	c3		 ret	 0
$LN19@operator:
  00347	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0034e	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00350	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 772  :     }
; 773  : 
; 774  :     _Ostr.setstate(_State);

  00357	6a 00		 push	 0
  00359	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0035c	50		 push	 eax
  0035d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00360	8b 11		 mov	 edx, DWORD PTR [ecx]
  00362	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00365	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00368	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 775  :     return _Ostr;

  0036d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00370	89 45 80	 mov	 DWORD PTR $T2[ebp], eax
  00373	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0037a	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0037d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00382	8b 45 80	 mov	 eax, DWORD PTR $T2[ebp]

; 776  : }

  00385	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00388	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038f	59		 pop	 ecx
  00390	5f		 pop	 edi
  00391	5e		 pop	 esi
  00392	5b		 pop	 ebx
  00393	8b e5		 mov	 esp, ebp
  00395	5d		 pop	 ebp
  00396	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -144						; size = 8
tv279 = -140						; size = 4
tv274 = -140						; size = 4
tv311 = -136						; size = 8
tv278 = -136						; size = 4
tv276 = -136						; size = 4
tv273 = -136						; size = 4
tv275 = -132						; size = 4
tv65 = -132						; size = 4
tv277 = -129						; size = 1
tv272 = -129						; size = 1
$T2 = -128						; size = 4
$T3 = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
$T6 = -112						; size = 4
$T7 = -108						; size = 4
$T8 = -104						; size = 4
__Pad$9 = -36						; size = 8
__Ok$ = -28						; size = 8
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 781  :     using _Elem = char;
; 782  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 783  : 
; 784  :     ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 785  :     const typename _Myos::sentry _Ok(_Ostr);

  00036	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 786  : 
; 787  :     if (_Ok) { // state okay, insert

  00049	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0004c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	0f 84 96 02 00
	00		 je	 $LN8@operator

; 788  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b ca		 mov	 ecx, edx
  00069	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  0006e	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv311[ebp], eax
  00074	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv311[ebp+4], edx
  0007a	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv311[ebp+4], 0
  00081	7f 18		 jg	 SHORT $LN15@operator
  00083	7c 09		 jl	 SHORT $LN22@operator
  00085	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR tv311[ebp], 1
  0008c	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  0008e	0f 57 c0	 xorps	 xmm0, xmm0
  00091	66 0f 13 85 70
	ff ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  00099	eb 24		 jmp	 SHORT $LN16@operator
$LN15@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b ca		 mov	 ecx, edx
  000a8	e8 00 00 00 00	 call	 ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width
  000ad	83 e8 01	 sub	 eax, 1
  000b0	83 da 00	 sbb	 edx, 0
  000b3	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000b9	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000bf	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000c5	89 45 dc	 mov	 DWORD PTR __Pad$9[ebp], eax
  000c8	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000ce	89 4d e0	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 789  : 
; 790  :         _TRY_IO_BEGIN

  000d1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 791  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000d5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000dd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e0	8b ca		 mov	 ecx, edx
  000e2	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  000e7	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000ed	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  000f3	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000f8	83 f8 40	 cmp	 eax, 64			; 00000040H
  000fb	0f 84 af 00 00
	00		 je	 $LN10@operator

; 792  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  00101	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00103	8b 45 dc	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00106	83 e8 01	 sub	 eax, 1
  00109	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  0010c	83 d9 00	 sbb	 ecx, 0
  0010f	89 45 dc	 mov	 DWORD PTR __Pad$9[ebp], eax
  00112	89 4d e0	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
  00115	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00119	0f 85 91 00 00
	00		 jne	 $LN10@operator
  0011f	83 7d e0 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00123	0f 8c 87 00 00
	00		 jl	 $LN10@operator
  00129	7f 06		 jg	 SHORT $LN23@operator
  0012b	83 7d dc 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  0012f	76 7f		 jbe	 SHORT $LN10@operator
$LN23@operator:

; 793  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00131	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00134	8b 08		 mov	 ecx, DWORD PTR [eax]
  00136	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00139	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0013c	8b ca		 mov	 ecx, edx
  0013e	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00143	88 85 7f ff ff
	ff		 mov	 BYTE PTR tv272[ebp], al
  00149	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00151	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00154	8b ca		 mov	 ecx, edx
  00156	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0015b	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  00161	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR tv272[ebp]
  00168	50		 push	 eax
  00169	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv273[ebp]
  0016f	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00174	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  0017a	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  00180	89 4d 98	 mov	 DWORD PTR $T8[ebp], ecx
  00183	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00188	89 45 94	 mov	 DWORD PTR $T7[ebp], eax
  0018b	8d 55 98	 lea	 edx, DWORD PTR $T8[ebp]
  0018e	52		 push	 edx
  0018f	8d 45 94	 lea	 eax, DWORD PTR $T7[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00198	83 c4 08	 add	 esp, 8
  0019b	0f b6 c8	 movzx	 ecx, al
  0019e	85 c9		 test	 ecx, ecx
  001a0	74 09		 je	 SHORT $LN11@operator

; 794  :                     _State |= ios_base::badbit;

  001a2	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001a5	83 c8 04	 or	 eax, 4
  001a8	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 795  :                 }
; 796  :             }

  001ab	e9 53 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 797  :         }
; 798  : 
; 799  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  001b0	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001b4	75 5f		 jne	 SHORT $LN12@operator
  001b6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001be	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c1	8b ca		 mov	 ecx, edx
  001c3	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001c8	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  001ce	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  001d2	50		 push	 eax
  001d3	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  001d9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  001de	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  001e4	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  001ea	89 4d 90	 mov	 DWORD PTR $T6[ebp], ecx
  001ed	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001f2	89 45 8c	 mov	 DWORD PTR $T5[ebp], eax
  001f5	8d 55 90	 lea	 edx, DWORD PTR $T6[ebp]
  001f8	52		 push	 edx
  001f9	8d 45 8c	 lea	 eax, DWORD PTR $T5[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00202	83 c4 08	 add	 esp, 8
  00205	0f b6 c8	 movzx	 ecx, al
  00208	85 c9		 test	 ecx, ecx
  0020a	74 09		 je	 SHORT $LN12@operator

; 800  :             _State |= ios_base::badbit;

  0020c	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0020f	83 c8 04	 or	 eax, 4
  00212	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 801  :         }
; 802  : 
; 803  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  00215	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00217	8b 45 dc	 mov	 eax, DWORD PTR __Pad$9[ebp]
  0021a	83 e8 01	 sub	 eax, 1
  0021d	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  00220	83 d9 00	 sbb	 ecx, 0
  00223	89 45 dc	 mov	 DWORD PTR __Pad$9[ebp], eax
  00226	89 4d e0	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
  00229	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  0022d	0f 85 91 00 00
	00		 jne	 $LN6@operator
  00233	83 7d e0 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00237	0f 8c 87 00 00
	00		 jl	 $LN6@operator
  0023d	7f 06		 jg	 SHORT $LN24@operator
  0023f	83 7d dc 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  00243	76 7f		 jbe	 SHORT $LN6@operator
$LN24@operator:

; 804  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00245	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00248	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0024d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00250	8b ca		 mov	 ecx, edx
  00252	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00257	88 85 7f ff ff
	ff		 mov	 BYTE PTR tv277[ebp], al
  0025d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00260	8b 08		 mov	 ecx, DWORD PTR [eax]
  00262	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00265	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00268	8b ca		 mov	 ecx, edx
  0026a	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0026f	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv278[ebp], eax
  00275	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR tv277[ebp]
  0027c	50		 push	 eax
  0027d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  00283	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00288	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  0028e	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00294	89 4d 88	 mov	 DWORD PTR $T4[ebp], ecx
  00297	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0029c	89 45 84	 mov	 DWORD PTR $T3[ebp], eax
  0029f	8d 55 88	 lea	 edx, DWORD PTR $T4[ebp]
  002a2	52		 push	 edx
  002a3	8d 45 84	 lea	 eax, DWORD PTR $T3[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002ac	83 c4 08	 add	 esp, 8
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	85 c9		 test	 ecx, ecx
  002b4	74 09		 je	 SHORT $LN13@operator

; 805  :                 _State |= ios_base::badbit;

  002b6	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  002b9	83 c8 04	 or	 eax, 4
  002bc	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 806  :             }
; 807  :         }

  002bf	e9 53 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  002c4	eb 1c		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 808  :         _CATCH_IO_(ios_base, _Ostr)

  002c6	6a 01		 push	 1
  002c8	6a 04		 push	 4
  002ca	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d5	8b ca		 mov	 ecx, edx
  002d7	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  002dc	b8 00 00 00 00	 mov	 eax, $LN21@operator
  002e1	c3		 ret	 0
$LN17@operator:
  002e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  002e9	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  002eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 809  :     }
; 810  : 
; 811  :     _Ostr.width(0);

  002f2	6a 00		 push	 0
  002f4	6a 00		 push	 0
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b ca		 mov	 ecx, edx
  00303	e8 00 00 00 00	 call	 ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width

; 812  :     _Ostr.setstate(_State);

  00308	6a 00		 push	 0
  0030a	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00311	8b 11		 mov	 edx, DWORD PTR [ecx]
  00313	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00316	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00319	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 813  :     return _Ostr;

  0031e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00321	89 45 80	 mov	 DWORD PTR $T2[ebp], eax
  00324	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0032b	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0032e	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00333	8b 45 80	 mov	 eax, DWORD PTR $T2[ebp]

; 814  : }

  00336	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00339	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00340	59		 pop	 ecx
  00341	5f		 pop	 edi
  00342	5e		 pop	 esi
  00343	5b		 pop	 ebx
  00344	8b e5		 mov	 esp, ebp
  00346	5d		 pop	 ebp
  00347	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 68	 add	 ecx, 104		; 00000068H
  00012	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 68	 add	 ecx, 104		; 00000068H
  0001d	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 e9 68	 sub	 ecx, 104		; 00000068H
  00012	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 14		 je	 SHORT $LN2@scalar
  0001f	68 b0 00 00 00	 push	 176			; 000000b0H
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 e8 68	 sub	 eax, 104		; 00000068H
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 e8 68	 sub	 eax, 104		; 00000068H
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 1168 :     void close() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1169 :         if (!_Filebuffer.close()) {

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00017	85 c0		 test	 eax, eax
  00019	75 16		 jne	 SHORT $LN1@close

; 1170 :             _Myios::setstate(ios_base::failbit);

  0001b	6a 00		 push	 0
  0001d	6a 02		 push	 2
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002a	8b ca		 mov	 ecx, edx
  0002c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@close:

; 1171 :         }
; 1172 :     }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 1143 :     _NODISCARD bool is_open() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1144 :         return _Filebuffer.is_open();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open

; 1145 :     }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1137 :     virtual __CLR_OR_THIS_CALL ~basic_ofstream() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 44 10 98 00
	00 00 00	 mov	 DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	83 ea 68	 sub	 edx, 104		; 00000068H
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 54 01 94	 mov	 DWORD PTR [ecx+eax-108], edx
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 e9 64	 sub	 ecx, 100		; 00000064H
  00042	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 e9 60	 sub	 ecx, 96			; 00000060H
  0004d	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1000 :     explicit basic_ofstream(const char* _Filename, ios_base::openmode _Mode = ios_base::out,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1001 :         int _Prot = ios_base::_Default_open_prot)
; 1002 :         : _Mybase(_STD addressof(_Filebuffer)) { // _Prot is an extension

  00032	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 24		 je	 SHORT $LN2@basic_ofst
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 68	 add	 ecx, 104		; 00000068H
  00047	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00056	83 c8 01	 or	 eax, 1
  00059	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ofst:
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 c0 04	 add	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  00078	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00099	83 ea 68	 sub	 edx, 104		; 00000068H
  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	83 c1 04	 add	 ecx, 4
  000b1	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000b6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1003 :         if (!_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot)) {

  000ba	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000c1	83 c9 02	 or	 ecx, 2
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000c8	52		 push	 edx
  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	83 c1 04	 add	 ecx, 4
  000cf	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000d4	85 c0		 test	 eax, eax
  000d6	75 16		 jne	 SHORT $LN1@basic_ofst

; 1004 :             _Myios::setstate(ios_base::failbit);

  000d8	6a 00		 push	 0
  000da	6a 02		 push	 2
  000dc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e7	8b ca		 mov	 ecx, edx
  000e9	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@basic_ofst:

; 1005 :         }
; 1006 :     }

  000ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00102	59		 pop	 ecx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ofst
  0000c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ofst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00037	90		 npad	 1
  00038	90		 npad	 1
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 08	 add	 ecx, 8
  00012	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 08	 add	 ecx, 8
  0001d	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 e9 08	 sub	 ecx, 8
  00012	e8 00 00 00 00	 call	 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 11		 je	 SHORT $LN2@scalar
  0001f	6a 50		 push	 80			; 00000050H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 e8 08	 sub	 eax, 8
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 e8 08	 sub	 eax, 8
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -28						; size = 8
__Rdbuf$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 546  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 547  :         const auto _Rdbuf = _Myios::rdbuf();

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00033	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00036	8b ca		 mov	 ecx, edx
  00038	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0003d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 548  :         if (_Rdbuf) { // buffer exists, flush it

  00040	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00044	74 54		 je	 SHORT $LN2@flush

; 549  :             const sentry _Ok(*this);

  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	50		 push	 eax
  0004a	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0004d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 550  : 
; 551  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  00059	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0005c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	74 23		 je	 SHORT $LN3@flush
  00068	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0006b	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  00070	83 f8 ff	 cmp	 eax, -1
  00073	75 16		 jne	 SHORT $LN3@flush

; 552  :                 _Myios::setstate(ios_base::badbit); // sync failed

  00075	6a 00		 push	 0
  00077	6a 04		 push	 4
  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00081	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00084	8b ca		 mov	 ecx, edx
  00086	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@flush:

; 553  :             }
; 554  :         }

  0008b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00095	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 555  :         return *this;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 556  :     }

  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
_TEXT	SEGMENT
tv153 = -116						; size = 4
tv65 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
__Ok$ = -32						; size = 8
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ch$ = 8						; size = 1
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT
; _this$ = ecx

; 509  :     basic_ostream& __CLR_OR_THIS_CALL put(_Elem _Ch) { // insert a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 64	 sub	 esp, 100		; 00000064H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 510  :         ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 511  :         const sentry _Ok(*this);

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 512  : 
; 513  :         if (!_Ok) {

  00049	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0004c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 0e		 jne	 SHORT $LN2@put

; 514  :             _State |= ios_base::badbit;

  00058	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  0005b	83 c8 04	 or	 eax, 4
  0005e	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 515  :         } else { // state okay, insert character

  00061	e9 85 00 00 00	 jmp	 $LN3@put
$LN2@put:

; 516  :             _TRY_IO_BEGIN

  00066	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 517  :             if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sputc(_Ch))) {

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0007c	89 45 90	 mov	 DWORD PTR tv65[ebp], eax
  0007f	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 90	 mov	 ecx, DWORD PTR tv65[ebp]
  00087	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0008c	89 45 8c	 mov	 DWORD PTR tv153[ebp], eax
  0008f	8b 4d 8c	 mov	 ecx, DWORD PTR tv153[ebp]
  00092	89 4d 9c	 mov	 DWORD PTR $T4[ebp], ecx
  00095	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0009a	89 45 98	 mov	 DWORD PTR $T3[ebp], eax
  0009d	8d 55 9c	 lea	 edx, DWORD PTR $T4[ebp]
  000a0	52		 push	 edx
  000a1	8d 45 98	 lea	 eax, DWORD PTR $T3[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000aa	83 c4 08	 add	 esp, 8
  000ad	0f b6 c8	 movzx	 ecx, al
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 09		 je	 SHORT $LN5@put

; 518  :                 _State |= ios_base::badbit;

  000b4	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  000b7	83 c8 04	 or	 eax, 4
  000ba	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax
$LN5@put:
  000bd	eb 1c		 jmp	 SHORT $LN7@put
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0:

; 519  :             }
; 520  :             _CATCH_IO_END

  000bf	6a 01		 push	 1
  000c1	6a 04		 push	 4
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ce	8b ca		 mov	 ecx, edx
  000d0	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000d5	b8 00 00 00 00	 mov	 eax, $LN11@put
  000da	c3		 ret	 0
$LN7@put:
  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000e2	eb 07		 jmp	 SHORT $LN3@put
$LN11@put:
  000e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN3@put:

; 521  :         }
; 522  : 
; 523  :         _Myios::setstate(_State);

  000eb	6a 00		 push	 0
  000ed	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  000f0	50		 push	 eax
  000f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000fc	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 524  :         return *this;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00104	89 45 94	 mov	 DWORD PTR $T2[ebp], eax
  00107	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0010e	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00111	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00116	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp]

; 525  :     }

  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 185  :         basic_ostream&(__cdecl* _Pfn)(basic_ostream&) ) { // call basic_ostream manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 186  :         return _Pfn(*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00013	83 c4 04	 add	 esp, 4

; 187  :     }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv152 = -92						; size = 4
tv151 = -88						; size = 4
tv150 = -88						; size = 4
tv149 = -85						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 156  :     void __CLR_OR_THIS_CALL _Osfx() { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 157  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 158  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00041	8b ca		 mov	 ecx, edx
  00043	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00048	88 45 ab	 mov	 BYTE PTR tv149[ebp], al
  0004b	0f b6 45 ab	 movzx	 eax, BYTE PTR tv149[ebp]
  0004f	85 c0		 test	 eax, eax
  00051	74 59		 je	 SHORT $LN3@Osfx
  00053	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0005e	8b ca		 mov	 ecx, edx
  00060	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  00065	89 45 a8	 mov	 DWORD PTR tv150[ebp], eax
  00068	8b 45 a8	 mov	 eax, DWORD PTR tv150[ebp]
  0006b	83 e0 02	 and	 eax, 2
  0006e	74 3c		 je	 SHORT $LN3@Osfx

; 159  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00070	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00078	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0007b	8b ca		 mov	 ecx, edx
  0007d	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00082	89 45 a8	 mov	 DWORD PTR tv151[ebp], eax
  00085	8b 4d a8	 mov	 ecx, DWORD PTR tv151[ebp]
  00088	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  0008d	89 45 a4	 mov	 DWORD PTR tv152[ebp], eax
  00090	83 7d a4 ff	 cmp	 DWORD PTR tv152[ebp], -1
  00094	75 16		 jne	 SHORT $LN3@Osfx

; 160  :                 _Myios::setstate(ios_base::badbit);

  00096	6a 00		 push	 0
  00098	6a 04		 push	 4
  0009a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a5	8b ca		 mov	 ecx, edx
  000a7	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@Osfx:
  000ac	eb 06		 jmp	 SHORT $LN6@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 161  :             }
; 162  :         }
; 163  :         _CATCH_ALL
; 164  :         _CATCH_END

  000ae	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  000b3	c3		 ret	 0
$LN6@Osfx:
  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bb	eb 07		 jmp	 SHORT $LN1@Osfx
$LN9@Osfx:
  000bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN1@Osfx:

; 165  :     }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
  000d6	cc		 int	 3
  000d7	cc		 int	 3
  000d8	cc		 int	 3
  000d9	cc		 int	 3
  000da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   :     virtual __CLR_OR_THIS_CALL ~basic_ostream() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	83 ea 08	 sub	 edx, 8
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 54 01 f4	 mov	 DWORD PTR [ecx+eax-12], edx
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 24		 je	 SHORT $LN2@basic_ostr
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 08	 add	 ecx, 8
  00047	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00056	83 c8 01	 or	 eax, 1
  00059	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ostr:
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00076	83 ea 08	 sub	 edx, 8
  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 33   :         _Myios::init(_Strbuf, _Isstd);

  00088	0f b6 45 0c	 movzx	 eax, BYTE PTR __Isstd$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Strbuf$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0009c	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 34   :     }

  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
  0001b	c3		 ret	 0
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00021	90		 npad	 1
  00022	90		 npad	 1
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4480 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4481 :     return _Left._Equal(_Right);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 4482 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR ___param1$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___param0$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+, COMDAT
; _this$ = ecx

; 2036 :     _NODISCARD _String_iterator operator+(const difference_type _Off) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2037 :         _String_iterator _Tmp = *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 2038 :         return _Tmp += _Off;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00017	50		 push	 eax
  00018	8d 4d f8	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0001b	e8 00 00 00 00	 call	 ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2039 :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 2031 :     _String_iterator& operator+=(const difference_type _Off) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2032 :         _Mybase::operator+=(_Off);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=

; 2033 :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2034 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 1861 :     _String_const_iterator& operator+=(const difference_type _Off) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1862 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1863 :         _Verify_offset(_Off);
; 1864 : #endif // _ITERATOR_DEBUG_LEVEL >= 1
; 1865 :         _Ptr += _Off;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 1866 :         return *this;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1867 :     }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1771 :     _String_const_iterator(pointer _Parg, const _Container_base* _Pstring) noexcept : _Ptr(_Parg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 1772 :         this->_Adopt(_Pstring);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 1773 :     }

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
tv86 = -84						; size = 4
tv83 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -71						; size = 1
$T3 = -70						; size = 1
$T4 = -69						; size = 1
__Left_size$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4409 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 4410 :     const auto _Left_size = _Left.size();

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00013	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00018	89 45 fc	 mov	 DWORD PTR __Left_size$[ebp], eax

; 4411 :     if (_Left_size == _Left.max_size()) {

  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00023	39 45 fc	 cmp	 DWORD PTR __Left_size$[ebp], eax
  00026	75 05		 jne	 SHORT $LN2@operator

; 4412 :         _Xlen_string();

  00028	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@operator:

; 4413 :     }
; 4414 : 
; 4415 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _STD addressof(_Right), 1};

  0002d	8a 45 bb	 mov	 al, BYTE PTR $T4[ebp]
  00030	88 45 ba	 mov	 BYTE PTR $T3[ebp], al
  00033	8a 4d ba	 mov	 cl, BYTE PTR $T3[ebp]
  00036	88 4d b9	 mov	 BYTE PTR $T2[ebp], cl
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00041	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  00044	8d 55 10	 lea	 edx, DWORD PTR __Right$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??$addressof@$$CBD@std@@YAPBDABD@Z ; std::addressof<char const >
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 ac	 mov	 DWORD PTR tv86[ebp], eax
  00053	6a 01		 push	 1
  00055	8b 45 ac	 mov	 eax, DWORD PTR tv86[ebp]
  00058	50		 push	 eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 b0	 mov	 edx, DWORD PTR tv83[ebp]
  00060	52		 push	 edx
  00061	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00064	50		 push	 eax
  00065	0f b6 4d b9	 movzx	 ecx, BYTE PTR $T2[ebp]
  00069	51		 push	 ecx
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00072	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00075	83 ca 01	 or	 edx, 1
  00078	89 55 b4	 mov	 DWORD PTR $T1[ebp], edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@operator:

; 4416 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@D@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4463 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, const _Elem _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 4464 :     _Left.push_back(_Right);

  00010	0f b6 45 10	 movzx	 eax, BYTE PTR __Right$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00018	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 4465 :     return _STD move(_Left);

  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00032	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  00035	83 c9 01	 or	 ecx, 1
  00038	89 4d bc	 mov	 DWORD PTR $T1[ebp], ecx
  0003b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4466 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 83   :     basic_string<_Elem, _Traits, _Alloc>& _Str) { // get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 84   :     return getline(_STD move(_Istr), _Str, _Istr.widen('\n'));

  00009	6a 0a		 push	 10			; 0000000aH
  0000b	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00013	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00016	8b ca		 mov	 ecx, edx
  00018	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  0001d	0f b6 c0	 movzx	 eax, al
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QBEABV?$allocator@URecord@CIniFile@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QBEABV?$allocator@URecord@CIniFile@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1347 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1348 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1349 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QBEABV?$allocator@URecord@CIniFile@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAEAAV?$allocator@URecord@CIniFile@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAEAAV?$allocator@URecord@CIniFile@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1344 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1345 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAEAAV?$allocator@URecord@CIniFile@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Take_contents, COMDAT
; _this$ = ecx

; 384  :     void _Take_contents(_Vector_val& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         this->_Swap_proxy_and_iterators(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 386  :         _Myfirst = _Right._Myfirst;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 387  :         _Mylast  = _Right._Mylast;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00028	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 388  :         _Myend   = _Right._Myend;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00034	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00037	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 389  : 
; 390  :         _Right._Myfirst = pointer();

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 391  :         _Right._Mylast  = pointer();

  00043	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00046	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 392  :         _Right._Myend   = pointer();

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00050	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 393  :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Vector_val<std::_Simple_types<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Vector_val<std::_Simple_types<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 4
?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Make_iterator, COMDAT
; _this$ = ecx

; 1739 :     iterator _Make_iterator(const pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1740 :         return iterator(_Ptr, _STD addressof(_Mypair._Myval2));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1741 :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?_Make_iterator@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@QAURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Make_iterator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEABV?$allocator@URecord@CIniFile@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEABV?$allocator@URecord@CIniFile@@@2@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal, COMDAT
; _this$ = ecx

; 1735 :     const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1736 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QBEABV?$allocator@URecord@CIniFile@@@2@XZ ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first

; 1737 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEABV?$allocator@URecord@CIniFile@@@2@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal, COMDAT
; _this$ = ecx

; 1731 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1732 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Get_first

; 1733 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1711 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1712 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1713 :         _Lockit _Lock(_LOCK_DEBUG);
; 1714 : 
; 1715 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1716 :         while (*_Pnext) {
; 1717 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 1718 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator
; 1719 :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 1720 :             } else { // orphan the iterator
; 1721 :                 (*_Pnext)->_Myproxy = nullptr;
; 1722 :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 1723 :             }
; 1724 :         }
; 1725 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1726 :         (void) _First;
; 1727 :         (void) _Last;
; 1728 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1729 :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Orphan_range@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEXPAURecord@CIniFile@@0@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Xlength@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@CAXXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Xlength, COMDAT

; 1703 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1704 :         _Xlength_error("vector too long");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  0000e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1705 :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xlength@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@CAXXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Tidy, COMDAT
; _this$ = ecx

; 1685 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1686 :         auto& _My_data    = _Mypair._Myval2;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1687 :         pointer& _Myfirst = _My_data._Myfirst;

  00031	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00034	89 45 e8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1688 :         pointer& _Mylast  = _My_data._Mylast;

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	83 c0 04	 add	 eax, 4
  0003d	89 45 e4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1689 :         pointer& _Myend   = _My_data._Myend;

  00040	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00043	83 c0 08	 add	 eax, 8
  00046	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1690 : 
; 1691 :         _My_data._Orphan_all();

  00049	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1692 : 
; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00054	83 38 00	 cmp	 DWORD PTR [eax], 0
  00057	74 57		 je	 SHORT $LN3@Tidy

; 1694 :             _Destroy(_Myfirst, _Mylast);

  00059	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	50		 push	 eax
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00070	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	2b 01		 sub	 eax, DWORD PTR [ecx]
  00077	99		 cdq
  00078	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0007d	f7 f9		 idiv	 ecx
  0007f	50		 push	 eax
  00080	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  0008e	8b c8		 mov	 ecx, eax
  00090	e8 00 00 00 00	 call	 ?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::deallocate

; 1696 : 
; 1697 :             _Myfirst = pointer();

  00095	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00098	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1698 :             _Mylast  = pointer();

  0009e	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000a1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1699 :             _Myend   = pointer();

  000a7	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000aa	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1700 :         }
; 1701 :     }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	cc		 int	 3
  000c3	cc		 int	 3
  000c4	cc		 int	 3
  000c5	cc		 int	 3
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Tidy
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Change_array@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXQAURecord@CIniFile@@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXQAURecord@CIniFile@@II@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1669 :         pointer& _Myfirst = _My_data._Myfirst;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1670 :         pointer& _Mylast  = _My_data._Mylast;

  00018	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0001b	83 c0 04	 add	 eax, 4
  0001e	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1671 :         pointer& _Myend   = _My_data._Myend;

  00021	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00024	83 c0 08	 add	 eax, 8
  00027	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1672 : 
; 1673 :         _My_data._Orphan_all();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00032	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00035	83 38 00	 cmp	 DWORD PTR [eax], 0
  00038	74 3c		 je	 SHORT $LN2@Change_arr

; 1676 :             _Destroy(_Myfirst, _Mylast);

  0003a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	51		 push	 ecx
  00040	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy

; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0004e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	2b 01		 sub	 eax, DWORD PTR [ecx]
  00058	99		 cdq
  00059	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0005e	f7 f9		 idiv	 ecx
  00060	50		 push	 eax
  00061	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00064	8b 02		 mov	 eax, DWORD PTR [edx]
  00066	50		 push	 eax
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  0006f	8b c8		 mov	 ecx, eax
  00071	e8 00 00 00 00	 call	 ?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z ; std::allocator<CIniFile::Record>::deallocate
$LN2@Change_arr:

; 1678 :         }
; 1679 : 
; 1680 :         _Myfirst = _Newvec;

  00076	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0007c	89 08		 mov	 DWORD PTR [eax], ecx

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0007e	6b 45 0c 64	 imul	 eax, DWORD PTR __Newsize$[ebp], 100
  00082	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00085	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00088	89 01		 mov	 DWORD PTR [ecx], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  0008a	6b 45 10 64	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 100
  0008e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00091	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :     }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXQAURecord@CIniFile@@II@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Calculate_growth@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEII@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1618 : 
; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00029	76 05		 jbe	 SHORT $LN2@Calculate_

; 1620 :             return _Newsize; // geometric growth would overflow

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002e	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00033	d1 e8		 shr	 eax, 1
  00035	03 45 f8	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00038	89 45 f4	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0003e	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00041	73 05		 jae	 SHORT $LN3@Calculate_

; 1626 :             return _Newsize; // geometric growth would be insufficient

  00043	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00046	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1627 :         }
; 1628 : 
; 1629 :         return _Geometric; // geometric growth is sufficient

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1630 :     }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEII@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00014	50		 push	 eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@URecord@CIniFile@@@std@@@std@@YAXPAURecord@CIniFile@@QAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Destroy_range<std::allocator<CIniFile::Record> >
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1605 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00011	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00021	51		 push	 ecx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00U?$integral_constant@_N$00@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept1

; 1608 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1609 :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1595 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1596 :         // move [_First, _Last) to raw _Dest, using allocator
; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Uninitialized_move<CIniFile::Record *,std::allocator<CIniFile::Record> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1598 :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove, COMDAT
; _this$ = ecx

; 1591 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@YAPAURecord@CIniFile@@QAU12@0PAU12@AAV?$allocator@URecord@CIniFile@@@0@@Z ; std::_Uninitialized_move<CIniFile::Record *,std::allocator<CIniFile::Record> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1593 :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEPAURecord@CIniFile@@PAU34@00@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[], COMDAT
; _this$ = ecx

; 1497 :     _NODISCARD _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00012	6b 45 08 64	 imul	 eax, DWORD PTR __Pos$[ebp], 100
  00016	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00019	03 01		 add	 eax, DWORD PTR [ecx]

; 1505 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?capacity@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::capacity, COMDAT
; _this$ = ecx

; 1492 :     _NODISCARD size_type capacity() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001d	99		 cdq
  0001e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00023	f7 f9		 idiv	 ecx

; 1495 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?capacity@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::max_size, COMDAT
; _this$ = ecx

; 1487 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1488 :         return (_STD min)(

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@ABEABV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAIABV?$allocator@URecord@CIniFile@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::max_size
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  00020	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00025	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00028	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0002b	50		 push	 eax
  0002c	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00035	83 c4 08	 add	 esp, 8
  00038	8b 00		 mov	 eax, DWORD PTR [eax]

; 1489 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1490 :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?max_size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size, COMDAT
; _this$ = ecx

; 1482 :     _NODISCARD size_type size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001d	99		 cdq
  0001e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00023	f7 f9		 idiv	 ecx

; 1485 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -76						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::empty, COMDAT
; _this$ = ecx

; 1477 :     _NODISCARD bool empty() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1478 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0001d	75 09		 jne	 SHORT $LN3@empty
  0001f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00028	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@empty:
  0002f	8a 45 b4	 mov	 al, BYTE PTR tv69[ebp]

; 1480 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end, COMDAT
; _this$ = ecx

; 1419 :     _NODISCARD iterator end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1420 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	52		 push	 edx
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1422 :     }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin, COMDAT
; _this$ = ecx

; 1409 :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1410 :         auto& _My_data = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	52		 push	 edx
  00025	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00028	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1412 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::clear, COMDAT
; _this$ = ecx

; 1383 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1384 :         auto& _My_data    = _Mypair._Myval2;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1385 :         pointer& _Myfirst = _My_data._Myfirst;

  00031	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00034	89 45 e8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1386 :         pointer& _Mylast  = _My_data._Mylast;

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	83 c0 04	 add	 eax, 4
  0003d	89 45 e4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1387 : 
; 1388 :         _My_data._Orphan_all();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1389 :         _Destroy(_Myfirst, _Mylast);

  00048	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Destroy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXPAURecord@CIniFile@@0@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Destroy

; 1390 :         _Mylast = _Myfirst;

  0005c	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	89 10		 mov	 DWORD PTR [eax], edx

; 1391 :     }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::clear
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Mylast$ = -28						; size = 4
__My_data$ = -24					; size = 4
__Whereptr$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::erase, COMDAT
; _this$ = ecx

; 1341 :     iterator erase(const_iterator _Where) noexcept(is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1342 :         const pointer _Whereptr = _Where._Ptr;

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __Whereptr$[ebp], eax

; 1343 :         auto& _My_data          = _Mypair._Myval2;

  00031	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00034	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1344 :         pointer& _Mylast        = _My_data._Mylast;

  00037	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	83 c0 04	 add	 eax, 4
  0003d	89 45 e4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1345 : 
; 1346 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1347 :         _STL_VERIFY(
; 1348 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Mylast > _Whereptr,
; 1349 :             "vector erase iterator outside range");
; 1350 :         _Orphan_range(_Whereptr, _Mylast);
; 1351 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 
; 1353 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  00040	8b 45 ec	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00043	50		 push	 eax
  00044	8b 4d e4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	52		 push	 edx
  0004a	8b 45 ec	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0004d	83 c0 64	 add	 eax, 100		; 00000064H
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Move_unchecked@PAURecord@CIniFile@@PAU12@@std@@YAPAURecord@CIniFile@@PAU12@00@Z ; std::_Move_unchecked<CIniFile::Record *,CIniFile::Record *>
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1354 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));

  00059	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	83 e9 64	 sub	 ecx, 100		; 00000064H
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??$_Unfancy@URecord@CIniFile@@@std@@YAPAURecord@CIniFile@@PAU12@@Z ; std::_Unfancy<CIniFile::Record>
  00067	83 c4 04	 add	 esp, 4
  0006a	50		 push	 eax
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$destroy@URecord@CIniFile@@@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAXAAV?$allocator@URecord@CIniFile@@@1@QAURecord@CIniFile@@@Z ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::destroy<CIniFile::Record>
  00079	83 c4 08	 add	 esp, 8

; 1355 :         --_Mylast;

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	83 e9 64	 sub	 ecx, 100		; 00000064H
  00084	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00087	89 0a		 mov	 DWORD PTR [edx], ecx

; 1356 :         return iterator(_Whereptr, _STD addressof(_My_data));

  00089	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >
  00092	83 c4 04	 add	 esp, 4
  00095	50		 push	 eax
  00096	8b 4d ec	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00099	51		 push	 ecx
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009d	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE@PAURecord@CIniFile@@PBU_Container_base0@1@@Z
  000a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1357 :     }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
  000b9	cc		 int	 3
  000ba	cc		 int	 3
  000bb	cc		 int	 3
  000bc	cc		 int	 3
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::erase
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?insert@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@ABURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@ABURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::insert, COMDAT
; _this$ = ecx

; 800  :     iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 801  :         return emplace(_Where, _Val);

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	52		 push	 edx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$emplace@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@1@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace<CIniFile::Record const &>
  00020	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 802  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@ABURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back, COMDAT
; _this$ = ecx

; 716  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 717  :         emplace_back(_Val);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$emplace_back@ABURecord@CIniFile@@@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::emplace_back<CIniFile::Record const &>

; 718  :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -71						; size = 1
$T2 = -70						; size = 1
$T3 = -69						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEAAV?$allocator@URecord@CIniFile@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@URecord@CIniFile@@@std@@@std@@YA$$QAV?$allocator@URecord@CIniFile@@@0@AAV10@@Z ; std::move<std::allocator<CIniFile::Record> &>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	0f b6 45 bb	 movzx	 eax, BYTE PTR $T3[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??$?0V?$allocator@URecord@CIniFile@@@std@@$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URecord@CIniFile@@@1@@Z ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><std::allocator<CIniFile::Record> >

; 582  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002b	8d 45 ba	 lea	 eax, DWORD PTR $T2[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 583  :         _Move_construct(_Right, true_type{});

  00037	33 c0		 xor	 eax, eax
  00039	88 45 b9	 mov	 BYTE PTR $T1[ebp], al
  0003c	0f b6 4d b9	 movzx	 ecx, BYTE PTR $T1[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00044	52		 push	 edx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Move_construct@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Move_construct

; 584  :     }

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ?_Move_construct@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Move_construct, COMDAT
; _this$ = ecx

; 556  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Take_contents@?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<CIniFile::Record> >::_Take_contents

; 558  :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?_Move_construct@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vector
;	COMDAT ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -70						; size = 1
$T2 = -69						; size = 1
_this$ = -4						; size = 4
??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ PROC ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >, COMDAT
; _this$ = ecx

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	0f b6 45 bb	 movzx	 eax, BYTE PTR $T2[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@URecord@CIniFile@@@std@@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1>::_Compressed_pair<std::allocator<CIniFile::Record>,std::_Vector_val<std::_Simple_types<CIniFile::Record> >,1><>

; 446  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00019	8d 45 ba	 lea	 eax, DWORD PTR $T1[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 447  :     }

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ENDP ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAIABV?$allocator@URecord@CIniFile@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAIABV?$allocator@URecord@CIniFile@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::max_size, COMDAT

; 702  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 703  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00009	b8 28 5c 8f 02	 mov	 eax, 42949672		; 028f5c28H

; 704  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@URecord@CIniFile@@@std@@@std@@SAIABV?$allocator@URecord@CIniFile@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CIniFile::Record> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?allocate@?$allocator@URecord@CIniFile@@@std@@QAEPAURecord@CIniFile@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@URecord@CIniFile@@@std@@QAEPAURecord@CIniFile@@I@Z PROC ; std::allocator<CIniFile::Record>::allocate, COMDAT
; _this$ = ecx

; 806  :     _NODISCARD __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0GE@@std@@YAII@Z ; std::_Get_size_of_n<100>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 808  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@URecord@CIniFile@@@std@@QAEPAURecord@CIniFile@@I@Z ENDP ; std::allocator<CIniFile::Record>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z PROC ; std::allocator<CIniFile::Record>::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	6b 45 0c 64	 imul	 eax, DWORD PTR __Count$[ebp], 100
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8

; 804  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?deallocate@?$allocator@URecord@CIniFile@@@std@@QAEXQAURecord@CIniFile@@I@Z ENDP ; std::allocator<CIniFile::Record>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0?$allocator@URecord@CIniFile@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@URecord@CIniFile@@@std@@QAE@XZ PROC	; std::allocator<CIniFile::Record>::allocator<CIniFile::Record>, COMDAT
; _this$ = ecx

; 795  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@URecord@CIniFile@@@std@@QAE@XZ ENDP	; std::allocator<CIniFile::Record>::allocator<CIniFile::Record>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 70	 add	 ecx, 112		; 00000070H
  00012	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 70	 add	 ecx, 112		; 00000070H
  0001d	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 e9 70	 sub	 ecx, 112		; 00000070H
  00012	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 14		 je	 SHORT $LN2@scalar
  0001f	68 b8 00 00 00	 push	 184			; 000000b8H
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 e8 70	 sub	 eax, 112		; 00000070H
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 e8 70	 sub	 eax, 112		; 00000070H
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 58		 push	 88			; 00000058H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 779  :     void _Set_back() { // set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 780  :         if (_Mysb::eback() != &_Mychar) { // save current get buffer

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001a	3b c1		 cmp	 eax, ecx
  0001c	74 1c		 je	 SHORT $LN2@Set_back

; 781  :             _Set_eback = _Mysb::eback();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 782  :             _Set_egptr = _Mysb::egptr();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	89 41 54	 mov	 DWORD PTR [ecx+84], eax
$LN2@Set_back:

; 783  :         }
; 784  :         _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 3d	 add	 eax, 61			; 0000003dH
  00040	50		 push	 eax
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00047	51		 push	 ecx
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	83 c2 3c	 add	 edx, 60			; 0000003cH
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 785  :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 773  :     void _Reset_back() { // restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 774  :         if (_Mysb::eback() == &_Mychar) {

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001a	3b c1		 cmp	 eax, ecx
  0001c	75 1d		 jne	 SHORT $LN1@Reset_back

; 775  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00024	51		 push	 ecx
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00032	52		 push	 edx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN1@Reset_back:

; 776  :         }
; 777  :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 756  :     void _Initcvt(const _Cvt& _Newcvt) { // initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 757  :         if (_Newcvt.always_noconv()) {

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Newcvt$[ebp]
  0000f	e8 00 00 00 00	 call	 ?always_noconv@codecvt_base@std@@QBE_NXZ ; std::codecvt_base::always_noconv
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 0c		 je	 SHORT $LN2@Initcvt

; 758  :             _Pcvt = nullptr; // nothing to do

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 759  :         } else { // set up for nontrivial codecvt facet

  00025	eb 1a		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 760  :             _Pcvt = _STD addressof(_Newcvt);

  00027	8b 45 08	 mov	 eax, DWORD PTR __Newcvt$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
  00030	83 c4 04	 add	 esp, 4
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 761  :             _Mysb::_Init(); // reset any buffering

  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
$LN1@Initcvt:

; 762  :         }
; 763  :     }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
tv140 = -132						; size = 4
tv94 = -132						; size = 4
$T1 = -128						; size = 4
$T2 = -124						; size = 4
__Count$3 = -56						; size = 4
__Dest$ = -52						; size = 4
__Str$ = -48						; size = 32
__Codecvt_temp_buf$ = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 720  :     bool _Endwrite() { // put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 721  :         if (!_Pcvt || !_Wrotesome) {

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00020	74 0b		 je	 SHORT $LN5@Endwrite
  00022	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00025	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  00029	85 c9		 test	 ecx, ecx
  0002b	75 07		 jne	 SHORT $LN4@Endwrite
$LN5@Endwrite:

; 722  :             return true;

  0002d	b0 01		 mov	 al, 1
  0002f	e9 f0 00 00 00	 jmp	 $LN1@Endwrite
$LN4@Endwrite:

; 723  :         }
; 724  : 
; 725  :         // may have to put
; 726  :         if (_Traits::eq_int_type(_Traits::eof(), overflow())) {

  00034	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00039	50		 push	 eax
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 10		 mov	 edx, DWORD PTR [eax]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00045	ff d0		 call	 eax
  00047	89 45 84	 mov	 DWORD PTR $T2[ebp], eax
  0004a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0004f	89 45 80	 mov	 DWORD PTR $T1[ebp], eax
  00052	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00055	51		 push	 ecx
  00056	8d 55 80	 lea	 edx, DWORD PTR $T1[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0005f	83 c4 08	 add	 esp, 8
  00062	0f b6 c0	 movzx	 eax, al
  00065	85 c0		 test	 eax, eax
  00067	74 07		 je	 SHORT $LN6@Endwrite

; 727  :             return false;

  00069	32 c0		 xor	 al, al
  0006b	e9 b4 00 00 00	 jmp	 $LN1@Endwrite
$LN6@Endwrite:

; 728  :         }
; 729  : 
; 730  :         constexpr size_t _Codecvt_temp_buf = 32;

  00070	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR __Codecvt_temp_buf$[ebp], 32 ; 00000020H

; 731  :         char _Str[_Codecvt_temp_buf];
; 732  :         char* _Dest;
; 733  :         switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest)) { // test result of homing conversion

  00077	8d 45 cc	 lea	 eax, DWORD PTR __Dest$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d f0	 lea	 ecx, DWORD PTR __Str$[ebp+32]
  0007e	51		 push	 ecx
  0007f	8d 55 d0	 lea	 edx, DWORD PTR __Str$[ebp]
  00082	52		 push	 edx
  00083	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	83 c0 40	 add	 eax, 64			; 00000040H
  00089	50		 push	 eax
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00090	e8 00 00 00 00	 call	 ?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::unshift
  00095	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv94[ebp], eax
  0009b	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR tv94[ebp], 0
  000a2	74 14		 je	 SHORT $LN7@Endwrite
  000a4	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR tv94[ebp], 1
  000ab	74 12		 je	 SHORT $LN8@Endwrite
  000ad	83 bd 7c ff ff
	ff 03		 cmp	 DWORD PTR tv94[ebp], 3
  000b4	74 61		 je	 SHORT $LN10@Endwrite
  000b6	eb 6a		 jmp	 SHORT $LN11@Endwrite
$LN7@Endwrite:

; 734  :         case codecvt_base::ok:
; 735  :             _Wrotesome = false; // homed successfully

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0
$LN8@Endwrite:

; 736  : 
; 737  :         case codecvt_base::partial: // fall through
; 738  :         { // put any generated bytes
; 739  :             const auto _Count = static_cast<size_t>(_Dest - _Str);

  000bf	8b 45 cc	 mov	 eax, DWORD PTR __Dest$[ebp]
  000c2	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  000c5	2b c1		 sub	 eax, ecx
  000c7	89 45 c8	 mov	 DWORD PTR __Count$3[ebp], eax

; 740  :             if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

  000ca	74 22		 je	 SHORT $LN9@Endwrite
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d2	51		 push	 ecx
  000d3	8b 55 c8	 mov	 edx, DWORD PTR __Count$3[ebp]
  000d6	52		 push	 edx
  000d7	6a 01		 push	 1
  000d9	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _fwrite
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
  000e5	39 45 c8	 cmp	 DWORD PTR __Count$3[ebp], eax
  000e8	74 04		 je	 SHORT $LN9@Endwrite

; 741  :                 return false; // write failed

  000ea	32 c0		 xor	 al, al
  000ec	eb 36		 jmp	 SHORT $LN1@Endwrite
$LN9@Endwrite:

; 742  :             }
; 743  : 
; 744  :             return !_Wrotesome;

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  000f5	85 c9		 test	 ecx, ecx
  000f7	75 0c		 jne	 SHORT $LN13@Endwrite
  000f9	c7 85 7c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv140[ebp], 1
  00103	eb 0a		 jmp	 SHORT $LN14@Endwrite
$LN13@Endwrite:
  00105	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN14@Endwrite:
  0010f	8a 85 7c ff ff
	ff		 mov	 al, BYTE PTR tv140[ebp]
  00115	eb 0d		 jmp	 SHORT $LN1@Endwrite
$LN10@Endwrite:

; 745  :         }
; 746  : 
; 747  :         case codecvt_base::noconv:
; 748  :             _Wrotesome = false; // homed successfully

  00117	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0

; 749  :             return true; // nothing else to do

  0011e	b0 01		 mov	 al, 1
  00120	eb 02		 jmp	 SHORT $LN1@Endwrite
$LN11@Endwrite:

; 750  : 
; 751  :         default:
; 752  :             return false; // conversion failed

  00122	32 c0		 xor	 al, al
$LN1@Endwrite:

; 753  :         }
; 754  :     }

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	33 cd		 xor	 ecx, ebp
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
tv66 = -88						; size = 4
__Nw$1 = -20						; size = 4
__Nr$2 = -16						; size = 4
__Pn$3 = -12						; size = 4
__Pb$4 = -8						; size = 4
_this$ = -4						; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 693  :     void _Init(FILE* _File, _Initfl _Which) { // initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 694  :         using _State_type = typename _Traits::state_type;
; 695  : 
; 696  :         __PURE_APPDOMAIN_GLOBAL static _State_type _Stinit; // initial state
; 697  : 
; 698  :         _Closef    = _Which == _Openfl;

  0000c	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00010	75 09		 jne	 SHORT $LN4@Init
  00012	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN5@Init
$LN4@Init:
  0001b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN5@Init:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8a 4d a8	 mov	 cl, BYTE PTR tv66[ebp]
  00028	88 48 48	 mov	 BYTE PTR [eax+72], cl

; 699  :         _Wrotesome = false;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0

; 700  : 
; 701  :         _Mysb::_Init(); // initialize stream buffer base object

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 702  : 
; 703  :         if (_File && sizeof(_Elem) == 1) { // point inside C stream with [first, first + count) buffer

  0003a	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  0003e	74 5c		 je	 SHORT $LN2@Init
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	85 c0		 test	 eax, eax
  00047	74 53		 je	 SHORT $LN2@Init

; 704  :             _Elem** _Pb = nullptr;

  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Pb$4[ebp], 0

; 705  :             _Elem** _Pn = nullptr;

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Pn$3[ebp], 0

; 706  :             int* _Nr    = nullptr;

  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Nr$2[ebp], 0

; 707  : 
; 708  :             ::_get_stream_buffer_pointers(

  0005e	8d 45 f0	 lea	 eax, DWORD PTR __Nr$2[ebp]
  00061	50		 push	 eax
  00062	8d 4d f4	 lea	 ecx, DWORD PTR __Pn$3[ebp]
  00065	51		 push	 ecx
  00066	8d 55 f8	 lea	 edx, DWORD PTR __Pb$4[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 __get_stream_buffer_pointers
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 709  :                 _File, reinterpret_cast<char***>(&_Pb), reinterpret_cast<char***>(&_Pn), &_Nr);
; 710  :             int* _Nw = _Nr;

  00076	8b 45 f0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  00079	89 45 ec	 mov	 DWORD PTR __Nw$1[ebp], eax

; 711  : 
; 712  :             _Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  0007c	8b 45 ec	 mov	 eax, DWORD PTR __Nw$1[ebp]
  0007f	50		 push	 eax
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  00083	51		 push	 ecx
  00084	8b 55 f8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  00087	52		 push	 edx
  00088	8b 45 f0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 f8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  00093	52		 push	 edx
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
$LN2@Init:

; 713  :         }
; 714  : 
; 715  :         _Myfile = _File;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  000a2	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 716  :         _State  = _Stinit;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  000ae	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  000b1	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  000b7	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 717  :         _Pcvt   = nullptr; // pointer to codecvt facet

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 718  :     }

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 688  :     virtual void __CLR_OR_THIS_CALL imbue(const locale& _Loc) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 689  :         // set locale to argument (capture nontrivial codecvt facet)
; 690  :         _Initcvt(_STD use_facet<_Cvt>(_Loc));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 691  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 680  :     virtual int __CLR_OR_THIS_CALL sync() override { // synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 681  :         if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), overflow()) || 0 <= _CSTD fflush(_Myfile)) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00013	74 48		 je	 SHORT $LN3@sync
  00015	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0001a	50		 push	 eax
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00026	ff d0		 call	 eax
  00028	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  0002b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00030	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00033	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  00036	51		 push	 ecx
  00037	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00040	83 c4 08	 add	 esp, 8
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	75 13		 jne	 SHORT $LN3@sync
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _fflush
  00056	83 c4 04	 add	 esp, 4
  00059	85 c0		 test	 eax, eax
  0005b	7c 04		 jl	 SHORT $LN2@sync
$LN3@sync:

; 682  :             return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 03		 jmp	 SHORT $LN1@sync
$LN2@sync:

; 683  :         }
; 684  : 
; 685  :         return -1;

  00061	83 c8 ff	 or	 eax, -1
$LN1@sync:

; 686  :     }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
__Size$ = -12						; size = 4
__Mode$ = -8						; size = 4
_this$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 661  :     virtual _Mysb* __CLR_OR_THIS_CALL setbuf(_Elem* _Buffer, streamsize _Count) override { // offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  :         int _Mode;
; 663  :         if (!_Buffer && _Count == 0) {

  0000c	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00010	75 11		 jne	 SHORT $LN2@setbuf
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00015	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  00018	75 09		 jne	 SHORT $LN2@setbuf

; 664  :             _Mode = _IONBF;

  0001a	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR __Mode$[ebp], 4

; 665  :         } else {

  00021	eb 07		 jmp	 SHORT $LN3@setbuf
$LN2@setbuf:

; 666  :             _Mode = _IOFBF;

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Mode$[ebp], 0
$LN3@setbuf:

; 667  :         }
; 668  : 
; 669  :         const size_t _Size = static_cast<size_t>(_Count) * sizeof(_Elem);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	89 45 f4	 mov	 DWORD PTR __Size$[ebp], eax

; 670  : 
; 671  :         if (!_Myfile || _CSTD setvbuf(_Myfile, reinterpret_cast<char*>(_Buffer), _Mode, _Size) != 0) {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00037	74 1f		 je	 SHORT $LN5@setbuf
  00039	8b 45 f4	 mov	 eax, DWORD PTR __Size$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR __Mode$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00044	52		 push	 edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _setvbuf
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	74 04		 je	 SHORT $LN4@setbuf
$LN5@setbuf:

; 672  :             return nullptr; // failed

  00058	33 c0		 xor	 eax, eax
  0005a	eb 14		 jmp	 SHORT $LN1@setbuf
$LN4@setbuf:

; 673  :         }
; 674  : 
; 675  :         // new buffer, reinitialize pointers
; 676  :         _Init(_Myfile, _Openfl);

  0005c	6a 01		 push	 1
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00064	51		 push	 ecx
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 677  :         return this;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@setbuf:

; 678  :     }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
$T1 = -84						; size = 8
__Off$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 648  :         pos_type _Pos, ios_base::openmode = ios_base::in | ios_base::out) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 649  :         // change position to _Pos
; 650  :         off_type _Off = static_cast<off_type>(_Pos);

  0000c	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  0000f	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00014	89 45 f4	 mov	 DWORD PTR __Off$[ebp], eax
  00017	89 55 f8	 mov	 DWORD PTR __Off$[ebp+4], edx

; 651  : 
; 652  :         if (!_Myfile || !_Endwrite() || _CSTD fsetpos(_Myfile, &_Off) != 0) {

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00021	74 26		 je	 SHORT $LN3@seekpos
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	74 17		 je	 SHORT $LN3@seekpos
  00032	8d 45 f4	 lea	 eax, DWORD PTR __Off$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _fsetpos
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	74 11		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 653  :             return pos_type(-1); // report failure

  00049	6a ff		 push	 -1
  0004b	6a ff		 push	 -1
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00050	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00055	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00058	eb 40		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:

; 654  :         }
; 655  : 
; 656  :         _State = _Pos.state();

  0005a	8d 45 ac	 lea	 eax, DWORD PTR $T1[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00061	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00071	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 657  :         _Reset_back(); // revert from _Mychar buffer, discarding any putback

  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 658  :         return pos_type(_State, _Off); // return new position

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0007f	50		 push	 eax
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __Off$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00087	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0008a	50		 push	 eax
  0008b	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0008e	51		 push	 ecx
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekpos:

; 659  :     }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -12					; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 628  :         ios_base::openmode = ios_base::in | ios_base::out) override { // change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 629  :         fpos_t _Fileposition;
; 630  : 
; 631  :         if (_Mysb::gptr() == &_Mychar // something putback
; 632  :             && _Way == ios_base::cur // a relative seek
; 633  :             && !_Pcvt) { // not converting

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001a	3b c1		 cmp	 eax, ecx
  0001c	75 21		 jne	 SHORT $LN2@seekoff
  0001e	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00022	75 1b		 jne	 SHORT $LN2@seekoff
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0002b	75 12		 jne	 SHORT $LN2@seekoff

; 634  :             _Off -= static_cast<off_type>(sizeof(_Elem)); // back up over _Elem bytes

  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00030	83 e8 01	 sub	 eax, 1
  00033	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00036	83 d9 00	 sbb	 ecx, 0
  00039	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  0003c	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN2@seekoff:

; 635  :         }
; 636  : 
; 637  :         if (!_Myfile || !_Endwrite()
; 638  :             || ((_Off != 0 || _Way != ios_base::cur) && _CSTD _fseeki64(_Myfile, _Off, _Way) != 0)
; 639  :             || _CSTD fgetpos(_Myfile, &_Fileposition) != 0) {

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00046	74 53		 je	 SHORT $LN4@seekoff
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00050	0f b6 c0	 movzx	 eax, al
  00053	85 c0		 test	 eax, eax
  00055	74 44		 je	 SHORT $LN4@seekoff
  00057	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0005a	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  0005d	75 06		 jne	 SHORT $LN6@seekoff
  0005f	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00063	74 1f		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  00065	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00068	50		 push	 eax
  00069	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0006c	51		 push	 ecx
  0006d	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00070	52		 push	 edx
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 __fseeki64
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	85 c0		 test	 eax, eax
  00082	75 17		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  00084	8d 45 f4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _fgetpos
  00094	83 c4 08	 add	 esp, 8
  00097	85 c0		 test	 eax, eax
  00099	74 11		 je	 SHORT $LN3@seekoff
$LN4@seekoff:

; 640  :             return pos_type(-1); // report failure

  0009b	6a ff		 push	 -1
  0009d	6a ff		 push	 -1
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a2	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000aa	eb 26		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:

; 641  :         }
; 642  : 
; 643  :         _Reset_back(); // revert from _Mychar buffer, discarding any putback

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 644  :         return pos_type(_State, _Fileposition); // return new position

  000b4	8b 45 f8	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  000b7	50		 push	 eax
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000c2	50		 push	 eax
  000c3	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  000c6	51		 push	 ecx
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ca	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000cf	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekoff:

; 645  :     }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Size$1 = -20						; size = 8
__Start_count$2 = -12					; size = 8
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 596  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 597  :         // put _Count characters to stream
; 598  :         if _CONSTEXPR_IF (sizeof(_Elem) == 1) {
; 599  :             if (_Pcvt) { // if we need a nontrivial codecvt transform, do the default expensive thing

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00013	74 19		 je	 SHORT $LN2@xsputn

; 600  :                 return _Mysb::xsputn(_Ptr, _Count);

  00015	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
  00029	e9 e2 00 00 00	 jmp	 $LN1@xsputn
$LN2@xsputn:

; 601  :             }
; 602  : 
; 603  :             const streamsize _Start_count = _Count;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00031	89 45 f4	 mov	 DWORD PTR __Start_count$2[ebp], eax
  00034	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00037	89 4d f8	 mov	 DWORD PTR __Start_count$2[ebp+4], ecx

; 604  :             streamsize _Size              = _Mysb::_Pnavail();

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00042	89 45 ec	 mov	 DWORD PTR __Size$1[ebp], eax
  00045	89 55 f0	 mov	 DWORD PTR __Size$1[ebp+4], edx

; 605  :             if (0 < _Count && 0 < _Size) { // copy to write buffer

  00048	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  0004c	7c 74		 jl	 SHORT $LN3@xsputn
  0004e	7f 06		 jg	 SHORT $LN7@xsputn
  00050	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00054	76 6c		 jbe	 SHORT $LN3@xsputn
$LN7@xsputn:
  00056	83 7d f0 00	 cmp	 DWORD PTR __Size$1[ebp+4], 0
  0005a	7c 66		 jl	 SHORT $LN3@xsputn
  0005c	7f 06		 jg	 SHORT $LN8@xsputn
  0005e	83 7d ec 00	 cmp	 DWORD PTR __Size$1[ebp], 0
  00062	76 5e		 jbe	 SHORT $LN3@xsputn
$LN8@xsputn:

; 606  :                 if (_Count < _Size) {

  00064	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00067	3b 45 f0	 cmp	 eax, DWORD PTR __Size$1[ebp+4]
  0006a	7f 16		 jg	 SHORT $LN4@xsputn
  0006c	7c 08		 jl	 SHORT $LN9@xsputn
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00071	3b 4d ec	 cmp	 ecx, DWORD PTR __Size$1[ebp]
  00074	73 0c		 jae	 SHORT $LN4@xsputn
$LN9@xsputn:

; 607  :                     _Size = _Count;

  00076	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00079	89 45 ec	 mov	 DWORD PTR __Size$1[ebp], eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  0007f	89 4d f0	 mov	 DWORD PTR __Size$1[ebp+4], ecx
$LN4@xsputn:

; 608  :                 }
; 609  : 
; 610  :                 _Traits::copy(_Mysb::pptr(), _Ptr, static_cast<size_t>(_Size));

  00082	8b 45 ec	 mov	 eax, DWORD PTR __Size$1[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00089	51		 push	 ecx
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 611  :                 _Ptr += _Size;

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Size$1[ebp]
  0009e	03 45 08	 add	 eax, DWORD PTR __Ptr$[ebp]
  000a1	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 612  :                 _Count -= _Size;

  000a4	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000a7	2b 45 ec	 sub	 eax, DWORD PTR __Size$1[ebp]
  000aa	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  000ad	1b 4d f0	 sbb	 ecx, DWORD PTR __Size$1[ebp+4]
  000b0	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  000b3	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 613  :                 _Mysb::pbump(static_cast<int>(_Size));

  000b6	8b 45 ec	 mov	 eax, DWORD PTR __Size$1[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
$LN3@xsputn:

; 614  :             }
; 615  : 
; 616  :             if (0 < _Count && _Myfile) { // open C stream, attempt write

  000c2	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  000c6	7c 3c		 jl	 SHORT $LN5@xsputn
  000c8	7f 06		 jg	 SHORT $LN10@xsputn
  000ca	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000ce	76 34		 jbe	 SHORT $LN5@xsputn
$LN10@xsputn:
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000d7	74 2b		 je	 SHORT $LN5@xsputn

; 617  :                 _Count -= _CSTD fwrite(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000df	51		 push	 ecx
  000e0	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000e3	52		 push	 edx
  000e4	6a 01		 push	 1
  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _fwrite
  000ef	83 c4 10	 add	 esp, 16			; 00000010H
  000f2	33 c9		 xor	 ecx, ecx
  000f4	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000f7	2b d0		 sub	 edx, eax
  000f9	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  000fc	1b c1		 sbb	 eax, ecx
  000fe	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  00101	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax
$LN5@xsputn:

; 618  :             }
; 619  : 
; 620  :             return _Start_count - _Count;

  00104	8b 45 f4	 mov	 eax, DWORD PTR __Start_count$2[ebp]
  00107	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  0010a	8b 55 f8	 mov	 edx, DWORD PTR __Start_count$2[ebp+4]
  0010d	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]
$LN1@xsputn:

; 621  :         } else { // non-chars always get element-by-element processing
; 622  :             return _Mysb::xsputn(_Ptr, _Count);
; 623  :         }
; 624  :     }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Actual_read$1 = -32					; size = 4
__Read_size$2 = -28					; size = 4
__Read_size$3 = -24					; size = 4
__Available$4 = -20					; size = 4
__Start_count$5 = -16					; size = 8
__Count_s$6 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 548  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 549  :         // get _Count characters from stream
; 550  :         if _CONSTEXPR_IF (sizeof(_Elem) == 1) {
; 551  :             if (_Count <= 0) {

  0000c	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00010	7f 11		 jg	 SHORT $LN4@xsgetn
  00012	7c 06		 jl	 SHORT $LN11@xsgetn
  00014	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00018	77 09		 ja	 SHORT $LN4@xsgetn
$LN11@xsgetn:

; 552  :                 return 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	33 d2		 xor	 edx, edx
  0001e	e9 37 01 00 00	 jmp	 $LN1@xsgetn
$LN4@xsgetn:

; 553  :             }
; 554  : 
; 555  :             if (_Pcvt) { // if we need a nontrivial codecvt transform, do the default expensive thing

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0002a	74 19		 je	 SHORT $LN5@xsgetn

; 556  :                 return _Mysb::xsgetn(_Ptr, _Count);

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00037	52		 push	 edx
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
  00040	e9 15 01 00 00	 jmp	 $LN1@xsgetn
$LN5@xsgetn:

; 557  :             }
; 558  : 
; 559  :             // assuming this is OK because _Ptr + _Count must be valid
; 560  :             auto _Count_s           = static_cast<size_t>(_Count);

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00048	89 45 f8	 mov	 DWORD PTR __Count_s$6[ebp], eax

; 561  :             const auto _Start_count = _Count;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0004e	89 45 f0	 mov	 DWORD PTR __Start_count$5[ebp], eax
  00051	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00054	89 4d f4	 mov	 DWORD PTR __Start_count$5[ebp+4], ecx

; 562  :             const auto _Available   = static_cast<size_t>(_Mysb::_Gnavail());

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  0005f	89 45 ec	 mov	 DWORD PTR __Available$4[ebp], eax

; 563  :             if (0 < _Available) { // copy from get area

  00062	83 7d ec 00	 cmp	 DWORD PTR __Available$4[ebp], 0
  00066	76 4c		 jbe	 SHORT $LN6@xsgetn

; 564  :                 const auto _Read_size = (_STD min)(_Count_s, _Available);

  00068	8d 45 ec	 lea	 eax, DWORD PTR __Available$4[ebp]
  0006b	50		 push	 eax
  0006c	8d 4d f8	 lea	 ecx, DWORD PTR __Count_s$6[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00075	83 c4 08	 add	 esp, 8
  00078	8b 10		 mov	 edx, DWORD PTR [eax]
  0007a	89 55 e8	 mov	 DWORD PTR __Read_size$3[ebp], edx

; 565  :                 _Traits::copy(_Ptr, _Mysb::gptr(), _Read_size);

  0007d	8b 45 e8	 mov	 eax, DWORD PTR __Read_size$3[ebp]
  00080	50		 push	 eax
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00089	50		 push	 eax
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 566  :                 _Ptr += _Read_size;

  00096	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00099	03 45 e8	 add	 eax, DWORD PTR __Read_size$3[ebp]
  0009c	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 567  :                 _Count_s -= _Read_size;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR __Count_s$6[ebp]
  000a2	2b 45 e8	 sub	 eax, DWORD PTR __Read_size$3[ebp]
  000a5	89 45 f8	 mov	 DWORD PTR __Count_s$6[ebp], eax

; 568  :                 _Mysb::gbump(static_cast<int>(_Read_size));

  000a8	8b 45 e8	 mov	 eax, DWORD PTR __Read_size$3[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
$LN6@xsgetn:

; 569  :             }
; 570  : 
; 571  :             if (_Myfile) { // open C stream, attempt read

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000bb	0f 84 8a 00 00
	00		 je	 $LN7@xsgetn

; 572  :                 _Reset_back(); // revert from _Mychar buffer

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 573  :                 // process in 4k - 1 chunks to avoid tripping over fread's clobber-the-end behavior when
; 574  :                 // doing \r\n -> \n translation
; 575  :                 constexpr size_t _Read_size = 4095; // _INTERNAL_BUFSIZ - 1

  000c9	c7 45 e4 ff 0f
	00 00		 mov	 DWORD PTR __Read_size$2[ebp], 4095 ; 00000fffH
$LN2@xsgetn:

; 576  :                 while (_Read_size < _Count_s) {

  000d0	81 7d f8 ff 0f
	00 00		 cmp	 DWORD PTR __Count_s$6[ebp], 4095 ; 00000fffH
  000d7	76 4b		 jbe	 SHORT $LN3@xsgetn

; 577  :                     const auto _Actual_read = _CSTD fread(_Ptr, sizeof(_Elem), _Read_size, _Myfile);

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000df	51		 push	 ecx
  000e0	68 ff 0f 00 00	 push	 4095			; 00000fffH
  000e5	6a 01		 push	 1
  000e7	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000ea	52		 push	 edx
  000eb	e8 00 00 00 00	 call	 _fread
  000f0	83 c4 10	 add	 esp, 16			; 00000010H
  000f3	89 45 e0	 mov	 DWORD PTR __Actual_read$1[ebp], eax

; 578  :                     _Ptr += _Actual_read;

  000f6	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f9	03 45 e0	 add	 eax, DWORD PTR __Actual_read$1[ebp]
  000fc	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 579  :                     _Count_s -= _Actual_read;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR __Count_s$6[ebp]
  00102	2b 45 e0	 sub	 eax, DWORD PTR __Actual_read$1[ebp]
  00105	89 45 f8	 mov	 DWORD PTR __Count_s$6[ebp], eax

; 580  :                     if (_Actual_read != _Read_size) {

  00108	81 7d e0 ff 0f
	00 00		 cmp	 DWORD PTR __Actual_read$1[ebp], 4095 ; 00000fffH
  0010f	74 11		 je	 SHORT $LN8@xsgetn

; 581  :                         return static_cast<streamsize>(_Start_count - _Count_s);

  00111	33 c0		 xor	 eax, eax
  00113	8b 4d f0	 mov	 ecx, DWORD PTR __Start_count$5[ebp]
  00116	2b 4d f8	 sub	 ecx, DWORD PTR __Count_s$6[ebp]
  00119	8b 55 f4	 mov	 edx, DWORD PTR __Start_count$5[ebp+4]
  0011c	1b d0		 sbb	 edx, eax
  0011e	8b c1		 mov	 eax, ecx
  00120	eb 38		 jmp	 SHORT $LN1@xsgetn
$LN8@xsgetn:

; 582  :                     }
; 583  :                 }

  00122	eb ac		 jmp	 SHORT $LN2@xsgetn
$LN3@xsgetn:

; 584  : 
; 585  :                 if (0 < _Count_s) {

  00124	83 7d f8 00	 cmp	 DWORD PTR __Count_s$6[ebp], 0
  00128	76 21		 jbe	 SHORT $LN7@xsgetn

; 586  :                     _Count_s -= _CSTD fread(_Ptr, sizeof(_Elem), _Count_s, _Myfile);

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00130	51		 push	 ecx
  00131	8b 55 f8	 mov	 edx, DWORD PTR __Count_s$6[ebp]
  00134	52		 push	 edx
  00135	6a 01		 push	 1
  00137	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _fread
  00140	83 c4 10	 add	 esp, 16			; 00000010H
  00143	8b 4d f8	 mov	 ecx, DWORD PTR __Count_s$6[ebp]
  00146	2b c8		 sub	 ecx, eax
  00148	89 4d f8	 mov	 DWORD PTR __Count_s$6[ebp], ecx
$LN7@xsgetn:

; 587  :                 }
; 588  :             }
; 589  : 
; 590  :             return static_cast<streamsize>(_Start_count - _Count_s);

  0014b	33 c0		 xor	 eax, eax
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __Start_count$5[ebp]
  00150	2b 4d f8	 sub	 ecx, DWORD PTR __Count_s$6[ebp]
  00153	8b 55 f4	 mov	 edx, DWORD PTR __Start_count$5[ebp+4]
  00156	1b d0		 sbb	 edx, eax
  00158	8b c1		 mov	 eax, ecx
$LN1@xsgetn:

; 591  :         } else { // non-chars always get element-by-element processing
; 592  :             return _Mysb::xsgetn(_Ptr, _Count);
; 593  :         }
; 594  :     }

  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv169 = -152						; size = 4
tv139 = -152						; size = 4
$T2 = -148						; size = 4
$T3 = -144						; size = 4
$T4 = -140						; size = 4
$T5 = -136						; size = 4
__Nleft$6 = -68						; size = 4
__Dest$7 = -64						; size = 4
__Ch$8 = -58						; size = 1
__Meta$9 = -56						; size = 4
__Src$10 = -52						; size = 4
__Str$ = -48						; size = 24
__Ch$11 = -21						; size = 1
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 490  :     virtual int_type __CLR_OR_THIS_CALL uflow() override { // get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 491  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  00031	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00039	85 c0		 test	 eax, eax
  0003b	74 2c		 je	 SHORT $LN9@uflow
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00045	8b f0		 mov	 esi, eax
  00047	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  0004f	3b f0		 cmp	 esi, eax
  00051	73 16		 jae	 SHORT $LN9@uflow

; 492  :             return _Traits::to_int_type(*_Mysb::_Gninc()); // return buffered

  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00061	83 c4 04	 add	 esp, 4
  00064	e9 1c 02 00 00	 jmp	 $LN1@uflow
$LN9@uflow:

; 493  :         }
; 494  : 
; 495  :         if (!_Myfile) {

  00069	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00070	75 0a		 jne	 SHORT $LN10@uflow

; 496  :             return _Traits::eof(); // no open C stream, fail

  00072	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00077	e9 09 02 00 00	 jmp	 $LN1@uflow
$LN10@uflow:

; 497  :         }
; 498  : 
; 499  :         _Reset_back(); // revert from _Mychar buffer

  0007c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 500  :         if (!_Pcvt) { // no codecvt facet, just get it

  00084	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00087	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0008b	75 44		 jne	 SHORT $LN11@uflow

; 501  :             _Elem _Ch;
; 502  :             return _Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch) : _Traits::eof();

  0008d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00093	51		 push	 ecx
  00094	8d 55 eb	 lea	 edx, DWORD PTR __Ch$11[ebp]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  0009d	83 c4 08	 add	 esp, 8
  000a0	0f b6 c0	 movzx	 eax, al
  000a3	85 c0		 test	 eax, eax
  000a5	74 14		 je	 SHORT $LN18@uflow
  000a7	8d 4d eb	 lea	 ecx, DWORD PTR __Ch$11[ebp]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  000b0	83 c4 04	 add	 esp, 4
  000b3	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
  000b9	eb 0b		 jmp	 SHORT $LN19@uflow
$LN18@uflow:
  000bb	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000c0	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN19@uflow:
  000c6	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv139[ebp]
  000cc	e9 b4 01 00 00	 jmp	 $LN1@uflow
$LN11@uflow:

; 503  :         }
; 504  : 
; 505  :         // build string until codecvt succeeds
; 506  :         string _Str;

  000d1	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  000d4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@uflow:

; 507  : 
; 508  :         for (;;) { // get using codecvt facet
; 509  :             const char* _Src;
; 510  :             int _Meta = _CSTD fgetc(_Myfile);

  000e0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _fgetc
  000ec	83 c4 04	 add	 esp, 4
  000ef	89 45 c8	 mov	 DWORD PTR __Meta$9[ebp], eax

; 511  : 
; 512  :             if (_Meta == EOF) {

  000f2	83 7d c8 ff	 cmp	 DWORD PTR __Meta$9[ebp], -1
  000f6	75 25		 jne	 SHORT $LN12@uflow

; 513  :                 return _Traits::eof(); // partial char?

  000f8	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000fd	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00103	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010a	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  0010d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00112	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00118	e9 68 01 00 00	 jmp	 $LN1@uflow
$LN12@uflow:

; 514  :             }
; 515  : 
; 516  :             _Str.push_back(static_cast<char>(_Meta)); // append byte and convert

  0011d	0f b6 45 c8	 movzx	 eax, BYTE PTR __Meta$9[ebp]
  00121	50		 push	 eax
  00122	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00125	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 517  : 
; 518  :             _Elem _Ch;
; 519  :             _Elem* _Dest;
; 520  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1,

  0012a	8d 45 c0	 lea	 eax, DWORD PTR __Dest$7[ebp]
  0012d	50		 push	 eax
  0012e	8d 4d c7	 lea	 ecx, DWORD PTR __Ch$8[ebp+1]
  00131	51		 push	 ecx
  00132	8d 55 c6	 lea	 edx, DWORD PTR __Ch$8[ebp]
  00135	52		 push	 edx
  00136	8d 45 cc	 lea	 eax, DWORD PTR __Src$10[ebp]
  00139	50		 push	 eax
  0013a	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  0013d	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00142	8b f0		 mov	 esi, eax
  00144	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00147	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0014c	03 f0		 add	 esi, eax
  0014e	56		 push	 esi
  0014f	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00152	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00157	50		 push	 eax
  00158	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	83 c1 40	 add	 ecx, 64			; 00000040H
  0015e	51		 push	 ecx
  0015f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00162	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00165	e8 00 00 00 00	 call	 ?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::in
  0016a	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv169[ebp], eax
  00170	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv169[ebp], 0
  00177	0f 8c d2 00 00
	00		 jl	 $LN16@uflow
  0017d	83 bd 68 ff ff
	ff 01		 cmp	 DWORD PTR tv169[ebp], 1
  00184	7e 12		 jle	 SHORT $LN13@uflow
  00186	83 bd 68 ff ff
	ff 03		 cmp	 DWORD PTR tv169[ebp], 3
  0018d	0f 84 94 00 00
	00		 je	 $LN15@uflow
  00193	e9 b7 00 00 00	 jmp	 $LN16@uflow
$LN13@uflow:

; 521  :                 _Dest)) { // test result of converting one element
; 522  :             case codecvt_base::partial:
; 523  :             case codecvt_base::ok:
; 524  :                 if (_Dest != &_Ch) { // got an element, put back excess and deliver it

  00198	8d 45 c6	 lea	 eax, DWORD PTR __Ch$8[ebp]
  0019b	39 45 c0	 cmp	 DWORD PTR __Dest$7[ebp], eax
  0019e	74 6d		 je	 SHORT $LN14@uflow

; 525  :                     auto _Nleft = _Str.data() + _Str.size() - _Src;

  001a0	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  001a3	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  001a8	8b f0		 mov	 esi, eax
  001aa	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  001ad	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001b2	03 f0		 add	 esi, eax
  001b4	2b 75 cc	 sub	 esi, DWORD PTR __Src$10[ebp]
  001b7	89 75 bc	 mov	 DWORD PTR __Nleft$6[ebp], esi
$LN7@uflow:

; 526  :                     while (0 < _Nleft) {

  001ba	83 7d bc 00	 cmp	 DWORD PTR __Nleft$6[ebp], 0
  001be	7e 24		 jle	 SHORT $LN8@uflow

; 527  :                         _CSTD ungetc(_Src[--_Nleft], _Myfile);

  001c0	8b 45 bc	 mov	 eax, DWORD PTR __Nleft$6[ebp]
  001c3	83 e8 01	 sub	 eax, 1
  001c6	89 45 bc	 mov	 DWORD PTR __Nleft$6[ebp], eax
  001c9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001cc	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  001cf	52		 push	 edx
  001d0	8b 45 cc	 mov	 eax, DWORD PTR __Src$10[ebp]
  001d3	03 45 bc	 add	 eax, DWORD PTR __Nleft$6[ebp]
  001d6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _ungetc
  001df	83 c4 08	 add	 esp, 8

; 528  :                     }

  001e2	eb d6		 jmp	 SHORT $LN7@uflow
$LN8@uflow:

; 529  : 
; 530  :                     return _Traits::to_int_type(_Ch);

  001e4	8d 45 c6	 lea	 eax, DWORD PTR __Ch$8[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  001ed	83 c4 04	 add	 esp, 4
  001f0	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001f6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001fd	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00200	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00205	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  0020b	eb 78		 jmp	 SHORT $LN1@uflow
$LN14@uflow:

; 531  :                 }
; 532  : 
; 533  :                 _Str.erase(0, static_cast<size_t>(_Src - _Str.data())); // partial, discard used input

  0020d	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00210	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00215	8b 4d cc	 mov	 ecx, DWORD PTR __Src$10[ebp]
  00218	2b c8		 sub	 ecx, eax
  0021a	51		 push	 ecx
  0021b	6a 00		 push	 0
  0021d	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00220	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 534  :                 break;

  00225	eb 4a		 jmp	 SHORT $LN5@uflow
$LN15@uflow:

; 535  : 
; 536  :             case codecvt_base::noconv:
; 537  :                 // noconv is only possible if _Elem is char, so we can use it directly
; 538  :                 return static_cast<int_type>(_Str.front());

  00227	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  0022a	e8 00 00 00 00	 call	 ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
  0022f	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00232	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00238	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0023f	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00242	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00247	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0024d	eb 36		 jmp	 SHORT $LN1@uflow
$LN16@uflow:

; 539  : 
; 540  :             default:
; 541  :                 return _Traits::eof(); // conversion failed

  0024f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00254	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0025a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00261	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00264	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00269	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0026f	eb 14		 jmp	 SHORT $LN1@uflow
$LN5@uflow:

; 542  :             }
; 543  :         }

  00271	e9 6a fe ff ff	 jmp	 $LN4@uflow

; 544  :     }

  00276	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0027d	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00280	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@uflow:
  00285	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00288	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0028f	59		 pop	 ecx
  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5b		 pop	 ebx
  00293	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00296	33 cd		 xor	 ecx, ebp
  00298	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029d	8b e5		 mov	 esp, ebp
  0029f	5d		 pop	 ebp
  002a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
__Meta$ = -8						; size = 4
_this$ = -4						; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 478  :     virtual int_type __CLR_OR_THIS_CALL underflow() override { // get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 479  :         int_type _Meta;
; 480  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00014	85 c0		 test	 eax, eax
  00016	74 2b		 je	 SHORT $LN2@underflow
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00020	8b f0		 mov	 esi, eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  0002a	3b f0		 cmp	 esi, eax
  0002c	73 15		 jae	 SHORT $LN2@underflow

; 481  :             return _Traits::to_int_type(*_Mysb::gptr()); // return buffered

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  0003c	83 c4 04	 add	 esp, 4
  0003f	eb 4c		 jmp	 SHORT $LN1@underflow
  00041	eb 4a		 jmp	 SHORT $LN1@underflow
$LN2@underflow:

; 482  :         } else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow())) {

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 10		 mov	 edx, DWORD PTR [eax]
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004e	ff d0		 call	 eax
  00050	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  00053	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00058	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  0005b	8d 4d f8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  0005e	51		 push	 ecx
  0005f	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00068	83 c4 08	 add	 esp, 8
  0006b	0f b6 c0	 movzx	 eax, al
  0006e	85 c0		 test	 eax, eax
  00070	74 07		 je	 SHORT $LN4@underflow

; 483  :             return _Meta; // uflow failed, return EOF

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
  00075	eb 16		 jmp	 SHORT $LN1@underflow

; 484  :         } else { // get a char, don't point past it

  00077	eb 14		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 485  :             pbackfail(_Meta);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00088	ff d0		 call	 eax

; 486  :             return _Meta;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@underflow:

; 487  :         }
; 488  :     }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -81						; size = 1
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
_this$ = -4						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 457  :     virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type _Meta = _Traits::eof()) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 458  :         // put an element back to stream
; 459  :         if (_Mysb::gptr() && _Mysb::eback() < _Mysb::gptr()
; 460  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00014	85 c0		 test	 eax, eax
  00016	0f 84 88 00 00
	00		 je	 $LN2@pbackfail
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00024	8b f0		 mov	 esi, eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0002e	3b f0		 cmp	 esi, eax
  00030	73 72		 jae	 SHORT $LN2@pbackfail
  00032	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00037	89 45 b8	 mov	 DWORD PTR $T4[ebp], eax
  0003a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00047	83 c4 08	 add	 esp, 8
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	85 d2		 test	 edx, edx
  0004f	75 35		 jne	 SHORT $LN4@pbackfail
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00059	b9 01 00 00 00	 mov	 ecx, 1
  0005e	6b d1 ff	 imul	 edx, ecx, -1
  00061	03 c2		 add	 eax, edx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
  0006f	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00072	50		 push	 eax
  00073	8d 4d b4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0007c	83 c4 08	 add	 esp, 8
  0007f	0f b6 d0	 movzx	 edx, al
  00082	85 d2		 test	 edx, edx
  00084	74 1e		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 461  :                 || _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 462  :                     _Meta))) { // just back up position
; 463  :             _Mysb::_Gndec();

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec

; 464  :             return _Traits::not_eof(_Meta);

  0008e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z ; std::_Narrow_char_traits<char,int>::not_eof
  00097	83 c4 04	 add	 esp, 4
  0009a	e9 a7 00 00 00	 jmp	 $LN1@pbackfail
  0009f	e9 a2 00 00 00	 jmp	 $LN1@pbackfail
$LN2@pbackfail:

; 465  :         } else if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), _Meta)) {

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000ab	74 1f		 je	 SHORT $LN7@pbackfail
  000ad	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000b2	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000b5	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000c2	83 c4 08	 add	 esp, 8
  000c5	0f b6 d0	 movzx	 edx, al
  000c8	85 d2		 test	 edx, edx
  000ca	74 09		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:

; 466  :             return _Traits::eof(); // no open C stream or EOF, fail

  000cc	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000d1	eb 73		 jmp	 SHORT $LN1@pbackfail
  000d3	eb 71		 jmp	 SHORT $LN1@pbackfail
$LN5@pbackfail:

; 467  :         } else if (!_Pcvt && _Ungetc(_Traits::to_char_type(_Meta), _Myfile)) {

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000dc	75 30		 jne	 SHORT $LN8@pbackfail
  000de	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000e7	83 c4 04	 add	 esp, 4
  000ea	88 45 af	 mov	 BYTE PTR $T1[ebp], al
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000f3	52		 push	 edx
  000f4	8d 45 af	 lea	 eax, DWORD PTR $T1[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  000fd	83 c4 08	 add	 esp, 8
  00100	0f b6 c8	 movzx	 ecx, al
  00103	85 c9		 test	 ecx, ecx
  00105	74 07		 je	 SHORT $LN8@pbackfail

; 468  :             return _Meta; // no facet and unget succeeded, return

  00107	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0010a	eb 3a		 jmp	 SHORT $LN1@pbackfail
  0010c	eb 38		 jmp	 SHORT $LN1@pbackfail
$LN8@pbackfail:

; 469  :         } else if (_Mysb::gptr() != &_Mychar) { // putback to _Mychar

  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0011c	3b c1		 cmp	 eax, ecx
  0011e	74 21		 je	 SHORT $LN10@pbackfail

; 470  :             _Mychar = _Traits::to_char_type(_Meta);

  00120	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00129	83 c4 04	 add	 esp, 4
  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	88 41 3c	 mov	 BYTE PTR [ecx+60], al

; 471  :             _Set_back(); // switch to _Mychar buffer

  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 472  :             return _Meta;

  0013a	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0013d	eb 07		 jmp	 SHORT $LN1@pbackfail

; 473  :         } else {

  0013f	eb 05		 jmp	 SHORT $LN1@pbackfail
$LN10@pbackfail:

; 474  :             return _Traits::eof(); // nowhere to put back

  00141	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
$LN1@pbackfail:

; 475  :         }
; 476  :     }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
tv184 = -136						; size = 4
tv163 = -136						; size = 4
tv147 = -136						; size = 4
$T1 = -132						; size = 4
__Count$2 = -64						; size = 4
__Dest$ = -60						; size = 4
__Src$ = -56						; size = 4
__Ch$ = -50						; size = 1
__Str$ = -48						; size = 32
__Codecvt_temp_buf$ = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 406  :     virtual int_type __CLR_OR_THIS_CALL overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 407  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00019	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0001e	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00024	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00027	50		 push	 eax
  00028	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00034	83 c4 08	 add	 esp, 8
  00037	0f b6 d0	 movzx	 edx, al
  0003a	85 d2		 test	 edx, edx
  0003c	74 11		 je	 SHORT $LN4@overflow

; 408  :             return _Traits::not_eof(_Meta); // EOF, return success code

  0003e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z ; std::_Narrow_char_traits<char,int>::not_eof
  00047	83 c4 04	 add	 esp, 4
  0004a	e9 a2 01 00 00	 jmp	 $LN1@overflow
$LN4@overflow:

; 409  :         }
; 410  : 
; 411  :         if (_Mysb::pptr() && _Mysb::pptr() < _Mysb::epptr()) { // room in buffer, store it

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00057	85 c0		 test	 eax, eax
  00059	74 36		 je	 SHORT $LN5@overflow
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00063	8b f0		 mov	 esi, eax
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	73 20		 jae	 SHORT $LN5@overflow

; 412  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00071	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  0007a	83 c4 04	 add	 esp, 4
  0007d	8a d8		 mov	 bl, al
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  00087	88 18		 mov	 BYTE PTR [eax], bl

; 413  :             return _Meta;

  00089	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0008c	e9 60 01 00 00	 jmp	 $LN1@overflow
$LN5@overflow:

; 414  :         }
; 415  : 
; 416  :         if (!_Myfile) {

  00091	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00098	75 0a		 jne	 SHORT $LN6@overflow

; 417  :             return _Traits::eof(); // no open C stream, fail

  0009a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0009f	e9 4d 01 00 00	 jmp	 $LN1@overflow
$LN6@overflow:

; 418  :         }
; 419  : 
; 420  :         _Reset_back(); // revert from _Mychar buffer

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 421  :         if (!_Pcvt) { // no codecvt facet, put as is

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000af	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000b3	75 47		 jne	 SHORT $LN7@overflow

; 422  :             return _Fputc(_Traits::to_char_type(_Meta), _Myfile) ? _Meta : _Traits::eof();

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000bb	51		 push	 ecx
  000bc	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000c5	83 c4 04	 add	 esp, 4
  000c8	0f b6 c0	 movzx	 eax, al
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  000d1	83 c4 08	 add	 esp, 8
  000d4	0f b6 c8	 movzx	 ecx, al
  000d7	85 c9		 test	 ecx, ecx
  000d9	74 0b		 je	 SHORT $LN14@overflow
  000db	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  000de	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  000e4	eb 0b		 jmp	 SHORT $LN15@overflow
$LN14@overflow:
  000e6	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000eb	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
$LN15@overflow:
  000f1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  000f7	e9 f5 00 00 00	 jmp	 $LN1@overflow
$LN7@overflow:

; 423  :         }
; 424  : 
; 425  :         // put using codecvt facet
; 426  :         constexpr size_t _Codecvt_temp_buf = 32;

  000fc	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR __Codecvt_temp_buf$[ebp], 32 ; 00000020H

; 427  :         char _Str[_Codecvt_temp_buf];
; 428  :         const _Elem _Ch = _Traits::to_char_type(_Meta);

  00103	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  0010c	83 c4 04	 add	 esp, 4
  0010f	88 45 ce	 mov	 BYTE PTR __Ch$[ebp], al

; 429  :         const _Elem* _Src;
; 430  :         char* _Dest;
; 431  :         switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf,

  00112	8d 45 c4	 lea	 eax, DWORD PTR __Dest$[ebp]
  00115	50		 push	 eax
  00116	8d 4d f0	 lea	 ecx, DWORD PTR __Str$[ebp+32]
  00119	51		 push	 ecx
  0011a	8d 55 d0	 lea	 edx, DWORD PTR __Str$[ebp]
  0011d	52		 push	 edx
  0011e	8d 45 c8	 lea	 eax, DWORD PTR __Src$[ebp]
  00121	50		 push	 eax
  00122	8d 4d cf	 lea	 ecx, DWORD PTR __Ch$[ebp+1]
  00125	51		 push	 ecx
  00126	8d 55 ce	 lea	 edx, DWORD PTR __Ch$[ebp]
  00129	52		 push	 edx
  0012a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	83 c0 40	 add	 eax, 64			; 00000040H
  00130	50		 push	 eax
  00131	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00137	e8 00 00 00 00	 call	 ?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::out
  0013c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
  00142	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR tv163[ebp], 0
  00149	0f 8c 9d 00 00
	00		 jl	 $LN12@overflow
  0014f	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR tv163[ebp], 1
  00156	7e 0e		 jle	 SHORT $LN8@overflow
  00158	83 bd 78 ff ff
	ff 03		 cmp	 DWORD PTR tv163[ebp], 3
  0015f	74 52		 je	 SHORT $LN11@overflow
  00161	e9 86 00 00 00	 jmp	 $LN12@overflow
$LN8@overflow:

; 432  :             _Dest)) { // test result of converting one element
; 433  :         case codecvt_base::partial:
; 434  :         case codecvt_base::ok: { // converted something, try to put it out
; 435  :             const auto _Count = static_cast<size_t>(_Dest - _Str);

  00166	8b 45 c4	 mov	 eax, DWORD PTR __Dest$[ebp]
  00169	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  0016c	2b c1		 sub	 eax, ecx
  0016e	89 45 c0	 mov	 DWORD PTR __Count$2[ebp], eax

; 436  :             if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

  00171	74 25		 je	 SHORT $LN9@overflow
  00173	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00179	51		 push	 ecx
  0017a	8b 55 c0	 mov	 edx, DWORD PTR __Count$2[ebp]
  0017d	52		 push	 edx
  0017e	6a 01		 push	 1
  00180	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _fwrite
  00189	83 c4 10	 add	 esp, 16			; 00000010H
  0018c	39 45 c0	 cmp	 DWORD PTR __Count$2[ebp], eax
  0018f	74 07		 je	 SHORT $LN9@overflow

; 437  :                 return _Traits::eof(); // write failed

  00191	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00196	eb 59		 jmp	 SHORT $LN1@overflow
$LN9@overflow:

; 438  :             }
; 439  : 
; 440  :             _Wrotesome = true; // write succeeded

  00198	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	c6 40 3d 01	 mov	 BYTE PTR [eax+61], 1

; 441  :             if (_Src != &_Ch) {

  0019f	8d 45 ce	 lea	 eax, DWORD PTR __Ch$[ebp]
  001a2	39 45 c8	 cmp	 DWORD PTR __Src$[ebp], eax
  001a5	74 05		 je	 SHORT $LN10@overflow

; 442  :                 return _Meta; // converted whole element

  001a7	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  001aa	eb 45		 jmp	 SHORT $LN1@overflow
$LN10@overflow:

; 443  :             }
; 444  : 
; 445  :             return _Traits::eof(); // conversion failed

  001ac	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001b1	eb 3e		 jmp	 SHORT $LN1@overflow
$LN11@overflow:

; 446  :         }
; 447  : 
; 448  :         case codecvt_base::noconv:
; 449  :             // no conversion, put as is
; 450  :             return _Fputc(_Ch, _Myfile) ? _Meta : _Traits::eof();

  001b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001b9	51		 push	 ecx
  001ba	0f b6 55 ce	 movzx	 edx, BYTE PTR __Ch$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  001c4	83 c4 08	 add	 esp, 8
  001c7	0f b6 c0	 movzx	 eax, al
  001ca	85 c0		 test	 eax, eax
  001cc	74 0b		 je	 SHORT $LN16@overflow
  001ce	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  001d1	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  001d7	eb 0b		 jmp	 SHORT $LN17@overflow
$LN16@overflow:
  001d9	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001de	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv184[ebp], eax
$LN17@overflow:
  001e4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv184[ebp]
  001ea	eb 05		 jmp	 SHORT $LN1@overflow
$LN12@overflow:

; 451  : 
; 452  :         default:
; 453  :             return _Traits::eof(); // conversion failed

  001ec	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
$LN1@overflow:

; 454  :         }
; 455  :     }

  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f7	33 cd		 xor	 ecx, ebp
  001f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 04 00	 ret	 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 399  :     virtual void __CLR_OR_THIS_CALL _Unlock() override { // unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 400  :         if (_Myfile) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00013	74 0f		 je	 SHORT $LN1@Unlock

; 401  :             _CSTD _unlock_file(_Myfile);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 __unlock_file
  00021	83 c4 04	 add	 esp, 4
$LN1@Unlock:

; 402  :         }
; 403  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 393  :     virtual void __CLR_OR_THIS_CALL _Lock() override { // lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :         if (_Myfile) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00013	74 0f		 je	 SHORT $LN1@Lock

; 395  :             _CSTD _lock_file(_Myfile);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 __lock_file
  00021	83 c4 04	 add	 esp, 4
$LN1@Lock:

; 396  :         }
; 397  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 374  :     basic_filebuf* close() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 375  :         basic_filebuf* _Ans;
; 376  :         if (_Myfile) { // put any homing sequence and close file

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00013	74 38		 je	 SHORT $LN2@close

; 377  :             _Ans = this;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f8	 mov	 DWORD PTR __Ans$[ebp], eax

; 378  :             if (!_Endwrite()) {

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00023	0f b6 c0	 movzx	 eax, al
  00026	85 c0		 test	 eax, eax
  00028	75 07		 jne	 SHORT $LN4@close

; 379  :                 _Ans = nullptr;

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN4@close:

; 380  :             }
; 381  : 
; 382  :             if (_CSTD fclose(_Myfile) != 0) {

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _fclose
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	74 07		 je	 SHORT $LN5@close

; 383  :                 _Ans = nullptr;

  00044	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN5@close:

; 384  :             }
; 385  :         } else {

  0004b	eb 07		 jmp	 SHORT $LN3@close
$LN2@close:

; 386  :             _Ans = nullptr;

  0004d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close:

; 387  :         }
; 388  : 
; 389  :         _Init(nullptr, _Closefl);

  00054	6a 02		 push	 2
  00056	6a 00		 push	 0
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 390  :         return _Ans;

  00060	8b 45 f8	 mov	 eax, DWORD PTR __Ans$[ebp]

; 391  :     }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
tv89 = -96						; size = 4
$T2 = -92						; size = 8
__File$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 275  :     basic_filebuf* open(const char* _Filename, ios_base::openmode _Mode, int _Prot = ios_base::_Default_open_prot) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :         // _Prot is an extension
; 277  :         if (_Myfile) {

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00032	74 04		 je	 SHORT $LN2@open

; 278  :             return nullptr;

  00034	33 c0		 xor	 eax, eax
  00036	eb 72		 jmp	 SHORT $LN1@open
$LN2@open:

; 279  :         }
; 280  : 
; 281  :         const auto _File = _Fiopen(_Filename, _Mode, _Prot);

  00038	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	89 45 ec	 mov	 DWORD PTR __File$[ebp], eax

; 282  :         if (!_File) {

  0004f	83 7d ec 00	 cmp	 DWORD PTR __File$[ebp], 0
  00053	75 04		 jne	 SHORT $LN3@open

; 283  :             return nullptr; // open failed

  00055	33 c0		 xor	 eax, eax
  00057	eb 51		 jmp	 SHORT $LN1@open
$LN3@open:

; 284  :         }
; 285  : 
; 286  :         _Init(_File, _Openfl);

  00059	6a 01		 push	 1
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __File$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 287  :         _Initcvt(_STD use_facet<_Cvt>(_Mysb::getloc()));

  00067	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
  00073	89 45 a0	 mov	 DWORD PTR tv89[ebp], eax
  00076	8b 4d a0	 mov	 ecx, DWORD PTR tv89[ebp]
  00079	89 4d 9c	 mov	 DWORD PTR tv88[ebp], ecx
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	8b 55 9c	 mov	 edx, DWORD PTR tv88[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  000a2	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 288  :         return this; // open succeeded

  000a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@open:

; 289  :     }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -69						; size = 1
_this$ = -4						; size = 4
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 271  :     _NODISCARD bool is_open() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         return static_cast<bool>(_Myfile);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00013	74 06		 je	 SHORT $LN3@is_open
  00015	c6 45 bb 01	 mov	 BYTE PTR tv66[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN4@is_open
$LN3@is_open:
  0001b	c6 45 bb 00	 mov	 BYTE PTR tv66[ebp], 0
$LN4@is_open:
  0001f	8a 45 bb	 mov	 al, BYTE PTR tv66[ebp]

; 273  :     }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 170  :     virtual __CLR_OR_THIS_CALL ~basic_filebuf() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 171  :         if (_Myfile) {

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0003b	74 08		 je	 SHORT $LN2@basic_file

; 172  :             _Reset_back(); // revert from _Mychar buffer

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 173  :         }
; 174  : 
; 175  :         if (_Closef) {

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  0004c	85 c9		 test	 ecx, ecx
  0004e	74 08		 je	 SHORT $LN1@basic_file

; 176  :             close();

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 177  :         }
; 178  :     }

  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 162  :     basic_filebuf() : _Mysb() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 163  :         _Init(nullptr, _Newfl);

  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 164  :     }

  0004f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 38		 push	 56			; 00000038H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 377  :     virtual void __CLR_OR_THIS_CALL imbue(const locale&) {} // set locale to argument (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 373  :     virtual int __CLR_OR_THIS_CALL sync() { // synchronize with external agent (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :         return 0;

  0000c	33 c0		 xor	 eax, eax

; 375  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 368  :     virtual basic_streambuf* __CLR_OR_THIS_CALL setbuf(_Elem*, streamsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :         // offer buffer to external agent (do nothing)
; 370  :         return this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 371  :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 363  :     virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  :         // change to specified position, according to mode
; 365  :         return streampos(-1);

  0000c	6a ff		 push	 -1
  0000e	6a ff		 push	 -1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 366  :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 358  :         off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :         // change position by offset, according to way and mode
; 360  :         return streampos(-1);

  0000c	6a ff		 push	 -1
  0000e	6a ff		 push	 -1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 361  :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
$T1 = -92						; size = 4
$T2 = -88						; size = 4
__Size$3 = -20						; size = 8
__Start_count$ = -12					; size = 8
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 332  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 333  :         // put _Count characters to stream
; 334  :         const streamsize _Start_count = _Count;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	89 45 f4	 mov	 DWORD PTR __Start_count$[ebp], eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00015	89 4d f8	 mov	 DWORD PTR __Start_count$[ebp+4], ecx
$LN2@xsputn:

; 335  :         while (0 < _Count) {

  00018	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  0001c	0f 8c e8 00 00
	00		 jl	 $LN3@xsputn
  00022	7f 0a		 jg	 SHORT $LN10@xsputn
  00024	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00028	0f 86 dc 00 00
	00		 jbe	 $LN3@xsputn
$LN10@xsputn:

; 336  :             streamsize _Size = _Pnavail();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00036	89 45 ec	 mov	 DWORD PTR __Size$3[ebp], eax
  00039	89 55 f0	 mov	 DWORD PTR __Size$3[ebp+4], edx

; 337  :             if (0 < _Size) { // copy to write buffer

  0003c	83 7d f0 00	 cmp	 DWORD PTR __Size$3[ebp+4], 0
  00040	7c 68		 jl	 SHORT $LN4@xsputn
  00042	7f 06		 jg	 SHORT $LN11@xsputn
  00044	83 7d ec 00	 cmp	 DWORD PTR __Size$3[ebp], 0
  00048	76 60		 jbe	 SHORT $LN4@xsputn
$LN11@xsputn:

; 338  :                 if (_Count < _Size) {

  0004a	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0004d	3b 45 f0	 cmp	 eax, DWORD PTR __Size$3[ebp+4]
  00050	7f 16		 jg	 SHORT $LN6@xsputn
  00052	7c 08		 jl	 SHORT $LN12@xsputn
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00057	3b 4d ec	 cmp	 ecx, DWORD PTR __Size$3[ebp]
  0005a	73 0c		 jae	 SHORT $LN6@xsputn
$LN12@xsputn:

; 339  :                     _Size = _Count;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR __Size$3[ebp], eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00065	89 4d f0	 mov	 DWORD PTR __Size$3[ebp+4], ecx
$LN6@xsputn:

; 340  :                 }
; 341  : 
; 342  :                 _Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0006f	51		 push	 ecx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 343  :                 _Ptr += _Size;

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  00084	03 45 08	 add	 eax, DWORD PTR __Ptr$[ebp]
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 344  :                 _Count -= _Size;

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0008d	2b 45 ec	 sub	 eax, DWORD PTR __Size$3[ebp]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00093	1b 4d f0	 sbb	 ecx, DWORD PTR __Size$3[ebp+4]
  00096	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00099	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 345  :                 pbump(static_cast<int>(_Size));

  0009c	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
  000a8	eb 5b		 jmp	 SHORT $LN5@xsputn
$LN4@xsputn:

; 346  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  000aa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000c2	ff d0		 call	 eax
  000c4	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
  000c7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000cc	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax
  000cf	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  000d2	51		 push	 ecx
  000d3	8d 55 a4	 lea	 edx, DWORD PTR $T1[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000dc	83 c4 08	 add	 esp, 8
  000df	0f b6 c0	 movzx	 eax, al
  000e2	85 c0		 test	 eax, eax
  000e4	74 04		 je	 SHORT $LN7@xsputn

; 347  :                 break; // single character put failed, quit

  000e6	eb 22		 jmp	 SHORT $LN3@xsputn

; 348  :             } else { // count character successfully put

  000e8	eb 1b		 jmp	 SHORT $LN5@xsputn
$LN7@xsputn:

; 349  :                 ++_Ptr;

  000ea	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ed	83 c0 01	 add	 eax, 1
  000f0	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 350  :                 --_Count;

  000f3	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000f6	83 e8 01	 sub	 eax, 1
  000f9	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  000fc	83 d9 00	 sbb	 ecx, 0
  000ff	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00102	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx
$LN5@xsputn:

; 351  :             }
; 352  :         }

  00105	e9 0e ff ff ff	 jmp	 $LN2@xsputn
$LN3@xsputn:

; 353  : 
; 354  :         return _Start_count - _Count;

  0010a	8b 45 f4	 mov	 eax, DWORD PTR __Start_count$[ebp]
  0010d	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00110	8b 55 f8	 mov	 edx, DWORD PTR __Start_count$[ebp+4]
  00113	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]

; 355  :     }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
$T1 = -92						; size = 4
__Meta$2 = -24						; size = 4
__Size$3 = -20						; size = 8
__Start_count$ = -12					; size = 8
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 303  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) { // get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  :         const streamsize _Start_count = _Count;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	89 45 f4	 mov	 DWORD PTR __Start_count$[ebp], eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00015	89 4d f8	 mov	 DWORD PTR __Start_count$[ebp+4], ecx
$LN2@xsgetn:

; 305  : 
; 306  :         while (0 < _Count) {

  00018	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  0001c	0f 8c ea 00 00
	00		 jl	 $LN3@xsgetn
  00022	7f 0a		 jg	 SHORT $LN9@xsgetn
  00024	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00028	0f 86 de 00 00
	00		 jbe	 $LN3@xsgetn
$LN9@xsgetn:

; 307  :             streamsize _Size = _Gnavail();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00036	89 45 ec	 mov	 DWORD PTR __Size$3[ebp], eax
  00039	89 55 f0	 mov	 DWORD PTR __Size$3[ebp+4], edx

; 308  :             if (0 < _Size) { // copy from read buffer

  0003c	83 7d f0 00	 cmp	 DWORD PTR __Size$3[ebp+4], 0
  00040	7c 68		 jl	 SHORT $LN4@xsgetn
  00042	7f 06		 jg	 SHORT $LN10@xsgetn
  00044	83 7d ec 00	 cmp	 DWORD PTR __Size$3[ebp], 0
  00048	76 60		 jbe	 SHORT $LN4@xsgetn
$LN10@xsgetn:

; 309  :                 if (_Count < _Size) {

  0004a	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0004d	3b 45 f0	 cmp	 eax, DWORD PTR __Size$3[ebp+4]
  00050	7f 16		 jg	 SHORT $LN6@xsgetn
  00052	7c 08		 jl	 SHORT $LN11@xsgetn
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00057	3b 4d ec	 cmp	 ecx, DWORD PTR __Size$3[ebp]
  0005a	73 0c		 jae	 SHORT $LN6@xsgetn
$LN11@xsgetn:

; 310  :                     _Size = _Count;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR __Size$3[ebp], eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00065	89 4d f0	 mov	 DWORD PTR __Size$3[ebp+4], ecx
$LN6@xsgetn:

; 311  :                 }
; 312  : 
; 313  :                 _Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  :                 _Ptr += _Size;

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  00084	03 45 08	 add	 eax, DWORD PTR __Ptr$[ebp]
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 315  :                 _Count -= _Size;

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0008d	2b 45 ec	 sub	 eax, DWORD PTR __Size$3[ebp]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00093	1b 4d f0	 sbb	 ecx, DWORD PTR __Size$3[ebp+4]
  00096	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00099	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 316  :                 gbump(static_cast<int>(_Size));

  0009c	8b 45 ec	 mov	 eax, DWORD PTR __Size$3[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 317  :             } else {

  000a8	eb 5d		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 318  :                 const int_type _Meta = uflow();

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 10		 mov	 edx, DWORD PTR [eax]
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000b5	ff d0		 call	 eax
  000b7	89 45 e8	 mov	 DWORD PTR __Meta$2[ebp], eax

; 319  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  000ba	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000bf	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax
  000c2	8d 45 e8	 lea	 eax, DWORD PTR __Meta$2[ebp]
  000c5	50		 push	 eax
  000c6	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000cf	83 c4 08	 add	 esp, 8
  000d2	0f b6 d0	 movzx	 edx, al
  000d5	85 d2		 test	 edx, edx
  000d7	74 02		 je	 SHORT $LN7@xsgetn

; 320  :                     break; // end of file, quit

  000d9	eb 31		 jmp	 SHORT $LN3@xsgetn
$LN7@xsgetn:

; 321  :                 }
; 322  : 
; 323  :                 // get a single character
; 324  :                 *_Ptr++ = _Traits::to_char_type(_Meta);

  000db	8d 45 e8	 lea	 eax, DWORD PTR __Meta$2[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ea	88 01		 mov	 BYTE PTR [ecx], al
  000ec	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000ef	83 c2 01	 add	 edx, 1
  000f2	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 325  :                 --_Count;

  000f5	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000f8	83 e8 01	 sub	 eax, 1
  000fb	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  000fe	83 d9 00	 sbb	 ecx, 0
  00101	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00104	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx
$LN5@xsgetn:

; 326  :             }
; 327  :         }

  00107	e9 0c ff ff ff	 jmp	 $LN2@xsgetn
$LN3@xsgetn:

; 328  : 
; 329  :         return _Start_count - _Count;

  0010c	8b 45 f4	 mov	 eax, DWORD PTR __Start_count$[ebp]
  0010f	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00112	8b 55 f8	 mov	 edx, DWORD PTR __Start_count$[ebp+4]
  00115	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]

; 330  :     }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 299  :     virtual int_type __CLR_OR_THIS_CALL uflow() { // get a character from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00017	ff d0		 call	 eax
  00019	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  0001c	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00021	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00024	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  00027	51		 push	 ecx
  00028	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00031	83 c4 08	 add	 esp, 8
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 0a		 je	 SHORT $LN3@uflow
  0003b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00040	89 45 b0	 mov	 DWORD PTR tv79[ebp], eax
  00043	eb 14		 jmp	 SHORT $LN4@uflow
$LN3@uflow:
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 b0	 mov	 DWORD PTR tv79[ebp], eax
$LN4@uflow:
  00059	8b 45 b0	 mov	 eax, DWORD PTR tv79[ebp]

; 301  :     }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 295  :     virtual int_type __CLR_OR_THIS_CALL underflow() { // get a character from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  :         return _Traits::eof();

  0000c	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof

; 297  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 291  :     virtual streamsize __CLR_OR_THIS_CALL showmanyc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  :         return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	33 d2		 xor	 edx, edx

; 293  :     }

  00010	5f		 pop	 edi
  00011	5e		 pop	 esi
  00012	5b		 pop	 ebx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 286  :     virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type = _Traits::eof()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 287  :         // put a character back to stream (always fail)
; 288  :         return _Traits::eof();

  0000c	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof

; 289  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 282  :     virtual int_type __CLR_OR_THIS_CALL overflow(int_type = _Traits::eof()) { // put a character to stream (always fail)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 283  :         return _Traits::eof();

  0000c	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof

; 284  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Gf$ = 8						; size = 4
__Gn$ = 12						; size = 4
__Gc$ = 16						; size = 4
__Pf$ = 20						; size = 4
__Pn$ = 24						; size = 4
__Pc$ = 28						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 272  :     void __CLR_OR_THIS_CALL _Init(_Elem** _Gf, _Elem** _Gn, int* _Gc, _Elem** _Pf, _Elem** _Pn, int* _Pc) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 273  :         // initialize buffer parameters as specified
; 274  :         _IGfirst = _Gf;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Gf$[ebp]
  00012	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 275  :         _IPfirst = _Pf;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 14	 mov	 ecx, DWORD PTR __Pf$[ebp]
  0001b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 276  :         _IGnext  = _Gn;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Gn$[ebp]
  00024	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 277  :         _IPnext  = _Pn;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d 18	 mov	 ecx, DWORD PTR __Pn$[ebp]
  0002d	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 278  :         _IGcount = _Gc;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 10	 mov	 ecx, DWORD PTR __Gc$[ebp]
  00036	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 279  :         _IPcount = _Pc;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 1c	 mov	 ecx, DWORD PTR __Pc$[ebp]
  0003f	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 280  :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 18 00	 ret	 24			; 00000018H
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 261  :     void __CLR_OR_THIS_CALL _Init() { // initialize buffer parameters for no buffers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 262  :         _IGfirst = &_Gfirst;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 263  :         _IPfirst = &_Pfirst;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 c0 08	 add	 eax, 8
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 264  :         _IGnext  = &_Gnext;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 c0 14	 add	 eax, 20			; 00000014H
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 265  :         _IPnext  = &_Pnext;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 c0 18	 add	 eax, 24			; 00000018H
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 266  :         _IGcount = &_Gcount;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 c0 24	 add	 eax, 36			; 00000024H
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 267  :         _IPcount = &_Pcount;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 c0 28	 add	 eax, 40			; 00000028H
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 268  :         setp(nullptr, nullptr);

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 269  :         setg(nullptr, nullptr, nullptr);

  00060	6a 00		 push	 0
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 270  :     }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 257  :     streamsize __CLR_OR_THIS_CALL _Pnavail() const { // count number of available positions in write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 258  :         return *_IPnext ? *_IPcount : 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00012	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00015	74 0d		 je	 SHORT $LN3@Pnavail
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  00022	eb 07		 jmp	 SHORT $LN4@Pnavail
$LN3@Pnavail:
  00024	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Pnavail:
  0002b	8b 45 b8	 mov	 eax, DWORD PTR tv69[ebp]
  0002e	99		 cdq

; 259  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 252  :     _Elem* __CLR_OR_THIS_CALL _Pninc() { // increment current position in write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  :         --*_IPcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	83 ea 01	 sub	 edx, 1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 254  :         return (*_IPnext)++;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	89 55 b8	 mov	 DWORD PTR tv76[ebp], edx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	83 c2 01	 add	 edx, 1
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0003b	89 11		 mov	 DWORD PTR [ecx], edx
  0003d	8b 45 b8	 mov	 eax, DWORD PTR tv76[ebp]

; 255  :     }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 239  :     void __CLR_OR_THIS_CALL setp(_Elem* _First, _Elem* _Last) { // set pointers for write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 240  :         *_IPfirst = _First;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00015	89 11		 mov	 DWORD PTR [ecx], edx

; 241  :         *_IPnext  = _First;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	89 11		 mov	 DWORD PTR [ecx], edx

; 242  :         *_IPcount = static_cast<int>(_Last - _First);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00025	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0002e	89 02		 mov	 DWORD PTR [edx], eax

; 243  :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 234  :     void __CLR_OR_THIS_CALL pbump(int _Off) { // alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 235  :         *_IPcount -= _Off;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  :         *_IPnext += _Off;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	03 55 08	 add	 edx, DWORD PTR __Off$[ebp]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00030	89 11		 mov	 DWORD PTR [ecx], edx

; 237  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 230  :     streamsize __CLR_OR_THIS_CALL _Gnavail() const { // count number of available elements in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 231  :         return *_IGnext ? *_IGcount : 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00012	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00015	74 0d		 je	 SHORT $LN3@Gnavail
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  00022	eb 07		 jmp	 SHORT $LN4@Gnavail
$LN3@Gnavail:
  00024	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Gnavail:
  0002b	8b 45 b8	 mov	 eax, DWORD PTR tv69[ebp]
  0002e	99		 cdq

; 232  :     }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc, COMDAT
; _this$ = ecx

; 225  :     _Elem* __CLR_OR_THIS_CALL _Gnpreinc() { // preincrement current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :         --*_IGcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	83 ea 01	 sub	 edx, 1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 227  :         return ++(*_IGnext);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	83 c2 01	 add	 edx, 1
  0002a	89 55 b8	 mov	 DWORD PTR tv72[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00033	8b 55 b8	 mov	 edx, DWORD PTR tv72[ebp]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 45 b8	 mov	 eax, DWORD PTR tv72[ebp]

; 228  :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 220  :     _Elem* __CLR_OR_THIS_CALL _Gninc() { // increment current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 221  :         --*_IGcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	83 ea 01	 sub	 edx, 1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 222  :         return (*_IGnext)++;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	89 55 b8	 mov	 DWORD PTR tv76[ebp], edx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	83 c2 01	 add	 edx, 1
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003b	89 11		 mov	 DWORD PTR [ecx], edx
  0003d	8b 45 b8	 mov	 eax, DWORD PTR tv76[ebp]

; 223  :     }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec, COMDAT
; _this$ = ecx

; 215  :     _Elem* __CLR_OR_THIS_CALL _Gndec() { // decrement current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  :         ++*_IGcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	83 c2 01	 add	 edx, 1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 217  :         return --*_IGnext;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 b8	 mov	 DWORD PTR tv72[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00033	8b 55 b8	 mov	 edx, DWORD PTR tv72[ebp]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	8b 45 b8	 mov	 eax, DWORD PTR tv72[ebp]

; 218  :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 211  :     _Elem* __CLR_OR_THIS_CALL epptr() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  :         return *_IPnext + *_IPcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	03 08		 add	 ecx, DWORD PTR [eax]
  0001c	8b c1		 mov	 eax, ecx

; 213  :     }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 205  :     void __CLR_OR_THIS_CALL setg(_Elem* _First, _Elem* _Next, _Elem* _Last) { // set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 206  :         *_IGfirst = _First;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00012	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00015	89 11		 mov	 DWORD PTR [ecx], edx

; 207  :         *_IGnext  = _Next;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001d	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00020	89 11		 mov	 DWORD PTR [ecx], edx

; 208  :         *_IGcount = static_cast<int>(_Last - _Next);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00025	2b 45 0c	 sub	 eax, DWORD PTR __Next$[ebp]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0002e	89 02		 mov	 DWORD PTR [edx], eax

; 209  :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 200  :     void __CLR_OR_THIS_CALL gbump(int _Off) { // alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 201  :         *_IGcount -= _Off;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx

; 202  :         *_IGnext += _Off;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	03 55 08	 add	 edx, DWORD PTR __Off$[ebp]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00030	89 11		 mov	 DWORD PTR [ecx], edx

; 203  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 196  :     _Elem* __CLR_OR_THIS_CALL egptr() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  :         return *_IGnext + *_IGcount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	03 08		 add	 ecx, DWORD PTR [eax]
  0001c	8b c1		 mov	 eax, ecx

; 198  :     }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 192  :     _Elem* __CLR_OR_THIS_CALL pptr() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 193  :         return *_IPnext;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 194  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 184  :     _Elem* __CLR_OR_THIS_CALL gptr() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  :         return *_IGnext;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 186  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 180  :     _Elem* __CLR_OR_THIS_CALL eback() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 181  :         return *_IGfirst;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 182  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 177  :     virtual void __CLR_OR_THIS_CALL _Unlock() {} // clear the thread lock (overridden by basic_filebuf)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 175  :     virtual void __CLR_OR_THIS_CALL _Lock() {} // set the thread lock (overridden by basic_filebuf)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 171  :         streamsize _Count) { // put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  :         return xsputn(_Ptr, _Count);

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00017	52		 push	 edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00023	ff d0		 call	 eax

; 173  :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
tv78 = -84						; size = 4
tv85 = -80						; size = 8
$T1 = -72						; size = 4
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 166  :     int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch) { // put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 167  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00014	89 45 b0	 mov	 DWORD PTR tv85[ebp], eax
  00017	89 55 b4	 mov	 DWORD PTR tv85[ebp+4], edx
  0001a	83 7d b4 00	 cmp	 DWORD PTR tv85[ebp+4], 0
  0001e	7c 2c		 jl	 SHORT $LN3@sputc
  00020	7f 06		 jg	 SHORT $LN5@sputc
  00022	83 7d b0 00	 cmp	 DWORD PTR tv85[ebp], 0
  00026	76 24		 jbe	 SHORT $LN3@sputc
$LN5@sputc:
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  00030	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00033	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  00036	8a 4d 08	 mov	 cl, BYTE PTR __Ch$[ebp]
  00039	88 08		 mov	 BYTE PTR [eax], cl
  0003b	8b 55 b8	 mov	 edx, DWORD PTR $T1[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 ac	 mov	 DWORD PTR tv78[ebp], eax
  0004a	eb 1d		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  0004c	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00055	83 c4 04	 add	 esp, 4
  00058	50		 push	 eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00064	ff d0		 call	 eax
  00066	89 45 ac	 mov	 DWORD PTR tv78[ebp], eax
$LN4@sputc:
  00069	8b 45 ac	 mov	 eax, DWORD PTR tv78[ebp]

; 168  :     }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv82 = -92						; size = 4
tv83 = -88						; size = 4
tv89 = -84						; size = 8
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::snextc, COMDAT
; _this$ = ecx

; 139  :     int_type __CLR_OR_THIS_CALL snextc() { // point to next character and return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :         return 1 < _Gnavail() ? _Traits::to_int_type(*_Gnpreinc())

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00014	89 45 ac	 mov	 DWORD PTR tv89[ebp], eax
  00017	89 55 b0	 mov	 DWORD PTR tv89[ebp+4], edx
  0001a	83 7d b0 00	 cmp	 DWORD PTR tv89[ebp+4], 0
  0001e	7c 1e		 jl	 SHORT $LN5@snextc
  00020	7f 06		 jg	 SHORT $LN7@snextc
  00022	83 7d ac 01	 cmp	 DWORD PTR tv89[ebp], 1
  00026	76 16		 jbe	 SHORT $LN5@snextc
$LN7@snextc:
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 a8	 mov	 DWORD PTR tv83[ebp], eax
  0003c	eb 45		 jmp	 SHORT $LN6@snextc
$LN5@snextc:
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
  00046	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  00049	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0004e	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00051	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  00054	50		 push	 eax
  00055	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0005e	83 c4 08	 add	 esp, 8
  00061	0f b6 d0	 movzx	 edx, al
  00064	85 d2		 test	 edx, edx
  00066	74 0a		 je	 SHORT $LN3@snextc
  00068	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0006d	89 45 a4	 mov	 DWORD PTR tv82[ebp], eax
  00070	eb 0b		 jmp	 SHORT $LN4@snextc
$LN3@snextc:
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  0007a	89 45 a4	 mov	 DWORD PTR tv82[ebp], eax
$LN4@snextc:
  0007d	8b 45 a4	 mov	 eax, DWORD PTR tv82[ebp]
  00080	89 45 a8	 mov	 DWORD PTR tv83[ebp], eax
$LN6@snextc:
  00083	8b 45 a8	 mov	 eax, DWORD PTR tv83[ebp]

; 141  :                               : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
; 142  :     }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::snextc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv75 = -80						; size = 4
tv82 = -76						; size = 8
_this$ = -4						; size = 4
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sgetc, COMDAT
; _this$ = ecx

; 130  :     int_type __CLR_OR_THIS_CALL sgetc() { // get a character and don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 131  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00014	89 45 b4	 mov	 DWORD PTR tv82[ebp], eax
  00017	89 55 b8	 mov	 DWORD PTR tv82[ebp+4], edx
  0001a	83 7d b8 00	 cmp	 DWORD PTR tv82[ebp+4], 0
  0001e	7c 1e		 jl	 SHORT $LN3@sgetc
  00020	7f 06		 jg	 SHORT $LN5@sgetc
  00022	83 7d b4 00	 cmp	 DWORD PTR tv82[ebp], 0
  00026	76 16		 jbe	 SHORT $LN3@sgetc
$LN5@sgetc:
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
  0003c	eb 10		 jmp	 SHORT $LN4@sgetc
$LN3@sgetc:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00049	ff d0		 call	 eax
  0004b	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
$LN4@sgetc:
  0004e	8b 45 b0	 mov	 eax, DWORD PTR tv75[ebp]

; 132  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv75 = -80						; size = 4
tv82 = -76						; size = 8
_this$ = -4						; size = 4
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc, COMDAT
; _this$ = ecx

; 126  :     int_type __CLR_OR_THIS_CALL sbumpc() { // get a character and point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 127  :         return 0 < _Gnavail() ? _Traits::to_int_type(*_Gninc()) : uflow();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00014	89 45 b4	 mov	 DWORD PTR tv82[ebp], eax
  00017	89 55 b8	 mov	 DWORD PTR tv82[ebp+4], edx
  0001a	83 7d b8 00	 cmp	 DWORD PTR tv82[ebp+4], 0
  0001e	7c 1e		 jl	 SHORT $LN3@sbumpc
  00020	7f 06		 jg	 SHORT $LN5@sbumpc
  00022	83 7d b4 00	 cmp	 DWORD PTR tv82[ebp], 0
  00026	76 16		 jbe	 SHORT $LN3@sbumpc
$LN5@sbumpc:
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
  0003c	eb 10		 jmp	 SHORT $LN4@sbumpc
$LN3@sbumpc:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00049	ff d0		 call	 eax
  0004b	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
$LN4@sbumpc:
  0004e	8b 45 b0	 mov	 eax, DWORD PTR tv75[ebp]

; 128  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 122  :     int __CLR_OR_THIS_CALL pubsync() { // synchronize with external agent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 123  :         return sync();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00017	ff d0		 call	 eax

; 124  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::getloc, COMDAT
; _this$ = ecx

; 113  :     locale __CLR_OR_THIS_CALL getloc() const { // get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 114  :         return *_Plocale;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale
  00022	8b 55 b8	 mov	 edx, DWORD PTR $T1[ebp]
  00025	83 ca 01	 or	 edx, 1
  00028	89 55 b8	 mov	 DWORD PTR $T1[ebp], edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::getloc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
tv70 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 69   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 70   :         delete _Plocale;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0001b	89 4d b8	 mov	 DWORD PTR $T1[ebp], ecx
  0001e	83 7d b8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00022	74 0f		 je	 SHORT $LN3@basic_stre
  00024	6a 01		 push	 1
  00026	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  00029	e8 00 00 00 00	 call	 ??_Glocale@std@@QAEPAXI@Z
  0002e	89 45 b4	 mov	 DWORD PTR tv70[ebp], eax
  00031	eb 07		 jmp	 SHORT $LN2@basic_stre
$LN3@basic_stre:
  00033	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN2@basic_stre:

; 71   :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
tv74 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 25   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00015	6a 08		 push	 8
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00022	83 7d b8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00026	74 0d		 je	 SHORT $LN3@basic_stre
  00028	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  00030	89 45 b4	 mov	 DWORD PTR tv74[ebp], eax
  00033	eb 07		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00035	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@basic_stre:
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d b4	 mov	 ecx, DWORD PTR tv74[ebp]
  00042	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 26   :         _Init();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 27   :     }

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 975  :     void close() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 976  :         if (!_Filebuffer.close()) {

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 10	 add	 ecx, 16			; 00000010H
  00012	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00017	85 c0		 test	 eax, eax
  00019	75 16		 jne	 SHORT $LN1@close

; 977  :             _Myios::setstate(ios_base::failbit);

  0001b	6a 00		 push	 0
  0001d	6a 02		 push	 2
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002a	8b ca		 mov	 ecx, edx
  0002c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@close:

; 978  :         }
; 979  :     }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 950  :     _NODISCARD bool is_open() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 951  :         return _Filebuffer.is_open();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 10	 add	 ecx, 16			; 00000010H
  00012	e8 00 00 00 00	 call	 ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open

; 952  :     }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 944  :     virtual __CLR_OR_THIS_CALL ~basic_ifstream() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	83 ea 70	 sub	 edx, 112		; 00000070H
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 54 01 8c	 mov	 DWORD PTR [ecx+eax-116], edx
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 e9 60	 sub	 ecx, 96			; 00000060H
  00042	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 e9 58	 sub	 ecx, 88			; 00000058H
  0004d	e8 00 00 00 00	 call	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 806  :     explicit basic_ifstream(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 807  :         const char* _Filename, ios_base::openmode _Mode = ios_base::in, int _Prot = ios_base::_Default_open_prot)
; 808  :         : _Mybase(_STD addressof(_Filebuffer)) {

  00032	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 24		 je	 SHORT $LN2@basic_ifst
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 70	 add	 ecx, 112		; 00000070H
  00047	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00056	83 c8 01	 or	 eax, 1
  00059	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ifst:
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 c0 10	 add	 eax, 16			; 00000010H
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
  00078	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00099	83 ea 70	 sub	 edx, 112		; 00000070H
  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	83 c1 10	 add	 ecx, 16			; 00000010H
  000b1	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000b6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 809  :         // _Prot is an extension
; 810  :         if (!_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot)) {

  000ba	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000c1	83 c9 01	 or	 ecx, 1
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000c8	52		 push	 edx
  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	83 c1 10	 add	 ecx, 16			; 00000010H
  000cf	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000d4	85 c0		 test	 eax, eax
  000d6	75 16		 jne	 SHORT $LN1@basic_ifst

; 811  :             _Myios::setstate(ios_base::failbit);

  000d8	6a 00		 push	 0
  000da	6a 02		 push	 2
  000dc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e7	8b ca		 mov	 ecx, edx
  000e9	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@basic_ifst:

; 812  :         }
; 813  :     }

  000ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00102	59		 pop	 ecx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ifst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 10	 add	 ecx, 16			; 00000010H
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00037	90		 npad	 1
  00038	90		 npad	 1
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 18	 add	 ecx, 24			; 00000018H
  00012	e8 00 00 00 00	 call	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 18	 add	 ecx, 24			; 00000018H
  0001d	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 e9 18	 sub	 ecx, 24			; 00000018H
  00012	e8 00 00 00 00	 call	 ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 11		 je	 SHORT $LN2@scalar
  0001f	6a 60		 push	 96			; 00000060H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 e8 18	 sub	 eax, 24			; 00000018H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 e8 18	 sub	 eax, 24			; 00000018H
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT
tv249 = -120						; size = 4
tv247 = -120						; size = 4
tv243 = -120						; size = 4
tv248 = -116						; size = 4
tv246 = -116						; size = 4
tv245 = -116						; size = 4
tv250 = -113						; size = 1
$T2 = -112						; size = 4
$T3 = -108						; size = 8
__Meta$4 = -36						; size = 4
__Ctype_fac$5 = -32					; size = 4
__Eof$ = -25						; size = 1
__Tied$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Noskip$ = 8						; size = 1
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Ipfx, COMDAT
; _this$ = ecx

; 116  :     bool __CLR_OR_THIS_CALL _Ipfx(bool _Noskip = false) { // test stream state and skip whitespace as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 68	 sub	 esp, 104		; 00000068H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 117  :         if (!this->good()) {

  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00037	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0003a	8b ca		 mov	 ecx, edx
  0003c	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 1d		 jne	 SHORT $LN5@Ipfx

; 118  :             _Myios::setstate(ios_base::failbit);

  00048	6a 00		 push	 0
  0004a	6a 02		 push	 2
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00054	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00057	8b ca		 mov	 ecx, edx
  00059	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 119  :             return false;

  0005e	32 c0		 xor	 al, al
  00060	e9 93 01 00 00	 jmp	 $LN1@Ipfx
$LN5@Ipfx:

; 120  :         }
; 121  : 
; 122  :         // state okay, flush tied stream and skip whitespace
; 123  :         const auto _Tied = _Myios::tie();

  00065	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00070	8b ca		 mov	 ecx, edx
  00072	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00077	89 45 e8	 mov	 DWORD PTR __Tied$[ebp], eax

; 124  :         if (_Tied) {

  0007a	83 7d e8 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  0007e	74 08		 je	 SHORT $LN6@Ipfx

; 125  :             _Tied->flush();

  00080	8b 4d e8	 mov	 ecx, DWORD PTR __Tied$[ebp]
  00083	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN6@Ipfx:

; 126  :         }
; 127  : 
; 128  :         bool _Eof = false;

  00088	c6 45 e7 00	 mov	 BYTE PTR __Eof$[ebp], 0

; 129  :         if (!_Noskip && this->flags() & ios_base::skipws) { // skip whitespace

  0008c	0f b6 45 08	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	0f 85 30 01 00
	00		 jne	 $LN7@Ipfx
  00098	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b ca		 mov	 ecx, edx
  000a5	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  000aa	83 e0 01	 and	 eax, 1
  000ad	0f 84 15 01 00
	00		 je	 $LN7@Ipfx

; 130  :             const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(this->getloc());

  000b3	8d 45 94	 lea	 eax, DWORD PTR $T3[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000c2	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  000c7	89 45 8c	 mov	 DWORD PTR tv245[ebp], eax
  000ca	8b 45 8c	 mov	 eax, DWORD PTR tv245[ebp]
  000cd	89 45 88	 mov	 DWORD PTR tv243[ebp], eax
  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000d7	8b 4d 88	 mov	 ecx, DWORD PTR tv243[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000e0	83 c4 04	 add	 esp, 4
  000e3	89 45 e0	 mov	 DWORD PTR __Ctype_fac$5[ebp], eax
  000e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ed	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  000f0	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 131  : 
; 132  :             _TRY_IO_BEGIN

  000f5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 133  :             int_type _Meta = _Myios::rdbuf()->sgetc();

  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00101	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00104	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00107	8b ca		 mov	 ecx, edx
  00109	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0010e	89 45 8c	 mov	 DWORD PTR tv246[ebp], eax
  00111	8b 4d 8c	 mov	 ecx, DWORD PTR tv246[ebp]
  00114	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  00119	89 45 88	 mov	 DWORD PTR tv247[ebp], eax
  0011c	8b 45 88	 mov	 eax, DWORD PTR tv247[ebp]
  0011f	89 45 dc	 mov	 DWORD PTR __Meta$4[ebp], eax

; 134  : 
; 135  :             for (;; _Meta = _Myios::rdbuf()->snextc()) {

  00122	eb 26		 jmp	 SHORT $LN4@Ipfx
$LN2@Ipfx:
  00124	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8b 08		 mov	 ecx, DWORD PTR [eax]
  00129	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0012c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0012f	8b ca		 mov	 ecx, edx
  00131	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00136	89 45 8c	 mov	 DWORD PTR tv248[ebp], eax
  00139	8b 4d 8c	 mov	 ecx, DWORD PTR tv248[ebp]
  0013c	e8 00 00 00 00	 call	 ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
  00141	89 45 88	 mov	 DWORD PTR tv249[ebp], eax
  00144	8b 45 88	 mov	 eax, DWORD PTR tv249[ebp]
  00147	89 45 dc	 mov	 DWORD PTR __Meta$4[ebp], eax
$LN4@Ipfx:

; 136  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  0014a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0014f	89 45 90	 mov	 DWORD PTR $T2[ebp], eax
  00152	8d 45 dc	 lea	 eax, DWORD PTR __Meta$4[ebp]
  00155	50		 push	 eax
  00156	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0015f	83 c4 08	 add	 esp, 8
  00162	0f b6 d0	 movzx	 edx, al
  00165	85 d2		 test	 edx, edx
  00167	74 08		 je	 SHORT $LN9@Ipfx

; 137  :                     _Eof = true;

  00169	c6 45 e7 01	 mov	 BYTE PTR __Eof$[ebp], 1

; 138  :                     break;

  0016d	eb 2b		 jmp	 SHORT $LN3@Ipfx
  0016f	eb 27		 jmp	 SHORT $LN10@Ipfx
$LN9@Ipfx:

; 139  :                 } else if (!_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {

  00171	8d 45 dc	 lea	 eax, DWORD PTR __Meta$4[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  0017a	83 c4 04	 add	 esp, 4
  0017d	0f b6 c8	 movzx	 ecx, al
  00180	51		 push	 ecx
  00181	6a 48		 push	 72			; 00000048H
  00183	8b 4d e0	 mov	 ecx, DWORD PTR __Ctype_fac$5[ebp]
  00186	e8 00 00 00 00	 call	 ?is@?$ctype@D@std@@QBE_NFD@Z ; std::ctype<char>::is
  0018b	88 45 8f	 mov	 BYTE PTR tv250[ebp], al
  0018e	0f b6 55 8f	 movzx	 edx, BYTE PTR tv250[ebp]
  00192	85 d2		 test	 edx, edx
  00194	75 02		 jne	 SHORT $LN10@Ipfx

; 140  :                     break; // not whitespace, quit

  00196	eb 02		 jmp	 SHORT $LN3@Ipfx
$LN10@Ipfx:

; 141  :                 }
; 142  :             }

  00198	eb 8a		 jmp	 SHORT $LN2@Ipfx
$LN3@Ipfx:
  0019a	eb 1c		 jmp	 SHORT $LN14@Ipfx
__catch$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$0:

; 143  :             _CATCH_IO_END

  0019c	6a 01		 push	 1
  0019e	6a 04		 push	 4
  001a0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a5	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001a8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001ab	8b ca		 mov	 ecx, edx
  001ad	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  001b2	b8 00 00 00 00	 mov	 eax, $LN18@Ipfx
  001b7	c3		 ret	 0
$LN14@Ipfx:
  001b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001bf	eb 07		 jmp	 SHORT $LN7@Ipfx
$LN18@Ipfx:
  001c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN7@Ipfx:

; 144  :         }
; 145  : 
; 146  :         if (_Eof) {

  001c8	0f b6 45 e7	 movzx	 eax, BYTE PTR __Eof$[ebp]
  001cc	85 c0		 test	 eax, eax
  001ce	74 16		 je	 SHORT $LN12@Ipfx

; 147  :             _Myios::setstate(ios_base::eofbit | ios_base::failbit);

  001d0	6a 00		 push	 0
  001d2	6a 03		 push	 3
  001d4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d9	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001df	8b ca		 mov	 ecx, edx
  001e1	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN12@Ipfx:

; 148  :         }
; 149  : 
; 150  :         return this->good();

  001e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b ca		 mov	 ecx, edx
  001f3	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
$LN1@Ipfx:

; 151  :     }

  001f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00202	59		 pop	 ecx
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 72   :     virtual __CLR_OR_THIS_CALL ~basic_istream() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 e8	 mov	 ecx, DWORD PTR [eax-24]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 e8	 mov	 ecx, DWORD PTR [eax-24]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	83 ea 18	 sub	 edx, 24			; 00000018H
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 e8	 mov	 ecx, DWORD PTR [eax-24]
  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 54 01 e4	 mov	 DWORD PTR [ecx+eax-28], edx
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\istream
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 41   :     explicit __CLR_OR_THIS_CALL basic_istream(_Mysb* _Strbuf, bool _Isstd = false)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 42   : 
; 43   :         : _Chcount(0) {

  00032	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 24		 je	 SHORT $LN2@basic_istr
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 18	 add	 ecx, 24			; 00000018H
  00047	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00056	83 c8 01	 or	 eax, 1
  00059	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_istr:
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00076	83 ea 18	 sub	 edx, 24			; 00000018H
  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00092	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 44   :         _Myios::init(_Strbuf, _Isstd);

  00099	0f b6 45 0c	 movzx	 eax, BYTE PTR __Isstd$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR __Strbuf$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	8b 02		 mov	 eax, DWORD PTR [edx]
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000ad	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 45   :     }

  000b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00021	90		 npad	 1
  00022	90		 npad	 1
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 48		 push	 72			; 00000048H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 161  :     __CLR_OR_THIS_CALL basic_ios() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ios_base@std@@IAE@XZ	; std::ios_base::ios_base
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 146  :         bool _Isstd                             = false) { // initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  :         _Init(); // initialize ios_base

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 148  :         _Mystrbuf = _Strbuf;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Strbuf$[ebp]
  0001a	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 149  :         _Tiestr   = nullptr;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 150  :         _Fillch   = widen(' ');

  00027	6a 20		 push	 32			; 00000020H
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	88 41 40	 mov	 BYTE PTR [ecx+64], al

; 151  : 
; 152  :         if (!_Mystrbuf) {

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0003e	75 0c		 jne	 SHORT $LN2@init

; 153  :             setstate(badbit);

  00040	6a 00		 push	 0
  00042	6a 04		 push	 4
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN2@init:

; 154  :         }
; 155  : 
; 156  :         if (_Isstd) {

  0004c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Isstd$[ebp]
  00050	85 c0		 test	 eax, eax
  00052	74 0c		 je	 SHORT $LN1@init

; 157  :             _Addstd(this); // special handling for standard streams

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0005d	83 c4 04	 add	 esp, 4
$LN1@init:

; 158  :         }
; 159  :     }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
tv79 = -100						; size = 4
tv80 = -96						; size = 4
$T2 = -92						; size = 8
$T3 = -81						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 114  :     _Elem __CLR_OR_THIS_CALL widen(char _Byte) const { // convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  0002b	0f b6 45 08	 movzx	 eax, BYTE PTR __Byte$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	51		 push	 ecx
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0003c	89 45 a0	 mov	 DWORD PTR tv80[ebp], eax
  0003f	8b 55 a0	 mov	 edx, DWORD PTR tv80[ebp]
  00042	89 55 9c	 mov	 DWORD PTR tv79[ebp], edx
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8b 45 9c	 mov	 eax, DWORD PTR tv79[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00055	83 c4 04	 add	 esp, 4
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QBEDD@Z ; std::ctype<char>::widen
  0005f	88 45 af	 mov	 BYTE PTR $T3[ebp], al
  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006c	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00071	8a 45 af	 mov	 al, BYTE PTR $T3[ebp]

; 116  :     }

  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 100  :     _Elem __CLR_OR_THIS_CALL fill() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  :         return _Fillch;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 40 40	 mov	 al, BYTE PTR [eax+64]

; 102  :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 79   :     _NODISCARD _Mysb* __CLR_OR_THIS_CALL rdbuf() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   :         return _Mystrbuf;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 81   :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 69   :     _Myos* __CLR_OR_THIS_CALL tie() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   :         return _Tiestr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 71   :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 52   :         iostate _State, bool _Reraise = false) { // merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   :         clear(rdstate() | _State, _Reraise);

  0000c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Reraise$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate
  00019	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear

; 54   :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 40   :     void __CLR_OR_THIS_CALL clear(iostate _State = goodbit, bool _Reraise = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         // set state, possibly reraise exception
; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00013	74 09		 je	 SHORT $LN3@clear
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@clear
$LN3@clear:
  0001e	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv72[ebp], 4
$LN4@clear:
  00025	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Reraise$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  0002d	0b 55 b8	 or	 edx, DWORD PTR tv72[ebp]
  00030	52		 push	 edx
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 43   :     }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 38   :     virtual __CLR_OR_THIS_CALL ~basic_ios() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z
_TEXT	SEGMENT
tv134 = -124						; size = 4
tv132 = -124						; size = 4
$T1 = -120						; size = 24
$T2 = -96						; size = 24
_startIndex$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
_ChrsToTrim$ = 12					; size = 4
_TrimDir$ = 16						; size = 4
?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z PROC ; Trim, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 16   :     size_t startIndex = str.find_first_not_of(ChrsToTrim);

  00013	6a 00		 push	 0
  00015	8b 45 0c	 mov	 eax, DWORD PTR _ChrsToTrim$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0001c	e8 00 00 00 00	 call	 ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
  00021	89 45 f8	 mov	 DWORD PTR _startIndex$[ebp], eax

; 17   :     if (startIndex == std::string::npos){str.erase(); return;}

  00024	83 7d f8 ff	 cmp	 DWORD PTR _startIndex$[ebp], -1
  00028	75 0c		 jne	 SHORT $LN2@Trim
  0002a	6a 00		 push	 0
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0002f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00034	eb 76		 jmp	 SHORT $LN1@Trim
$LN2@Trim:

; 18   :     if (TrimDir < 2) str = str.substr(startIndex, str.size()-startIndex);

  00036	83 7d 10 02	 cmp	 DWORD PTR _TrimDir$[ebp], 2
  0003a	7d 33		 jge	 SHORT $LN3@Trim
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0003f	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00044	2b 45 f8	 sub	 eax, DWORD PTR _startIndex$[ebp]
  00047	50		 push	 eax
  00048	8b 45 f8	 mov	 eax, DWORD PTR _startIndex$[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	51		 push	 ecx
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00053	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00058	89 45 84	 mov	 DWORD PTR tv132[ebp], eax
  0005b	8b 55 84	 mov	 edx, DWORD PTR tv132[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00062	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00067	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@Trim:

; 19   :     if (TrimDir!=1) str = str.substr(0, str.find_last_not_of(ChrsToTrim) + 1);

  0006f	83 7d 10 01	 cmp	 DWORD PTR _TrimDir$[ebp], 1
  00073	74 37		 je	 SHORT $LN1@Trim
  00075	6a ff		 push	 -1
  00077	8b 45 0c	 mov	 eax, DWORD PTR _ChrsToTrim$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0007e	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
  00083	83 c0 01	 add	 eax, 1
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8d 4d 88	 lea	 ecx, DWORD PTR $T1[ebp]
  0008c	51		 push	 ecx
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00090	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00095	89 45 84	 mov	 DWORD PTR tv134[ebp], eax
  00098	8b 55 84	 mov	 edx, DWORD PTR tv134[ebp]
  0009b	52		 push	 edx
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0009f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000a4	8d 4d 88	 lea	 ecx, DWORD PTR $T1[ebp]
  000a7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@Trim:

; 20   : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z ENDP ; Trim
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 1341 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z PROC		; std::_Atomic_reinterpret_as<long,unsigned int>, COMDAT

; 219  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 220  :     // interprets _Source as the supplied integral type
; 221  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 222  : #if _HAS_IF_CONSTEXPR
; 223  :     if constexpr (is_integral_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 224  :         return static_cast<_Integral>(_Source);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 225  :     } else if constexpr (is_pointer_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 226  :         return reinterpret_cast<_Integral>(_Source);
; 227  :     } else
; 228  : #endif // _HAS_IF_CONSTEXPR
; 229  :     {
; 230  :         _Integral _Result{}; // zero padding bits
; 231  :         _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));
; 232  :         return _Result;
; 233  :     }
; 234  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z ENDP		; std::_Atomic_reinterpret_as<long,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
tv70 = -68						; size = 4
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 502  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 503  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits
; 504  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Left_size$[ebp]
  0000c	3b 45 14	 cmp	 eax, DWORD PTR __Right_size$[ebp]
  0000f	75 21		 jne	 SHORT $LN3@Traits_equ
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Left_size$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	75 09		 jne	 SHORT $LN3@Traits_equ
  00029	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@Traits_equ
$LN3@Traits_equ:
  00032	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@Traits_equ:
  00039	8a 45 bc	 mov	 al, BYTE PTR tv70[ebp]

; 505  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >, COMDAT

; 101  : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 103  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 104  :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 105  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z PROC		; std::_Atomic_reinterpret_as<int,unsigned int>, COMDAT

; 219  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 220  :     // interprets _Source as the supplied integral type
; 221  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 222  : #if _HAS_IF_CONSTEXPR
; 223  :     if constexpr (is_integral_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 224  :         return static_cast<_Integral>(_Source);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 225  :     } else if constexpr (is_pointer_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 226  :         return reinterpret_cast<_Integral>(_Source);
; 227  :     } else
; 228  : #endif // _HAS_IF_CONSTEXPR
; 229  :     {
; 230  :         _Integral _Result{}; // zero padding bits
; 231  :         _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));
; 232  :         return _Result;
; 233  :     }
; 234  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z ENDP		; std::_Atomic_reinterpret_as<int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >, COMDAT

; 101  : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 103  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 104  :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 105  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$exchange@PAV_Facet_base@std@@PAV12@@std@@YAPAV_Facet_base@0@AAPAV10@$$QAPAV10@@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAV_Facet_base@std@@PAV12@@std@@YAPAV_Facet_base@0@AAPAV10@$$QAPAV10@@Z PROC ; std::exchange<std::_Facet_base *,std::_Facet_base *>, COMDAT

; 597  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 598  :     // assign _New_val to _Val, return previous _Val
; 599  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 600  :     _Val         = static_cast<_Other&&>(_New_val);

  00011	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR __New_val$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 601  :     return _Old_val;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 602  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$exchange@PAV_Facet_base@std@@PAV12@@std@@YAPAV_Facet_base@0@AAPAV10@$$QAPAV10@@Z ENDP ; std::exchange<std::_Facet_base *,std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	83 c0 23	 add	 eax, 35			; 00000023H
  0000f	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  00012	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00015	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00018	77 05		 ja	 SHORT $LN8@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  0001a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001f	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00028	83 c4 04	 add	 esp, 4
  0002b	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002e	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00032	74 02		 je	 SHORT $LN7@Allocate_m
  00034	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0003b	33 c0		 xor	 eax, eax
  0003d	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0003f	33 c0		 xor	 eax, eax
  00041	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00043	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00046	83 c0 23	 add	 eax, 35			; 00000023H
  00049	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0004c	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	6b c8 ff	 imul	 ecx, eax, -1
  00057	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00060	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1454 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1456 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 2455 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00014	51		 push	 ecx
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1344 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1345 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 2540 :     pointer release() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2541 :         return _STD exchange(_Mypair._Myval2, pointer());

  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00013	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$exchange@PAV_Facet_base@std@@PAV12@@std@@YAPAV_Facet_base@0@AAPAV10@$$QAPAV10@@Z ; std::exchange<std::_Facet_base *,std::_Facet_base *>
  00020	83 c4 08	 add	 esp, 8

; 2542 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2510 :     ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2511 :         if (_Mypair._Myval2) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 15		 je	 SHORT $LN3@unique_ptr

; 2512 :             _Mypair._Get_first()(_Mypair._Myval2);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN3@unique_ptr:

; 2513 :         }
; 2514 :     }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 2400 :     void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2401 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 2402 :         delete _Ptr;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00012	83 7d b8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00016	74 13		 je	 SHORT $LN3@operator
  00018	6a 01		 push	 1
  0001a	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	ff d0		 call	 eax
  00026	89 45 b4	 mov	 DWORD PTR tv70[ebp], eax
  00029	eb 07		 jmp	 SHORT $LN2@operator
$LN3@operator:
  0002b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN2@operator:

; 2403 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@$$CBV_Iostream_error_category2@std@@@std@@YAPBV_Iostream_error_category2@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV_Iostream_error_category2@std@@@std@@YAPBV_Iostream_error_category2@0@ABV10@@Z PROC ; std::addressof<std::_Iostream_error_category2 const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBV_Iostream_error_category2@std@@@std@@YAPBV_Iostream_error_category2@0@ABV10@@Z ENDP ; std::addressof<std::_Iostream_error_category2 const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ?load@?$_Atomic_storage@I$03@std@@QBEIW4memory_order@2@@Z
_TEXT	SEGMENT
__As_bytes$ = -8					; size = 4
_this$ = -4						; size = 4
__Order$ = 8						; size = 4
?load@?$_Atomic_storage@I$03@std@@QBEIW4memory_order@2@@Z PROC ; std::_Atomic_storage<unsigned int,4>::load, COMDAT
; _this$ = ecx

; 603  :     _NODISCARD _Ty load(const memory_order _Order) const noexcept { // load with given memory order

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 604  :         auto _As_bytes = _ISO_VOLATILE_LOAD32(_Storage);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d f8	 mov	 DWORD PTR __As_bytes$[ebp], ecx

; 605  :         _Load_barrier(_Order);

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Order$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?_Load_barrier@std@@YAXW4memory_order@1@@Z ; std::_Load_barrier
  00026	83 c4 04	 add	 esp, 4

; 606  :         return reinterpret_cast<_Ty&>(_As_bytes);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __As_bytes$[ebp]

; 607  :     }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?load@?$_Atomic_storage@I$03@std@@QBEIW4memory_order@2@@Z ENDP ; std::_Atomic_storage<unsigned int,4>::load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ?store@?$_Atomic_storage@I$03@std@@QAEXIW4memory_order@2@@Z
_TEXT	SEGMENT
tv66 = -76						; size = 4
__As_bytes$ = -8					; size = 4
_this$ = -4						; size = 4
__Value$ = 8						; size = 4
__Order$ = 12						; size = 4
?store@?$_Atomic_storage@I$03@std@@QAEXIW4memory_order@2@@Z PROC ; std::_Atomic_storage<unsigned int,4>::store, COMDAT
; _this$ = ecx

; 575  :     void store(const _Ty _Value, const memory_order _Order) noexcept { // store with given memory order

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 576  :         const int _As_bytes = _Atomic_reinterpret_as<int>(_Value);

  0000c	8d 45 08	 lea	 eax, DWORD PTR __Value$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Atomic_reinterpret_as@HI@std@@YAHABI@Z ; std::_Atomic_reinterpret_as<int,unsigned int>
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 f8	 mov	 DWORD PTR __As_bytes$[ebp], eax

; 577  :         switch (_Order) {

  0001b	8b 45 0c	 mov	 eax, DWORD PTR __Order$[ebp]
  0001e	89 45 b4	 mov	 DWORD PTR tv66[ebp], eax
  00021	83 7d b4 00	 cmp	 DWORD PTR tv66[ebp], 0
  00025	74 0e		 je	 SHORT $LN4@store
  00027	83 7d b4 03	 cmp	 DWORD PTR tv66[ebp], 3
  0002b	74 1b		 je	 SHORT $LN5@store
  0002d	83 7d b4 05	 cmp	 DWORD PTR tv66[ebp], 5
  00031	74 28		 je	 SHORT $LN7@store
  00033	eb 26		 jmp	 SHORT $LN7@store
$LN4@store:

; 578  :         case memory_order_relaxed:
; 579  :             _ISO_VOLATILE_STORE32(_Storage, _As_bytes);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  0003e	83 c4 04	 add	 esp, 4
  00041	8b 4d f8	 mov	 ecx, DWORD PTR __As_bytes$[ebp]
  00044	89 08		 mov	 DWORD PTR [eax], ecx

; 580  :             return;

  00046	eb 1f		 jmp	 SHORT $LN8@store
$LN5@store:

; 581  :         case memory_order_release:
; 582  :             _Compiler_or_memory_barrier();
; 583  :             _ISO_VOLATILE_STORE32(_Storage, _As_bytes);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  00051	83 c4 04	 add	 esp, 4
  00054	8b 4d f8	 mov	 ecx, DWORD PTR __As_bytes$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 584  :             return;

  00059	eb 0c		 jmp	 SHORT $LN8@store
$LN7@store:

; 585  :         default:
; 586  :         case memory_order_consume:
; 587  :         case memory_order_acquire:
; 588  :         case memory_order_acq_rel:
; 589  :             _INVALID_MEMORY_ORDER;
; 590  :             // [[fallthrough]];
; 591  :         case memory_order_seq_cst:
; 592  :             store(_Value);

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Value$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?store@?$_Atomic_storage@I$03@std@@QAEXI@Z ; std::_Atomic_storage<unsigned int,4>::store
$LN8@store:

; 593  :             return;
; 594  :         }
; 595  :     }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?store@?$_Atomic_storage@I$03@std@@QAEXIW4memory_order@2@@Z ENDP ; std::_Atomic_storage<unsigned int,4>::store
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ?store@?$_Atomic_storage@I$03@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 4
?store@?$_Atomic_storage@I$03@std@@QAEXI@Z PROC		; std::_Atomic_storage<unsigned int,4>::store, COMDAT
; _this$ = ecx

; 565  :     void store(const _Ty _Value) noexcept { // store with sequential consistency

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 566  : #if defined(_M_ARM) || defined(_M_ARM64)
; 567  :         _Memory_barrier();
; 568  :         _ISO_VOLATILE_STORE32(_Storage, _Atomic_reinterpret_as<int>(_Value));
; 569  :         _Memory_barrier();
; 570  : #else // ^^^ ARM32/ARM64 hardware / x86/x64 hardware vvv
; 571  :         (void) _InterlockedExchange(_Atomic_address_as<long>(_Storage), _Atomic_reinterpret_as<long>(_Value));

  0000c	8d 45 08	 lea	 eax, DWORD PTR __Value$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z ; std::_Atomic_reinterpret_as<long,unsigned int>
  00015	83 c4 04	 add	 esp, 4
  00018	8b f0		 mov	 esi, eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  00023	83 c4 04	 add	 esp, 4
  00026	87 30		 xchg	 DWORD PTR [eax], esi

; 572  : #endif // hardware
; 573  :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?store@?$_Atomic_storage@I$03@std@@QAEXI@Z ENDP		; std::_Atomic_storage<unsigned int,4>::store
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00009	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00010	72 0e		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00012	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001b	83 c4 04	 add	 esp, 4
  0001e	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00020	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00024	74 0e		 je	 SHORT $LN3@Allocate

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0002f	83 c4 04	 add	 esp, 4
  00032	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00034	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 66   : }

  00010	5f		 pop	 edi
  00011	5e		 pop	 esi
  00012	5b		 pop	 ebx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00028	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0002f	72 10		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00031	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  00034	50		 push	 eax
  00035	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  0003e	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004e	83 c4 08	 add	 esp, 8

; 222  : }

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
$T1 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	73 08		 jae	 SHORT $LN3@max
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  0001b	eb 06		 jmp	 SHORT $LN4@max
$LN3@max:
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00020	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@max:
  00023	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  00026	89 55 bc	 mov	 DWORD PTR $T1[ebp], edx
  00029	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]

; 45   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  :     return _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00009	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	6a 04		 push	 4
  00018	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001d	83 c4 08	 add	 esp, 8
  00020	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 02		 mov	 DWORD PTR [edx], eax

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
$T1 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 67   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 68   :     // return smaller of _Left and _Right
; 69   :     return _Right < _Left ? _Right : _Left;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	73 08		 jae	 SHORT $LN3@min
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  0001b	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00020	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@min:
  00023	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  00026	89 55 bc	 mov	 DWORD PTR $T1[ebp], edx
  00029	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]

; 70   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -40					; size = 4
__Raw_new$ = -36					; size = 4
__New_ptr$ = -32					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4244 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4245 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4246 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4247 :         auto& _My_data            = _Mypair._Myval2;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4248 :         const size_type _Old_size = _My_data._Mysize;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00015	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 4249 :         if (max_size() - _Old_size < _Size_increase) {

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00023	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00026	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00029	73 05		 jae	 SHORT $LN2@Reallocate

; 4250 :             _Xlen_string(); // result too long

  0002b	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4251 :         }
; 4252 : 
; 4253 :         const size_type _New_size     = _Old_size + _Size_increase;

  00030	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00033	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00036	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4254 :         const size_type _Old_capacity = _My_data._Myres;

  00039	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003f	89 4d ec	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4255 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004e	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4256 :         auto& _Al                     = _Getal();

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00059	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4257 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0005c	8b 45 e8	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	50		 push	 eax
  00063	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00066	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0006b	89 45 e0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4258 :         _My_data._Orphan_all();

  0006e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 4259 :         _My_data._Mysize      = _New_size;

  00076	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4260 :         _My_data._Myres       = _New_capacity;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00082	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00085	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4261 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00088	8b 45 e0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00091	83 c4 04	 add	 esp, 4
  00094	89 45 dc	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4262 :         if (_BUF_SIZE <= _Old_capacity) {

  00097	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009b	72 4a		 jb	 SHORT $LN3@Reallocate

; 4263 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009d	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	89 4d d8	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 4264 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000ac	51		 push	 ecx
  000ad	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000b0	52		 push	 edx
  000b1	8b 45 d8	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ba	83 c4 04	 add	 esp, 4
  000bd	50		 push	 eax
  000be	8b 4d dc	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000c1	51		 push	 ecx
  000c2	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000c5	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4265 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ca	8b 45 ec	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000cd	83 c0 01	 add	 eax, 1
  000d0	50		 push	 eax
  000d1	8b 4d d8	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000d4	51		 push	 ecx
  000d5	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4266 :             _My_data._Bx._Ptr = _New_ptr;

  000dd	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e0	8b 4d e0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e3	89 08		 mov	 DWORD PTR [eax], ecx

; 4267 :         } else {

  000e5	eb 2c		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4268 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000e7	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000f2	52		 push	 edx
  000f3	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d dc	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000fa	51		 push	 ecx
  000fb	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000fe	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4269 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00103	8d 45 e0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00106	50		 push	 eax
  00107	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00110	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4270 :         }
; 4271 : 
; 4272 :         return *this;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4273 :     }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 10 00	 ret	 16			; 00000010H
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2871 :                 const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2872 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2873 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00020	8b 45 18	 mov	 eax, DWORD PTR __Count$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002b	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00037	c6 45 bb 00	 mov	 BYTE PTR $T1[ebp], 0
  0003b	8d 45 bb	 lea	 eax, DWORD PTR $T1[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00042	03 4d 18	 add	 ecx, DWORD PTR __Count$[ebp]
  00045	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0004e	83 c4 08	 add	 esp, 8

; 2875 :             },

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -20					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4218 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4219 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4220 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4221 :         if (_New_size > max_size()) {

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00014	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00017	76 05		 jbe	 SHORT $LN2@Reallocate

; 4222 :             _Xlen_string(); // result too long

  00019	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4223 :         }
; 4224 : 
; 4225 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00024	89 4d f8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4226 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00027	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00033	89 45 f4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4227 :         auto& _Al                     = _Getal();

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0003e	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 4228 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00041	8b 45 f4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  0004b	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00050	89 45 ec	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4229 :         _Mypair._Myval2._Orphan_all();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 4230 :         _Mypair._Myval2._Mysize = _New_size;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00061	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4231 :         _Mypair._Myval2._Myres  = _New_capacity;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4232 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  0006d	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 ec	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0007e	83 c4 04	 add	 esp, 4
  00081	50		 push	 eax
  00082	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00085	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4233 :         if (_BUF_SIZE <= _Old_capacity) {

  0008a	83 7d f8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0008e	72 1f		 jb	 SHORT $LN3@Reallocate

; 4234 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00090	8b 45 f8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	50		 push	 eax
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	52		 push	 edx
  0009d	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4235 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d ec	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000ab	89 08		 mov	 DWORD PTR [eax], ecx

; 4236 :         } else {

  000ad	eb 10		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4237 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000af	8d 45 ec	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000bc	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4238 :         }
; 4239 : 
; 4240 :         return *this;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4241 :     }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2976 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2977 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00020	c6 45 bb 00	 mov	 BYTE PTR $T1[ebp], 0
  00024	8d 45 bb	 lea	 eax, DWORD PTR $T1[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0002b	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00034	83 c4 08	 add	 esp, 8

; 2979 :             },

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 267  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 268  :     _Obj.~_Ty();
; 269  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1336 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1341 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1466 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1467 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1468 : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Ans$ = -4						; size = 4
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 509  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 510  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 511  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

  00009	8d 45 14	 lea	 eax, DWORD PTR __Right_size$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 0c	 lea	 ecx, DWORD PTR __Left_size$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00016	83 c4 08	 add	 esp, 8
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	52		 push	 edx
  0001c	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	89 45 fc	 mov	 DWORD PTR __Ans$[ebp], eax

; 512  : 
; 513  :     if (_Ans != 0) {

  0002f	83 7d fc 00	 cmp	 DWORD PTR __Ans$[ebp], 0
  00033	74 05		 je	 SHORT $LN2@Traits_com

; 514  :         return _Ans;

  00035	8b 45 fc	 mov	 eax, DWORD PTR __Ans$[ebp]
  00038	eb 1e		 jmp	 SHORT $LN5@Traits_com
$LN2@Traits_com:

; 515  :     }
; 516  : 
; 517  :     if (_Left_size < _Right_size) {

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __Left_size$[ebp]
  0003d	3b 45 14	 cmp	 eax, DWORD PTR __Right_size$[ebp]
  00040	73 05		 jae	 SHORT $LN3@Traits_com

; 518  :         return -1;

  00042	83 c8 ff	 or	 eax, -1
  00045	eb 11		 jmp	 SHORT $LN5@Traits_com
$LN3@Traits_com:

; 519  :     }
; 520  : 
; 521  :     if (_Left_size > _Right_size) {

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Left_size$[ebp]
  0004a	3b 45 14	 cmp	 eax, DWORD PTR __Right_size$[ebp]
  0004d	76 07		 jbe	 SHORT $LN4@Traits_com

; 522  :         return 1;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	eb 02		 jmp	 SHORT $LN5@Traits_com
$LN4@Traits_com:

; 523  :     }
; 524  : 
; 525  :     return 0;

  00056	33 c0		 xor	 eax, eax
$LN5@Traits_com:

; 526  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4518 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4519 :     return _Right < _Left;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00016	83 c4 08	 add	 esp, 8

; 4520 : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator><char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
tv68 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4502 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4503 :     return _Left.compare(_Right) < 0;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00015	85 c0		 test	 eax, eax
  00017	7d 09		 jge	 SHORT $LN3@operator
  00019	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00020	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00022	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@operator:
  00029	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 4504 : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4470 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4471 :     return _Left._Equal(_Right);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 4472 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCIniFile@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCIniFile@@UAEPAXI@Z PROC				; CIniFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CIniFile@@UAE@XZ	; CIniFile::~CIniFile
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCIniFile@@UAEPAXI@Z ENDP				; CIniFile::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Start$ = 8						; size = 4
_End$ = 12						; size = 4
??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z PROC ; CIniFile::DescendingRecordSort::operator(), COMDAT
; _this$ = ecx

; 107  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 			return Start.Key > End.Key;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _End$[ebp]
  0000f	83 c0 34	 add	 eax, 52			; 00000034H
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _Start$[ebp]
  00016	83 c1 34	 add	 ecx, 52			; 00000034H
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator><char,std::char_traits<char>,std::allocator<char> >
  0001f	83 c4 08	 add	 esp, 8

; 109  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??RDescendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ENDP ; CIniFile::DescendingRecordSort::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Start$ = 8						; size = 4
_End$ = 12						; size = 4
??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z PROC ; CIniFile::AscendingRecordSort::operator(), COMDAT
; _this$ = ecx

; 99   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 			return Start.Key < End.Key;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _End$[ebp]
  0000f	83 c0 34	 add	 eax, 52			; 00000034H
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _Start$[ebp]
  00016	83 c1 34	 add	 ecx, 52			; 00000034H
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0001f	83 c4 08	 add	 esp, 8

; 101  : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??RAscendingRecordSort@CIniFile@@QAE_NAAURecord@1@0@Z ENDP ; CIniFile::AscendingRecordSort::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Start$ = 8						; size = 4
_End$ = 12						; size = 4
??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z PROC ; CIniFile::DescendingSectionSort::operator(), COMDAT
; _this$ = ecx

; 91   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 			return Start.Section > End.Section;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _End$[ebp]
  0000f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _Start$[ebp]
  00016	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$?ODU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator><char,std::char_traits<char>,std::allocator<char> >
  0001f	83 c4 08	 add	 esp, 8

; 93   : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??RDescendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ENDP ; CIniFile::DescendingSectionSort::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Start$ = 8						; size = 4
_End$ = 12						; size = 4
??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z PROC ; CIniFile::AscendingSectionSort::operator(), COMDAT
; _this$ = ecx

; 83   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 			return Start.Section < End.Section;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _End$[ebp]
  0000f	83 c0 1c	 add	 eax, 28			; 0000001cH
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _Start$[ebp]
  00016	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0001f	83 c4 08	 add	 esp, 8

; 85   : 		}

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??RAscendingSectionSort@CIniFile@@QAE_NAAURecord@1@0@Z ENDP ; CIniFile::AscendingSectionSort::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1RecordSectionKeyIs@CIniFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RecordSectionKeyIs@CIniFile@@QAE@XZ PROC		; CIniFile::RecordSectionKeyIs::~RecordSectionKeyIs, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 18	 add	 ecx, 24			; 00000018H
  00012	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1RecordSectionKeyIs@CIniFile@@QAE@XZ ENDP		; CIniFile::RecordSectionKeyIs::~RecordSectionKeyIs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RRecordSectionKeyIs@CIniFile@@QBE_NABURecord@1@@Z
_TEXT	SEGMENT
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_rec$ = 8						; size = 4
??RRecordSectionKeyIs@CIniFile@@QBE_NABURecord@1@@Z PROC ; CIniFile::RecordSectionKeyIs::operator(), COMDAT
; _this$ = ecx

; 75   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 			return ((rec.Section == section_)&&(rec.Key == key_));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _rec$[ebp]
  00013	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0001c	83 c4 08	 add	 esp, 8
  0001f	0f b6 d0	 movzx	 edx, al
  00022	85 d2		 test	 edx, edx
  00024	74 26		 je	 SHORT $LN3@operator
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c0 18	 add	 eax, 24			; 00000018H
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _rec$[ebp]
  00030	83 c1 34	 add	 ecx, 52			; 00000034H
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00039	83 c4 08	 add	 esp, 8
  0003c	0f b6 d0	 movzx	 edx, al
  0003f	85 d2		 test	 edx, edx
  00041	74 09		 je	 SHORT $LN3@operator
  00043	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  0004a	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0004c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN4@operator:
  00053	8a 45 b8	 mov	 al, BYTE PTR tv78[ebp]

; 77   : 		}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
??RRecordSectionKeyIs@CIniFile@@QBE_NABURecord@1@@Z ENDP ; CIniFile::RecordSectionKeyIs::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_section$ = 8						; size = 4
_key$ = 12						; size = 4
??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs, COMDAT
; _this$ = ecx

; 72   : 		RecordSectionKeyIs(const std::string& section, const std::string& key): section_(section),key_(key){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _section$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00041	50		 push	 eax
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 18	 add	 ecx, 24			; 00000018H
  00048	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00054	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
; Function compile flags: /Odtp /ZI
;	COMDAT ??1RecordSectionIs@CIniFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RecordSectionIs@CIniFile@@QAE@XZ PROC		; CIniFile::RecordSectionIs::~RecordSectionIs, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1RecordSectionIs@CIniFile@@QAE@XZ ENDP		; CIniFile::RecordSectionIs::~RecordSectionIs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??RRecordSectionIs@CIniFile@@QBE_NABURecord@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rec$ = 8						; size = 4
??RRecordSectionIs@CIniFile@@QBE_NABURecord@1@@Z PROC	; CIniFile::RecordSectionIs::operator(), COMDAT
; _this$ = ecx

; 62   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 			return rec.Section == section_;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _rec$[ebp]
  00013	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0001c	83 c4 08	 add	 esp, 8

; 64   : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??RRecordSectionIs@CIniFile@@QBE_NABURecord@1@@Z ENDP	; CIniFile::RecordSectionIs::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.h
;	COMDAT ??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_section$ = 8						; size = 4
??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CIniFile::RecordSectionIs::RecordSectionIs, COMDAT
; _this$ = ecx

; 59   : 		RecordSectionIs(const std::string& section): section_(section){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _section$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CIniFile::RecordSectionIs::RecordSectionIs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
_TEXT	SEGMENT
$T2 = -258						; size = 1
$T3 = -257						; size = 1
_i$4 = -192						; size = 4
_outFile$ = -188					; size = 176
__$EHRec$ = -12						; size = 12
_FileName$ = 8						; size = 24
_content$ = 32						; size = 4
?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z PROC ; CIniFile::Save, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 100  : 	ofstream outFile (FileName.c_str());									// Create an output filestream

  00032	6a 01		 push	 1
  00034	6a 40		 push	 64			; 00000040H
  00036	6a 02		 push	 2
  00038	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0003b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00040	50		 push	 eax
  00041	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 101  : 	if (!outFile.is_open()) return false;									// If the output file doesn't open, then return

  00050	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  00056	e8 00 00 00 00	 call	 ?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ofstream<char,std::char_traits<char> >::is_open
  0005b	0f b6 c0	 movzx	 eax, al
  0005e	85 c0		 test	 eax, eax
  00060	75 30		 jne	 SHORT $LN5@Save
  00062	c6 85 ff fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  00069	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0006d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  00073	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00078	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007f	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00082	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00087	8a 85 ff fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  0008d	e9 92 01 00 00	 jmp	 $LN1@Save
$LN5@Save:

; 102  : 
; 103  : 	for (int i=0;i<(int)content.size();i++)									// Loop through each std::vector

  00092	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$4[ebp], 0
  0009c	eb 0f		 jmp	 SHORT $LN4@Save
$LN2@Save:
  0009e	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 85 40 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN4@Save:
  000ad	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  000b0	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  000b5	39 85 40 ff ff
	ff		 cmp	 DWORD PTR _i$4[ebp], eax
  000bb	0f 8d 2d 01 00
	00		 jge	 $LN3@Save

; 104  : 	{
; 105  : 		outFile << content[i].Comments;										// Write out the comments

  000c1	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  000cb	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000d0	50		 push	 eax
  000d1	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  000dd	83 c4 08	 add	 esp, 8

; 106  : 		if(content[i].Key == "")											// Is this a section?

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000e5	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  000ef	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000f4	83 c0 34	 add	 eax, 52			; 00000034H
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000fd	83 c4 08	 add	 esp, 8
  00100	0f b6 c8	 movzx	 ecx, al
  00103	85 c9		 test	 ecx, ecx
  00105	74 6b		 je	 SHORT $LN6@Save

; 107  : 			outFile << content[i].Commented << "[" 

  00107	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_01LBDDMOBJ@?$FN@
  00111	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00117	50		 push	 eax
  00118	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  0011b	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00120	83 c0 1c	 add	 eax, 28			; 0000001cH
  00123	50		 push	 eax
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_01OHGJGJJP@?$FL@
  00129	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _i$4[ebp]
  0012f	51		 push	 ecx
  00130	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  00133	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00138	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0013b	0f b6 c2	 movzx	 eax, dl
  0013e	50		 push	 eax
  0013f	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  00145	51		 push	 ecx
  00146	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0014b	83 c4 08	 add	 esp, 8
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00154	83 c4 08	 add	 esp, 8
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0015d	83 c4 08	 add	 esp, 8
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00166	83 c4 08	 add	 esp, 8
  00169	8b c8		 mov	 ecx, eax
  0016b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00170	eb 77		 jmp	 SHORT $LN7@Save
$LN6@Save:

; 108  : 			<< content[i].Section << "]" << endl;							// Then format the section
; 109  : 		else
; 110  : 			outFile << content[i].Commented << content[i].Key  

  00172	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00177	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0017d	50		 push	 eax
  0017e	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  00181	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00186	83 c0 4c	 add	 eax, 76			; 0000004cH
  00189	50		 push	 eax
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN@
  0018f	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _i$4[ebp]
  00195	51		 push	 ecx
  00196	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  00199	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  0019e	83 c0 34	 add	 eax, 52			; 00000034H
  001a1	50		 push	 eax
  001a2	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _i$4[ebp]
  001a8	52		 push	 edx
  001a9	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  001ac	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  001b1	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  001b4	0f b6 c8	 movzx	 ecx, al
  001b7	51		 push	 ecx
  001b8	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _outFile$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001c4	83 c4 08	 add	 esp, 8
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001cd	83 c4 08	 add	 esp, 8
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001d6	83 c4 08	 add	 esp, 8
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001df	83 c4 08	 add	 esp, 8
  001e2	8b c8		 mov	 ecx, eax
  001e4	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
$LN7@Save:

; 111  : 			<< "=" << content[i].Value << endl;								// Else format a key/value
; 112  : 	}

  001e9	e9 b0 fe ff ff	 jmp	 $LN2@Save
$LN3@Save:

; 113  : 
; 114  : 	outFile.close();														// Close the file

  001ee	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  001f4	e8 00 00 00 00	 call	 ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close

; 115  : 	return true;

  001f9	c6 85 fe fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00200	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00204	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  0020a	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0020f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00216	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00219	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0021e	8a 85 fe fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@Save:

; 116  : }

  00224	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00227	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022e	59		 pop	 ecx
  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5b		 pop	 ebx
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$1:
  00008	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _outFile$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ENDP ; CIniFile::Save
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
_TEXT	SEGMENT
tv296 = -664						; size = 4
tv301 = -660						; size = 4
tv299 = -660						; size = 4
tv153 = -660						; size = 4
$T2 = -653						; size = 1
$T3 = -652						; size = 24
$T4 = -628						; size = 24
$T5 = -604						; size = 4
$T6 = -600						; size = 4
$T7 = -596						; size = 4
$T8 = -592						; size = 24
$T9 = -568						; size = 4
$T10 = -564						; size = 4
$T11 = -560						; size = 4
$T12 = -556						; size = 24
$T13 = -532						; size = 24
$T14 = -508						; size = 4
$T15 = -501						; size = 1
_r$16 = -372						; size = 100
_comments$ = -272					; size = 24
_inFile$ = -248						; size = 184
_CurrentSection$ = -64					; size = 24
_s$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_FileName$ = 8						; size = 24
_content$ = 32						; size = 4
?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z PROC ; CIniFile::Load, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 02 00
	00		 sub	 esp, 652		; 0000028cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 40   : 	std::string s;																// Holds the current line from the ini file

  00035	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 41   : 	std::string CurrentSection;													// Holds the current section name

  00041	8d 4d c0	 lea	 ecx, DWORD PTR _CurrentSection$[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00049	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 42   : 
; 43   : 	ifstream inFile (FileName.c_str());										// Create an input filestream

  0004d	6a 01		 push	 1
  0004f	6a 40		 push	 64			; 00000040H
  00051	6a 01		 push	 1
  00053	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00056	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0005b	50		 push	 eax
  0005c	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  00067	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 44   : 	if (!inFile.is_open()) return false;									// If the input file doesn't open, then return

  0006b	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  00071	e8 00 00 00 00	 call	 ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
  00076	0f b6 c0	 movzx	 eax, al
  00079	85 c0		 test	 eax, eax
  0007b	75 48		 jne	 SHORT $LN4@Load
  0007d	c6 85 0b fe ff
	ff 00		 mov	 BYTE PTR $T15[ebp], 0
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00088	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  0008e	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00097	8d 4d c0	 lea	 ecx, DWORD PTR _CurrentSection$[ebp]
  0009a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b2	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ba	8a 85 0b fe ff
	ff		 mov	 al, BYTE PTR $T15[ebp]
  000c0	e9 e2 03 00 00	 jmp	 $LN1@Load
$LN4@Load:

; 45   : 	content.clear();														// Clear the content std::vector

  000c5	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  000c8	e8 00 00 00 00	 call	 ?clear@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::clear

; 46   : 
; 47   : 	std::string comments = "";													// A std::string to store comments in

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000d2	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  000d8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
$LN2@Load:

; 48   : 
; 49   : 	while(!std::getline(inFile, s).eof())									// Read until the end of the file

  000e1	8d 45 d8	 lea	 eax, DWORD PTR _s$[ebp]
  000e4	50		 push	 eax
  000e5	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  000f1	83 c4 08	 add	 esp, 8
  000f4	89 85 04 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  000fa	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR $T14[ebp]
  00100	8b 02		 mov	 eax, DWORD PTR [edx]
  00102	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  00108	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0010b	e8 00 00 00 00	 call	 ?eof@ios_base@std@@QBE_NXZ ; std::ios_base::eof
  00110	0f b6 c8	 movzx	 ecx, al
  00113	85 c9		 test	 ecx, ecx
  00115	0f 85 2f 03 00
	00		 jne	 $LN3@Load

; 50   : 	{
; 51   : 		Trim(s);															// Trim whitespace from the ends

  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_04DNCNJDPH@?5?7?6?$AN@
  00120	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00126	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0012f	6a 00		 push	 0
  00131	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00137	50		 push	 eax
  00138	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z ; Trim
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH
  00144	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00148	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0014e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 52   : 		if(!s.empty())														// Make sure its not a blank line

  00153	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00156	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  0015b	0f b6 c0	 movzx	 eax, al
  0015e	85 c0		 test	 eax, eax
  00160	0f 85 df 02 00
	00		 jne	 $LN5@Load

; 53   : 		{
; 54   : 			Record r;														// Define a new record

  00166	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp]
  0016c	e8 00 00 00 00	 call	 ??0Record@CIniFile@@QAE@XZ
  00171	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 55   : 
; 56   : 			if((s[0]=='#')||(s[0]==';'))									// Is this a commented line?

  00175	6a 00		 push	 0
  00177	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0017a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0017f	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00182	83 f8 23	 cmp	 eax, 35			; 00000023H
  00185	74 16		 je	 SHORT $LN8@Load
  00187	6a 00		 push	 0
  00189	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0018c	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00191	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00194	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00197	0f 85 e9 00 00
	00		 jne	 $LN6@Load
$LN8@Load:

; 57   : 			{
; 58   : 				if ((s.find('[')==std::string::npos)&&							// If there is no [ or =

  0019d	6a 00		 push	 0
  0019f	6a 5b		 push	 91			; 0000005bH
  001a1	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  001a4	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001a9	83 f8 ff	 cmp	 eax, -1
  001ac	75 5f		 jne	 SHORT $LN9@Load
  001ae	6a 00		 push	 0
  001b0	6a 3d		 push	 61			; 0000003dH
  001b2	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  001b5	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001ba	83 f8 ff	 cmp	 eax, -1
  001bd	75 4e		 jne	 SHORT $LN9@Load

; 59   : 					(s.find('=')==std::string::npos))							// Then it's a comment
; 60   : 				{
; 61   : 					comments += s + '\n';									// Add the comment to the current comments std::string

  001bf	6a 0a		 push	 10			; 0000000aH
  001c1	8d 45 d8	 lea	 eax, DWORD PTR _s$[ebp]
  001c4	50		 push	 eax
  001c5	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d4	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv153[ebp], eax
  001da	8b 95 6c fd ff
	ff		 mov	 edx, DWORD PTR tv153[ebp]
  001e0	89 95 68 fd ff
	ff		 mov	 DWORD PTR tv296[ebp], edx
  001e6	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001ea	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR tv296[ebp]
  001f0	50		 push	 eax
  001f1	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  001f7	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  001fc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00200	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00206	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 62   : 				} else {

  0020b	eb 77		 jmp	 SHORT $LN10@Load
$LN9@Load:

; 63   : 					r.Commented = s[0];										// Save the comment character

  0020d	6a 00		 push	 0
  0020f	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00212	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00217	8a 00		 mov	 al, BYTE PTR [eax]
  00219	88 85 a4 fe ff
	ff		 mov	 BYTE PTR _r$16[ebp+24], al

; 64   : 					s.erase(s.begin());										// Remove the comment for further processing

  0021f	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00225	50		 push	 eax
  00226	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00229	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0022e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00230	89 8d d0 fd ff
	ff		 mov	 DWORD PTR $T11[ebp], ecx
  00236	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR $T11[ebp]
  0023c	52		 push	 edx
  0023d	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00243	50		 push	 eax
  00244	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00247	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 65   : 					Trim(s);

  0024c	68 00 00 00 00	 push	 OFFSET ??_C@_04DNCNJDPH@?5?7?6?$AN@
  00251	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00257	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0025c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00260	6a 00		 push	 0
  00262	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00268	50		 push	 eax
  00269	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 ?Trim@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@H@Z ; Trim
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH
  00275	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00279	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0027f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN10@Load:

; 66   : 				}// Remove any more whitespace

  00284	eb 07		 jmp	 SHORT $LN7@Load
$LN6@Load:

; 67   : 			} else r.Commented = ' ';										// else mark it as not being a comment

  00286	c6 85 a4 fe ff
	ff 20		 mov	 BYTE PTR _r$16[ebp+24], 32 ; 00000020H
$LN7@Load:

; 68   : 
; 69   : 			if(s.find('[')!=std::string::npos)									// Is this line a section?

  0028d	6a 00		 push	 0
  0028f	6a 5b		 push	 91			; 0000005bH
  00291	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00294	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00299	83 f8 ff	 cmp	 eax, -1
  0029c	0f 84 9f 00 00
	00		 je	 $LN11@Load

; 70   : 			{		
; 71   : 				s.erase(s.begin());											// Erase the leading bracket

  002a2	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  002a8	50		 push	 eax
  002a9	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  002ac	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b3	89 8d ac fd ff
	ff		 mov	 DWORD PTR $T7[ebp], ecx
  002b9	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR $T7[ebp]
  002bf	52		 push	 edx
  002c0	8d 85 a4 fd ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  002c6	50		 push	 eax
  002c7	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  002ca	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 72   : 				s.erase(s.find(']'));										// Erase the trailing bracket

  002cf	6a 00		 push	 0
  002d1	6a 5d		 push	 93			; 0000005dH
  002d3	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  002d6	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  002db	50		 push	 eax
  002dc	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  002df	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 73   : 				r.Comments = comments;										// Add the comments std::string (if any)

  002e4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _comments$[ebp]
  002ea	50		 push	 eax
  002eb	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp]
  002f1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 74   : 				comments = "";												// Clear the comments for re-use

  002f6	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  002fb	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  00301	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 75   : 				r.Section = s;												// Set the Section value

  00306	8d 45 d8	 lea	 eax, DWORD PTR _s$[ebp]
  00309	50		 push	 eax
  0030a	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+28]
  00310	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 76   : 				r.Key = "";													// Set the Key value

  00315	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0031a	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+52]
  00320	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 77   : 				r.Value = "";												// Set the Value value

  00325	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0032a	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+76]
  00330	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 78   : 				CurrentSection = s;

  00335	8d 45 d8	 lea	 eax, DWORD PTR _s$[ebp]
  00338	50		 push	 eax
  00339	8d 4d c0	 lea	 ecx, DWORD PTR _CurrentSection$[ebp]
  0033c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN11@Load:

; 79   : 			}
; 80   : 
; 81   : 			if(s.find('=')!=std::string::npos)									// Is this line a Key/Value?

  00341	6a 00		 push	 0
  00343	6a 3d		 push	 61			; 0000003dH
  00345	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00348	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0034d	83 f8 ff	 cmp	 eax, -1
  00350	0f 84 b6 00 00
	00		 je	 $LN12@Load

; 82   : 			{
; 83   : 				r.Comments = comments;										// Add the comments std::string (if any)

  00356	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _comments$[ebp]
  0035c	50		 push	 eax
  0035d	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp]
  00363	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 84   : 				comments = "";												// Clear the comments for re-use

  00368	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0036d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  00373	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 85   : 				r.Section = CurrentSection;									// Set the section to the current Section

  00378	8d 45 c0	 lea	 eax, DWORD PTR _CurrentSection$[ebp]
  0037b	50		 push	 eax
  0037c	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+28]
  00382	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 86   : 				r.Key = s.substr(0,s.find('='));							// Set the Key value to everything before the = sign

  00387	6a 00		 push	 0
  00389	6a 3d		 push	 61			; 0000003dH
  0038b	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0038e	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00393	50		 push	 eax
  00394	6a 00		 push	 0
  00396	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0039c	50		 push	 eax
  0039d	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  003a0	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  003a5	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv299[ebp], eax
  003ab	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR tv299[ebp]
  003b1	51		 push	 ecx
  003b2	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+52]
  003b8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  003bd	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003c3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 87   : 				r.Value = s.substr(s.find('=')+1);							// Set the Value to everything after the = sign

  003c8	6a ff		 push	 -1
  003ca	6a 00		 push	 0
  003cc	6a 3d		 push	 61			; 0000003dH
  003ce	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  003d1	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  003d6	83 c0 01	 add	 eax, 1
  003d9	50		 push	 eax
  003da	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003e0	50		 push	 eax
  003e1	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  003e4	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  003e9	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv301[ebp], eax
  003ef	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR tv301[ebp]
  003f5	51		 push	 ecx
  003f6	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp+76]
  003fc	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00401	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00407	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@Load:

; 88   : 			}
; 89   : 			if(comments == "")												// Don't add a record yet if its a comment line

  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00411	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _comments$[ebp]
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0041d	83 c4 08	 add	 esp, 8
  00420	0f b6 c8	 movzx	 ecx, al
  00423	85 c9		 test	 ecx, ecx
  00425	74 0f		 je	 SHORT $LN13@Load

; 90   : 				content.push_back(r);										// Add the record to content

  00427	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _r$16[ebp]
  0042d	50		 push	 eax
  0042e	8b 4d 20	 mov	 ecx, DWORD PTR _content$[ebp]
  00431	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
$LN13@Load:

; 91   : 		}

  00436	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0043a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp]
  00440	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
$LN5@Load:

; 92   : 	}

  00445	e9 97 fc ff ff	 jmp	 $LN2@Load
$LN3@Load:

; 93   : 	
; 94   : 	inFile.close();															// Close the file

  0044a	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  00450	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close

; 95   : 	return true;

  00455	c6 85 73 fd ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  0045c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00460	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  00466	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0046b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0046f	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  00475	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0047a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0047e	8d 4d c0	 lea	 ecx, DWORD PTR _CurrentSection$[ebp]
  00481	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00486	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0048a	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0048d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00492	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00499	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0049c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004a1	8a 85 73 fd ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@Load:

; 96   : }

  004a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b1	59		 pop	 ecx
  004b2	5f		 pop	 edi
  004b3	5e		 pop	 esi
  004b4	5b		 pop	 ebx
  004b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b8	33 cd		 xor	 ecx, ebp
  004ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bf	8b e5		 mov	 esp, ebp
  004c1	5d		 pop	 ebp
  004c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$2:
  00010	8d 4d c0	 lea	 ecx, DWORD PTR _CurrentSection$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$3:
  00018	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _inFile$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$4:
  00023	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _comments$[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$5:
  0002e	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$6:
  00039	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _r$16[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$7:
  00044	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z$8:
  0004f	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
  0005e	cc		 int	 3
__ehhandler$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z:
  0005f	90		 npad	 1
  00060	90		 npad	 1
  00061	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00065	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00068	8b 8a 64 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-668]
  0006e	33 c8		 xor	 ecx, eax
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00078	33 c8		 xor	 ecx, eax
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z
  00084	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ENDP ; CIniFile::Load
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
_TEXT	SEGMENT
tv71 = -113						; size = 1
$T2 = -112						; size = 4
$T3 = -108						; size = 4
_i$4 = -40						; size = 4
_content$ = -36						; size = 12
_data$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_FileName$ = 12						; size = 24
?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z PROC ; CIniFile::GetSections, COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 450  : 	std::vector<Record> data;													// Holds the return data

  00036	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 451  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00042	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0004a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 452  : 
; 453  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0004e	8d 45 dc	 lea	 eax, DWORD PTR _content$[ebp]
  00051	50		 push	 eax
  00052	83 ec 18	 sub	 esp, 24			; 00000018H
  00055	8b cc		 mov	 ecx, esp
  00057	89 65 94	 mov	 DWORD PTR $T3[ebp], esp
  0005a	8d 55 0c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	88 45 8f	 mov	 BYTE PTR tv71[ebp], al
  0006e	0f b6 45 8f	 movzx	 eax, BYTE PTR tv71[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 5a		 je	 SHORT $LN5@GetSection

; 454  : 	{
; 455  : 		for (int i=0;i<(int)content.size();i++)								// Loop through the content

  00076	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN4@GetSection
$LN2@GetSection:
  0007f	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 d8	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@GetSection:
  00088	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0008b	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  00090	39 45 d8	 cmp	 DWORD PTR _i$4[ebp], eax
  00093	7d 3b		 jge	 SHORT $LN5@GetSection

; 456  : 		{
; 457  : 			if(content[i].Key == "")										// If this is a section 

  00095	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0009a	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  0009d	50		 push	 eax
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000a1	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000a6	83 c0 34	 add	 eax, 52			; 00000034H
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000af	83 c4 08	 add	 esp, 8
  000b2	0f b6 c8	 movzx	 ecx, al
  000b5	85 c9		 test	 ecx, ecx
  000b7	74 15		 je	 SHORT $LN6@GetSection

; 458  : 				data.push_back(content[i]);									// Add the record to the return data

  000b9	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000c0	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000c5	50		 push	 eax
  000c6	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  000c9	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
$LN6@GetSection:

; 459  : 		}

  000ce	eb af		 jmp	 SHORT $LN2@GetSection
$LN5@GetSection:

; 460  : 	}
; 461  : 	
; 462  : 	return data;															// Return the data

  000d0	8d 45 e8	 lea	 eax, DWORD PTR _data$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d7	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000dc	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  000df	83 c9 01	 or	 ecx, 1
  000e2	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx
  000e5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e9	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000ec	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000f1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f5	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  000f8	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00104	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00107	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 463  : }

  0010f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00112	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00119	59		 pop	 ecx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2:
  00010	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ENDP ; CIniFile::GetSections
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
tv151 = -114						; size = 1
tv69 = -114						; size = 1
$T2 = -113						; size = 1
$T3 = -112						; size = 4
$T4 = -105						; size = 1
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
_iter$8 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_SectionName$ = 8					; size = 24
_FileName$ = 32						; size = 24
?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::UnCommentSection, COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 346  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 347  : 
; 348  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T7[ebp], esp
  00047	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 8e	 mov	 BYTE PTR tv69[ebp], al
  0005b	0f b6 45 8e	 movzx	 eax, BYTE PTR tv69[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 b7 00 00
	00		 je	 $LN5@UnCommentS

; 349  : 	{
; 350  : 		for(std::vector<Record>::iterator iter = content.begin(); iter < content.end(); iter++)

  00067	8d 45 e4	 lea	 eax, DWORD PTR _iter$8[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0006e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00073	eb 0e		 jmp	 SHORT $LN4@UnCommentS
$LN2@UnCommentS:
  00075	6a 00		 push	 0
  00077	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  0007e	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN4@UnCommentS:
  00083	8d 45 98	 lea	 eax, DWORD PTR $T5[ebp]
  00086	50		 push	 eax
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0008a	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  0008f	50		 push	 eax
  00090	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  00093	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  00098	0f b6 c8	 movzx	 ecx, al
  0009b	85 c9		 test	 ecx, ecx
  0009d	74 2d		 je	 SHORT $LN3@UnCommentS

; 351  : 		{
; 352  : 			if(iter->Section == SectionName)								// Is this the right section?

  0009f	8d 45 08	 lea	 eax, DWORD PTR _SectionName$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000a6	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000ab	83 c0 1c	 add	 eax, 28			; 0000001cH
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000b4	83 c4 08	 add	 esp, 8
  000b7	0f b6 c8	 movzx	 ecx, al
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 0c		 je	 SHORT $LN6@UnCommentS

; 353  : 				iter->Commented = ' ';										// Remove the comment value

  000be	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000c1	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000c6	c6 40 18 20	 mov	 BYTE PTR [eax+24], 32	; 00000020H
$LN6@UnCommentS:

; 354  : 		}																	

  000ca	eb a9		 jmp	 SHORT $LN2@UnCommentS
$LN3@UnCommentS:

; 355  : 		return Save(FileName,content);										// Save

  000cc	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  000cf	50		 push	 eax
  000d0	83 ec 18	 sub	 esp, 24			; 00000018H
  000d3	8b cc		 mov	 ecx, esp
  000d5	89 65 90	 mov	 DWORD PTR $T3[ebp], esp
  000d8	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e1	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  000e6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000e9	88 45 8e	 mov	 BYTE PTR tv151[ebp], al
  000ec	8a 45 8e	 mov	 al, BYTE PTR tv151[ebp]
  000ef	88 45 97	 mov	 BYTE PTR $T4[ebp], al
  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000fe	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00102	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00105	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00111	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00119	8a 45 97	 mov	 al, BYTE PTR $T4[ebp]
  0011c	eb 2e		 jmp	 SHORT $LN1@UnCommentS
$LN5@UnCommentS:

; 356  : 	}
; 357  : 
; 358  : 	return false;															// In the event the file does not load

  0011e	c6 45 8f 00	 mov	 BYTE PTR $T2[ebp], 0
  00122	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00126	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00129	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0012e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00132	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00135	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00141	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00144	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00149	8a 45 8f	 mov	 al, BYTE PTR $T2[ebp]
$LN1@UnCommentS:

; 359  : }

  0014c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00156	59		 pop	 ecx
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UnCommentSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::UnCommentSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
_TEXT	SEGMENT
tv163 = -122						; size = 1
tv70 = -122						; size = 1
$T2 = -121						; size = 1
$T3 = -120						; size = 4
$T4 = -114						; size = 1
$T5 = -113						; size = 1
$T6 = -112						; size = 4
$T7 = -108						; size = 4
$T8 = -104						; size = 4
$T9 = -100						; size = 4
$T10 = -96						; size = 4
_iter$11 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_KeyName$ = 8						; size = 24
_SectionName$ = 32					; size = 24
_FileName$ = 56						; size = 24
?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z PROC ; CIniFile::UnCommentRecord, COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 310  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 311  : 
; 312  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T10[ebp], esp
  00047	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 86	 mov	 BYTE PTR tv70[ebp], al
  0005b	0f b6 45 86	 movzx	 eax, BYTE PTR tv70[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 04 01 00
	00		 je	 $LN2@UnCommentR

; 313  : 	{
; 314  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00067	83 ec 30	 sub	 esp, 48			; 00000030H
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 65 9c	 mov	 DWORD PTR $T9[ebp], esp
  0006f	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00072	50		 push	 eax
  00073	8d 55 20	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  0007c	8d 45 98	 lea	 eax, DWORD PTR $T8[ebp]
  0007f	50		 push	 eax
  00080	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00083	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	51		 push	 ecx
  0008b	8d 55 94	 lea	 edx, DWORD PTR $T7[ebp]
  0008e	52		 push	 edx
  0008f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00092	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	50		 push	 eax
  0009a	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000a3	83 c4 3c	 add	 esp, 60			; 0000003cH

; 315  : 				content.end(), 
; 316  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Section/Key
; 317  : 
; 318  : 		if (iter == content.end()) return false;							// The Section/Key was not found

  000a6	8d 45 90	 lea	 eax, DWORD PTR $T6[ebp]
  000a9	50		 push	 eax
  000aa	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000ad	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000b2	50		 push	 eax
  000b3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  000b6	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000bb	0f b6 c8	 movzx	 ecx, al
  000be	85 c9		 test	 ecx, ecx
  000c0	74 3f		 je	 SHORT $LN3@UnCommentR
  000c2	c6 45 8f 00	 mov	 BYTE PTR $T5[ebp], 0
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e2	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8a 45 8f	 mov	 al, BYTE PTR $T5[ebp]
  000fc	e9 a4 00 00 00	 jmp	 $LN1@UnCommentR
$LN3@UnCommentR:

; 319  : 	
; 320  : 		iter->Commented = ' ';												// Remove the Comment value

  00101	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  00104	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  00109	c6 40 18 20	 mov	 BYTE PTR [eax+24], 32	; 00000020H

; 321  : 		return Save(FileName,content);										// Save

  0010d	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  00110	50		 push	 eax
  00111	83 ec 18	 sub	 esp, 24			; 00000018H
  00114	8b cc		 mov	 ecx, esp
  00116	89 65 88	 mov	 DWORD PTR $T3[ebp], esp
  00119	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00122	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  00127	83 c4 1c	 add	 esp, 28			; 0000001cH
  0012a	88 45 86	 mov	 BYTE PTR tv163[ebp], al
  0012d	8a 45 86	 mov	 al, BYTE PTR tv163[ebp]
  00130	88 45 8e	 mov	 BYTE PTR $T4[ebp], al
  00133	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00137	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0013a	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0013f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00143	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00146	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0014f	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00152	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00157	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015e	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00161	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00166	8a 45 8e	 mov	 al, BYTE PTR $T4[ebp]
  00169	eb 3a		 jmp	 SHORT $LN1@UnCommentR
$LN2@UnCommentR:

; 322  : 
; 323  : 	}
; 324  : 	return false;															// In the event the file does not load

  0016b	c6 45 87 00	 mov	 BYTE PTR $T2[ebp], 0
  0016f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00173	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00176	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0017b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0017f	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00182	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00187	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0018b	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0018e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00193	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0019a	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0019d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a2	8a 45 87	 mov	 al, BYTE PTR $T2[ebp]
$LN1@UnCommentR:

; 325  : }

  001a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001af	59		 pop	 ecx
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2:
  00010	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UnCommentRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ENDP ; CIniFile::UnCommentRecord
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
tv268 = -216						; size = 4
tv264 = -212						; size = 4
tv66 = -212						; size = 4
tv244 = -206						; size = 1
$T2 = -205						; size = 1
$T3 = -204						; size = 4
$T4 = -197						; size = 1
$T5 = -196						; size = 4
$T6 = -192						; size = 4
$T7 = -188						; size = 4
$T8 = -184						; size = 4
$T9 = -177						; size = 1
$T10 = -176						; size = 4
$T11 = -172						; size = 4
$T12 = -165						; size = 1
$T13 = -164						; size = 4
$T14 = -160						; size = 4
$T15 = -156						; size = 4
$T16 = -152						; size = 4
$T17 = -148						; size = 4
$T18 = -144						; size = 4
$T19 = -137						; size = 1
$T20 = -136						; size = 4
$T21 = -132						; size = 4
$T22 = -125						; size = 1
$T23 = -124						; size = 4
_it$24 = -56						; size = 4
_records$25 = -52					; size = 12
_iter$26 = -40						; size = 4
_sections$ = -36					; size = 12
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_FileName$ = 8						; size = 24
_Descending$ = 32					; size = 1
?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CIniFile::Sort, COMDAT

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 467  : 	std::vector<CIniFile::Record> content;										// Used to hold the sorted content

  00032	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 468  : 	std::vector<CIniFile::Record> sections = GetSections(FileName);				// Get a list of Sections

  0003e	83 ec 18	 sub	 esp, 24			; 00000018H
  00041	8b cc		 mov	 ecx, esp
  00043	89 65 84	 mov	 DWORD PTR $T23[ebp], esp
  00046	8d 45 08	 lea	 eax, DWORD PTR _FileName$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?GetSections@CIniFile@@CA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; CIniFile::GetSections
  00058	83 c4 1c	 add	 esp, 28			; 0000001cH
  0005b	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv264[ebp], eax
  00061	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 469  : 
; 470  : 	if(!sections.empty())													// Is there anything to process?

  00065	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  00068	e8 00 00 00 00	 call	 ?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::empty
  0006d	0f b6 c0	 movzx	 eax, al
  00070	85 c0		 test	 eax, eax
  00072	0f 85 4d 02 00
	00		 jne	 $LN8@Sort

; 471  : 	{
; 472  : 
; 473  : 		if(Descending)														// Descending or Ascending?

  00078	0f b6 45 20	 movzx	 eax, BYTE PTR _Descending$[ebp]
  0007c	85 c0		 test	 eax, eax
  0007e	74 33		 je	 SHORT $LN9@Sort

; 474  : 			std::sort(sections.begin(), sections.end(), DescendingSectionSort());

  00080	0f b6 45 83	 movzx	 eax, BYTE PTR $T22[ebp]
  00084	50		 push	 eax
  00085	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  0008b	51		 push	 ecx
  0008c	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  0008f	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00094	8b 10		 mov	 edx, DWORD PTR [eax]
  00096	52		 push	 edx
  00097	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  0009d	50		 push	 eax
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  000a1	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingSectionSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingSectionSort>
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b1	eb 34		 jmp	 SHORT $LN10@Sort
$LN9@Sort:

; 475  : 		else																// Sort the Sections
; 476  : 			std::sort(sections.begin(), sections.end(), AscendingSectionSort());

  000b3	0f b6 85 77 ff
	ff ff		 movzx	 eax, BYTE PTR $T19[ebp]
  000ba	50		 push	 eax
  000bb	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  000c1	51		 push	 ecx
  000c2	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  000c5	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000ca	8b 10		 mov	 edx, DWORD PTR [eax]
  000cc	52		 push	 edx
  000cd	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  000d3	50		 push	 eax
  000d4	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  000d7	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingSectionSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingSectionSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingSectionSort>
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@Sort:

; 477  : 
; 478  : 		for(std::vector<Record>::iterator iter = sections.begin(); iter < sections.end(); iter++) // For each Section

  000e7	8d 45 d8	 lea	 eax, DWORD PTR _iter$26[ebp]
  000ea	50		 push	 eax
  000eb	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  000ee	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000f3	eb 11		 jmp	 SHORT $LN4@Sort
$LN2@Sort:
  000f5	6a 00		 push	 0
  000f7	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  000fd	50		 push	 eax
  000fe	8d 4d d8	 lea	 ecx, DWORD PTR _iter$26[ebp]
  00101	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN4@Sort:
  00106	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  00110	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00115	50		 push	 eax
  00116	8d 4d d8	 lea	 ecx, DWORD PTR _iter$26[ebp]
  00119	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  0011e	0f b6 c8	 movzx	 ecx, al
  00121	85 c9		 test	 ecx, ecx
  00123	0f 84 3b 01 00
	00		 je	 $LN3@Sort

; 479  : 		{																		
; 480  : 			content.push_back(*iter);										// Add the sorted Section to the content

  00129	8d 4d d8	 lea	 ecx, DWORD PTR _iter$26[ebp]
  0012c	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
  00131	50		 push	 eax
  00132	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00135	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back

; 481  : 
; 482  : 			std::vector<CIniFile::Record> records = GetSection(iter->Section ,FileName); // Get a list of Records for this section

  0013a	83 ec 18	 sub	 esp, 24			; 00000018H
  0013d	8b cc		 mov	 ecx, esp
  0013f	89 a5 60 ff ff
	ff		 mov	 DWORD PTR $T14[ebp], esp
  00145	8d 45 08	 lea	 eax, DWORD PTR _FileName$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014e	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00154	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00158	83 ec 18	 sub	 esp, 24			; 00000018H
  0015b	8b f4		 mov	 esi, esp
  0015d	89 a5 5c ff ff
	ff		 mov	 DWORD PTR $T13[ebp], esp
  00163	8d 4d d8	 lea	 ecx, DWORD PTR _iter$26[ebp]
  00166	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  0016b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0016e	50		 push	 eax
  0016f	8b ce		 mov	 ecx, esi
  00171	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00176	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  00179	51		 push	 ecx
  0017a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0017e	e8 00 00 00 00	 call	 ?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z ; CIniFile::GetSection
  00183	83 c4 34	 add	 esp, 52			; 00000034H
  00186	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv268[ebp], eax
  0018c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 483  : 
; 484  : 			if(Descending)													// Descending or Ascending?

  00190	0f b6 45 20	 movzx	 eax, BYTE PTR _Descending$[ebp]
  00194	85 c0		 test	 eax, eax
  00196	74 36		 je	 SHORT $LN11@Sort

; 485  : 				std::sort(records.begin(), records.end(), DescendingRecordSort());

  00198	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR $T12[ebp]
  0019f	50		 push	 eax
  001a0	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  001a6	51		 push	 ecx
  001a7	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  001aa	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  001af	8b 10		 mov	 edx, DWORD PTR [eax]
  001b1	52		 push	 edx
  001b2	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  001b8	50		 push	 eax
  001b9	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  001bc	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  001c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c3	51		 push	 ecx
  001c4	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UDescendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UDescendingRecordSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::DescendingRecordSort>
  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cc	eb 34		 jmp	 SHORT $LN12@Sort
$LN11@Sort:

; 486  : 			else															// Sort the Records
; 487  : 				std::sort(records.begin(), records.end(), AscendingRecordSort());

  001ce	0f b6 85 4f ff
	ff ff		 movzx	 eax, BYTE PTR $T9[ebp]
  001d5	50		 push	 eax
  001d6	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  001dc	51		 push	 ecx
  001dd	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  001e0	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  001e5	8b 10		 mov	 edx, DWORD PTR [eax]
  001e7	52		 push	 edx
  001e8	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001ee	50		 push	 eax
  001ef	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  001f2	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	51		 push	 ecx
  001fa	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@UAscendingRecordSort@CIniFile@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@0UAscendingRecordSort@CIniFile@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::AscendingRecordSort>
  001ff	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@Sort:

; 488  : 
; 489  : 			for(std::vector<Record>::iterator it = records.begin(); it < records.end(); it++) // For each Record

  00202	8d 45 c8	 lea	 eax, DWORD PTR _it$24[ebp]
  00205	50		 push	 eax
  00206	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  00209	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  0020e	eb 11		 jmp	 SHORT $LN7@Sort
$LN5@Sort:
  00210	6a 00		 push	 0
  00212	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00218	50		 push	 eax
  00219	8d 4d c8	 lea	 ecx, DWORD PTR _it$24[ebp]
  0021c	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN7@Sort:
  00221	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00227	50		 push	 eax
  00228	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  0022b	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00230	50		 push	 eax
  00231	8d 4d c8	 lea	 ecx, DWORD PTR _it$24[ebp]
  00234	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  00239	0f b6 c8	 movzx	 ecx, al
  0023c	85 c9		 test	 ecx, ecx
  0023e	74 13		 je	 SHORT $LN6@Sort

; 490  : 				content.push_back(*it);										// Add the sorted Record to the content

  00240	8d 4d c8	 lea	 ecx, DWORD PTR _it$24[ebp]
  00243	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
  00248	50		 push	 eax
  00249	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0024c	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
  00251	eb bd		 jmp	 SHORT $LN5@Sort
$LN6@Sort:

; 491  : 		}

  00253	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00257	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  0025a	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0025f	e9 91 fe ff ff	 jmp	 $LN2@Sort
$LN3@Sort:

; 492  : 		
; 493  : 		return Save(FileName,content);										// Save

  00264	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  00267	50		 push	 eax
  00268	83 ec 18	 sub	 esp, 24			; 00000018H
  0026b	8b cc		 mov	 ecx, esp
  0026d	89 a5 34 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00273	8d 55 08	 lea	 edx, DWORD PTR _FileName$[ebp]
  00276	52		 push	 edx
  00277	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0027c	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  00281	83 c4 1c	 add	 esp, 28			; 0000001cH
  00284	88 85 32 ff ff
	ff		 mov	 BYTE PTR tv244[ebp], al
  0028a	8a 85 32 ff ff
	ff		 mov	 al, BYTE PTR tv244[ebp]
  00290	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  00296	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0029a	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  0029d	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  002a2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002a6	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  002a9	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  002ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b5	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  002b8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002bd	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  002c3	eb 34		 jmp	 SHORT $LN1@Sort
$LN8@Sort:

; 494  : 		}
; 495  : 
; 496  : 	return false;															// There were no sections

  002c5	c6 85 33 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  002cc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002d0	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  002d3	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  002d8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002dc	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  002df	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  002e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002eb	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  002ee	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f3	8a 85 33 ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@Sort:

; 497  : }

  002f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00303	59		 pop	 ecx
  00304	5f		 pop	 edi
  00305	5e		 pop	 esi
  00306	5b		 pop	 ebx
  00307	8b e5		 mov	 esp, ebp
  00309	5d		 pop	 ebp
  0030a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3:
  00010	8d 4d dc	 lea	 ecx, DWORD PTR _sections$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4:
  00018	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6:
  00023	8d 4d cc	 lea	 ecx, DWORD PTR _records$25[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
__ehhandler$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:
  00030	90		 npad	 1
  00031	90		 npad	 1
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Sort@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CIniFile::Sort
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
_TEXT	SEGMENT
tv428 = -497						; size = 1
tv173 = -496						; size = 4
tv402 = -493						; size = 1
tv177 = -492						; size = 4
tv69 = -492						; size = 4
tv375 = -486						; size = 1
tv324 = -486						; size = 1
tv189 = -486						; size = 1
tv71 = -486						; size = 1
$T2 = -485						; size = 1
$T3 = -484						; size = 4
$T4 = -477						; size = 1
$T5 = -476						; size = 4
$T6 = -472						; size = 4
$T7 = -468						; size = 4
$T8 = -464						; size = 4
$T9 = -457						; size = 1
$T10 = -456						; size = 4
$T11 = -452						; size = 4
$T12 = -448						; size = 4
$T13 = -444						; size = 4
$T14 = -440						; size = 4
$T15 = -436						; size = 4
$T16 = -432						; size = 4
$T17 = -428						; size = 4
$T18 = -424						; size = 4
$T19 = -420						; size = 4
$T20 = -413						; size = 1
$T21 = -412						; size = 4
$T22 = -408						; size = 4
$T23 = -404						; size = 4
_iter$24 = -336						; size = 4
_r$25 = -332						; size = 100
_iter$26 = -232						; size = 4
_r$27 = -228						; size = 100
_s$28 = -128						; size = 100
_content$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_KeyName$ = 8						; size = 24
_Value$ = 32						; size = 24
_SectionName$ = 56					; size = 24
_FileName$ = 80						; size = 24
?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z PROC ; CIniFile::SetValue, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 236  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00035	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 237  : 
; 238  : 	if (Load(FileName, content))											// Make sure the file is loaded

  00041	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00044	50		 push	 eax
  00045	83 ec 18	 sub	 esp, 24			; 00000018H
  00048	8b cc		 mov	 ecx, esp
  0004a	89 a5 6c fe ff
	ff		 mov	 DWORD PTR $T23[ebp], esp
  00050	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00059	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  0005e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00061	88 85 1a fe ff
	ff		 mov	 BYTE PTR tv71[ebp], al
  00067	0f b6 85 1a fe
	ff ff		 movzx	 eax, BYTE PTR tv71[ebp]
  0006e	85 c0		 test	 eax, eax
  00070	0f 84 51 04 00
	00		 je	 $LN2@SetValue

; 239  : 	{
; 240  : 		if(!SectionExists(SectionName,FileName))							// If the Section doesn't exist

  00076	83 ec 18	 sub	 esp, 24			; 00000018H
  00079	8b cc		 mov	 ecx, esp
  0007b	89 a5 68 fe ff
	ff		 mov	 DWORD PTR $T22[ebp], esp
  00081	8d 45 50	 lea	 eax, DWORD PTR _FileName$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008a	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00090	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00094	83 ec 18	 sub	 esp, 24			; 00000018H
  00097	8b cc		 mov	 ecx, esp
  00099	89 a5 64 fe ff
	ff		 mov	 DWORD PTR $T21[ebp], esp
  0009f	8d 55 38	 lea	 edx, DWORD PTR _SectionName$[ebp]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ac	e8 00 00 00 00	 call	 ?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::SectionExists
  000b1	83 c4 30	 add	 esp, 48			; 00000030H
  000b4	88 85 13 fe ff
	ff		 mov	 BYTE PTR tv402[ebp], al
  000ba	0f b6 85 13 fe
	ff ff		 movzx	 eax, BYTE PTR tv402[ebp]
  000c1	85 c0		 test	 eax, eax
  000c3	0f 85 4d 01 00
	00		 jne	 $LN3@SetValue

; 241  : 		{
; 242  : 			Record s = {"",' ',SectionName,"",""};							// Define a new section

  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000ce	8d 4d 80	 lea	 ecx, DWORD PTR _s$28[ebp]
  000d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d6	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000da	c6 45 98 20	 mov	 BYTE PTR _s$28[ebp+24], 32 ; 00000020H
  000de	8d 45 38	 lea	 eax, DWORD PTR _SectionName$[ebp]
  000e1	50		 push	 eax
  000e2	8d 4d 9c	 lea	 ecx, DWORD PTR _s$28[ebp+28]
  000e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ea	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000f3	8d 4d b4	 lea	 ecx, DWORD PTR _s$28[ebp+52]
  000f6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000fb	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00104	8d 4d cc	 lea	 ecx, DWORD PTR _s$28[ebp+76]
  00107	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010c	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 243  : 			Record r = {"",' ',SectionName,KeyName,Value};					// Define a new record

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00115	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp]
  0011b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00124	c6 85 34 ff ff
	ff 20		 mov	 BYTE PTR _r$27[ebp+24], 32 ; 00000020H
  0012b	8d 45 38	 lea	 eax, DWORD PTR _SectionName$[ebp]
  0012e	50		 push	 eax
  0012f	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp+28]
  00135	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013a	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0013e	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00141	50		 push	 eax
  00142	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp+52]
  00148	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014d	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00151	8d 45 20	 lea	 eax, DWORD PTR _Value$[ebp]
  00154	50		 push	 eax
  00155	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp+76]
  0015b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00160	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH

; 244  : 			content.push_back(s);											// Add the section

  00164	8d 45 80	 lea	 eax, DWORD PTR _s$28[ebp]
  00167	50		 push	 eax
  00168	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0016b	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back

; 245  : 			content.push_back(r);											// Add the record

  00170	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _r$27[ebp]
  00176	50		 push	 eax
  00177	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0017a	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back

; 246  : 			return Save(FileName,content);									// Save

  0017f	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00182	50		 push	 eax
  00183	83 ec 18	 sub	 esp, 24			; 00000018H
  00186	8b cc		 mov	 ecx, esp
  00188	89 a5 5c fe ff
	ff		 mov	 DWORD PTR $T19[ebp], esp
  0018e	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00197	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  0019c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0019f	88 85 1a fe ff
	ff		 mov	 BYTE PTR tv189[ebp], al
  001a5	8a 85 1a fe ff
	ff		 mov	 al, BYTE PTR tv189[ebp]
  001ab	88 85 63 fe ff
	ff		 mov	 BYTE PTR $T20[ebp], al
  001b1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  001b5	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp]
  001bb	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  001c0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001c4	8d 4d 80	 lea	 ecx, DWORD PTR _s$28[ebp]
  001c7	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  001cc	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001d0	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  001d3	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  001d8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001dc	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  001df	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001e4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001e8	8d 4d 20	 lea	 ecx, DWORD PTR _Value$[ebp]
  001eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001f0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f4	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  001f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00203	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00206	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0020b	8a 85 63 fe ff
	ff		 mov	 al, BYTE PTR $T20[ebp]
  00211	e9 fd 02 00 00	 jmp	 $LN1@SetValue
$LN3@SetValue:

; 247  : 		}
; 248  : 
; 249  : 		if(!RecordExists(KeyName,SectionName,FileName))						// If the Key doesn't exist

  00216	83 ec 18	 sub	 esp, 24			; 00000018H
  00219	8b cc		 mov	 ecx, esp
  0021b	89 a5 58 fe ff
	ff		 mov	 DWORD PTR $T18[ebp], esp
  00221	8d 45 50	 lea	 eax, DWORD PTR _FileName$[ebp]
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0022a	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv177[ebp], eax
  00230	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00234	83 ec 18	 sub	 esp, 24			; 00000018H
  00237	8b cc		 mov	 ecx, esp
  00239	89 a5 54 fe ff
	ff		 mov	 DWORD PTR $T17[ebp], esp
  0023f	8d 55 38	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00242	52		 push	 edx
  00243	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00248	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv173[ebp], eax
  0024e	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00252	83 ec 18	 sub	 esp, 24			; 00000018H
  00255	8b cc		 mov	 ecx, esp
  00257	89 a5 50 fe ff
	ff		 mov	 DWORD PTR $T16[ebp], esp
  0025d	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00266	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0026a	e8 00 00 00 00	 call	 ?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ; CIniFile::RecordExists
  0026f	83 c4 48	 add	 esp, 72			; 00000048H
  00272	88 85 0f fe ff
	ff		 mov	 BYTE PTR tv428[ebp], al
  00278	0f b6 8d 0f fe
	ff ff		 movzx	 ecx, BYTE PTR tv428[ebp]
  0027f	85 c9		 test	 ecx, ecx
  00281	0f 85 63 01 00
	00		 jne	 $LN4@SetValue

; 250  : 		{
; 251  : 			std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00287	83 ec 18	 sub	 esp, 24			; 00000018H
  0028a	8b cc		 mov	 ecx, esp
  0028c	89 a5 4c fe ff
	ff		 mov	 DWORD PTR $T15[ebp], esp
  00292	8d 45 38	 lea	 eax, DWORD PTR _SectionName$[ebp]
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIniFile::RecordSectionIs::RecordSectionIs
  0029b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  002a1	51		 push	 ecx
  002a2	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  002a5	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  002aa	8b 10		 mov	 edx, DWORD PTR [eax]
  002ac	52		 push	 edx
  002ad	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  002b3	50		 push	 eax
  002b4	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  002b7	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  002bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  002be	51		 push	 ecx
  002bf	8d 95 18 ff ff
	ff		 lea	 edx, DWORD PTR _iter$26[ebp]
  002c5	52		 push	 edx
  002c6	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionIs>
  002cb	83 c4 24	 add	 esp, 36			; 00000024H

; 252  : 				content.end(), 
; 253  : 				CIniFile::RecordSectionIs(SectionName));					// Locate the Section
; 254  : 			iter++;															// Advance just past the section

  002ce	6a 00		 push	 0
  002d0	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  002d6	50		 push	 eax
  002d7	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _iter$26[ebp]
  002dd	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++

; 255  : 			Record r = {"",' ',SectionName,KeyName,Value};						// Define a new record

  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  002e7	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp]
  002ed	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f2	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  002f6	c6 85 cc fe ff
	ff 20		 mov	 BYTE PTR _r$25[ebp+24], 32 ; 00000020H
  002fd	8d 45 38	 lea	 eax, DWORD PTR _SectionName$[ebp]
  00300	50		 push	 eax
  00301	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp+28]
  00307	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0030c	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00310	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00313	50		 push	 eax
  00314	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp+52]
  0031a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0031f	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00323	8d 45 20	 lea	 eax, DWORD PTR _Value$[ebp]
  00326	50		 push	 eax
  00327	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp+76]
  0032d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00332	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H

; 256  : 			content.insert(iter,r);											// Add the record

  00336	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _iter$26[ebp]
  0033c	89 85 3c fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00342	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp]
  00348	51		 push	 ecx
  00349	8b 95 3c fe ff
	ff		 mov	 edx, DWORD PTR $T11[ebp]
  0034f	52		 push	 edx
  00350	8d 85 38 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00356	50		 push	 eax
  00357	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0035a	e8 00 00 00 00	 call	 ?insert@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@ABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::insert

; 257  : 			return Save(FileName,content);									// Save

  0035f	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00362	50		 push	 eax
  00363	83 ec 18	 sub	 esp, 24			; 00000018H
  00366	8b cc		 mov	 ecx, esp
  00368	89 a5 30 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], esp
  0036e	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  00371	52		 push	 edx
  00372	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00377	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  0037c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0037f	88 85 1a fe ff
	ff		 mov	 BYTE PTR tv324[ebp], al
  00385	8a 85 1a fe ff
	ff		 mov	 al, BYTE PTR tv324[ebp]
  0038b	88 85 37 fe ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00391	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00395	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp]
  0039b	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  003a0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  003a4	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  003a7	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  003ac	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  003b0	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  003b3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  003bc	8d 4d 20	 lea	 ecx, DWORD PTR _Value$[ebp]
  003bf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003c4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003c8	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  003cb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003d0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003d7	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  003da	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003df	8a 85 37 fe ff
	ff		 mov	 al, BYTE PTR $T9[ebp]
  003e5	e9 29 01 00 00	 jmp	 $LN1@SetValue
$LN4@SetValue:

; 258  : 		}
; 259  : 
; 260  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  003ea	83 ec 30	 sub	 esp, 48			; 00000030H
  003ed	8b cc		 mov	 ecx, esp
  003ef	89 a5 2c fe ff
	ff		 mov	 DWORD PTR $T7[ebp], esp
  003f5	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  003f8	50		 push	 eax
  003f9	8d 55 38	 lea	 edx, DWORD PTR _SectionName$[ebp]
  003fc	52		 push	 edx
  003fd	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  00402	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00408	50		 push	 eax
  00409	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0040c	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00411	8b 08		 mov	 ecx, DWORD PTR [eax]
  00413	51		 push	 ecx
  00414	8d 95 24 fe ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  0041a	52		 push	 edx
  0041b	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0041e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00423	8b 00		 mov	 eax, DWORD PTR [eax]
  00425	50		 push	 eax
  00426	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _iter$24[ebp]
  0042c	51		 push	 ecx
  0042d	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  00432	83 c4 3c	 add	 esp, 60			; 0000003cH

; 261  : 				content.end(), 
; 262  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Record
; 263  : 
; 264  : 		iter->Value = Value;												// Insert the correct value

  00435	8d 45 20	 lea	 eax, DWORD PTR _Value$[ebp]
  00438	50		 push	 eax
  00439	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _iter$24[ebp]
  0043f	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  00444	83 c0 4c	 add	 eax, 76			; 0000004cH
  00447	8b c8		 mov	 ecx, eax
  00449	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 265  : 		return Save(FileName,content);										// Save

  0044e	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00451	50		 push	 eax
  00452	83 ec 18	 sub	 esp, 24			; 00000018H
  00455	8b cc		 mov	 ecx, esp
  00457	89 a5 1c fe ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  0045d	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  00460	52		 push	 edx
  00461	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00466	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  0046b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0046e	88 85 1a fe ff
	ff		 mov	 BYTE PTR tv375[ebp], al
  00474	8a 85 1a fe ff
	ff		 mov	 al, BYTE PTR tv375[ebp]
  0047a	88 85 23 fe ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  00480	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00484	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00487	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0048c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00490	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00493	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00498	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0049c	8d 4d 20	 lea	 ecx, DWORD PTR _Value$[ebp]
  0049f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004a4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004a8	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  004ab	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004b7	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  004ba	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004bf	8a 85 23 fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  004c5	eb 4c		 jmp	 SHORT $LN1@SetValue
$LN2@SetValue:

; 266  : 	}
; 267  : 
; 268  : 	return false;															// In the event the file does not load

  004c7	c6 85 1b fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  004ce	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  004d2	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  004d5	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  004da	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  004de	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  004e1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004e6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  004ea	8d 4d 20	 lea	 ecx, DWORD PTR _Value$[ebp]
  004ed	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004f6	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  004f9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00505	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00508	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0050d	8a 85 1b fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@SetValue:

; 269  : }

  00513	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00516	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0051d	59		 pop	 ecx
  0051e	5f		 pop	 edi
  0051f	5e		 pop	 esi
  00520	5b		 pop	 ebx
  00521	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00524	33 cd		 xor	 ecx, ebp
  00526	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0052b	8b e5		 mov	 esp, ebp
  0052d	5d		 pop	 ebp
  0052e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$0:
  00000	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$1:
  00008	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$2:
  00010	8d 4d 20	 lea	 ecx, DWORD PTR _Value$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$3:
  00018	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$4:
  00020	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$6:
  00028	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR $T22[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$8:
  00033	8d 4d 80	 lea	 ecx, DWORD PTR _s$28[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$9:
  0003b	8d 4d 9c	 lea	 ecx, DWORD PTR _s$28[ebp+28]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$10:
  00043	8d 4d b4	 lea	 ecx, DWORD PTR _s$28[ebp+52]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$12:
  0004b	8d 4d 80	 lea	 ecx, DWORD PTR _s$28[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$13:
  00053	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp]
  00059	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$14:
  0005e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp+28]
  00064	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$15:
  00069	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp+52]
  0006f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$17:
  00074	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _r$27[ebp]
  0007a	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$19:
  0007f	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR $T18[ebp]
  00085	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$20:
  0008a	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR $T17[ebp]
  00090	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$23:
  00095	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp]
  0009b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$24:
  000a0	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp+28]
  000a6	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$25:
  000ab	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp+52]
  000b1	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$27:
  000b6	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _r$25[ebp]
  000bc	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  000c1	cc		 int	 3
  000c2	cc		 int	 3
  000c3	cc		 int	 3
  000c4	cc		 int	 3
  000c5	cc		 int	 3
__ehhandler$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z:
  000c6	90		 npad	 1
  000c7	90		 npad	 1
  000c8	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000cc	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000cf	8b 8a 08 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-504]
  000d5	33 c8		 xor	 ecx, eax
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000df	33 c8		 xor	 ecx, eax
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
  000eb	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetValue@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z ENDP ; CIniFile::SetValue
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
_TEXT	SEGMENT
tv206 = -156						; size = 4
tv68 = -152						; size = 4
tv181 = -146						; size = 1
tv70 = -146						; size = 1
$T2 = -145						; size = 1
$T3 = -144						; size = 4
$T4 = -137						; size = 1
$T5 = -136						; size = 24
$T6 = -109						; size = 1
$T7 = -108						; size = 4
$T8 = -104						; size = 4
$T9 = -100						; size = 4
_iter$10 = -32						; size = 4
_content$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Comments$ = 8						; size = 24
_SectionName$ = 32					; size = 24
_FileName$ = 56						; size = 24
?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z PROC ; CIniFile::SetSectionComments, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 400  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00035	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 401  : 
; 402  : 	if (Load(FileName, content))											// Make sure the file is loaded

  00041	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00044	50		 push	 eax
  00045	83 ec 18	 sub	 esp, 24			; 00000018H
  00048	8b cc		 mov	 ecx, esp
  0004a	89 65 9c	 mov	 DWORD PTR $T9[ebp], esp
  0004d	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00056	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  0005b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0005e	88 85 6e ff ff
	ff		 mov	 BYTE PTR tv70[ebp], al
  00064	0f b6 85 6e ff
	ff ff		 movzx	 eax, BYTE PTR tv70[ebp]
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 83 01 00
	00		 je	 $LN5@SetSection

; 403  : 	{
; 404  : 		for(std::vector<Record>::iterator iter = content.begin(); iter < content.end(); iter++)									// Loop through the records

  00073	8d 45 e0	 lea	 eax, DWORD PTR _iter$10[ebp]
  00076	50		 push	 eax
  00077	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0007a	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  0007f	eb 0e		 jmp	 SHORT $LN4@SetSection
$LN2@SetSection:
  00081	6a 00		 push	 0
  00083	8d 45 98	 lea	 eax, DWORD PTR $T8[ebp]
  00086	50		 push	 eax
  00087	8d 4d e0	 lea	 ecx, DWORD PTR _iter$10[ebp]
  0008a	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN4@SetSection:
  0008f	8d 45 94	 lea	 eax, DWORD PTR $T7[ebp]
  00092	50		 push	 eax
  00093	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00096	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  0009b	50		 push	 eax
  0009c	8d 4d e0	 lea	 ecx, DWORD PTR _iter$10[ebp]
  0009f	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  000a4	0f b6 c8	 movzx	 ecx, al
  000a7	85 c9		 test	 ecx, ecx
  000a9	0f 84 47 01 00
	00		 je	 $LN5@SetSection

; 405  : 		{
; 406  : 			if((iter->Section == SectionName) &&							// Is this the Section?

  000af	8d 45 20	 lea	 eax, DWORD PTR _SectionName$[ebp]
  000b2	50		 push	 eax
  000b3	8d 4d e0	 lea	 ecx, DWORD PTR _iter$10[ebp]
  000b6	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000bb	83 c0 1c	 add	 eax, 28			; 0000001cH
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000c4	83 c4 08	 add	 esp, 8
  000c7	0f b6 c8	 movzx	 ecx, al
  000ca	85 c9		 test	 ecx, ecx
  000cc	0f 84 1f 01 00
	00		 je	 $LN6@SetSection
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _iter$10[ebp]
  000da	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000df	83 c0 34	 add	 eax, 52			; 00000034H
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000e8	83 c4 08	 add	 esp, 8
  000eb	0f b6 c0	 movzx	 eax, al
  000ee	85 c0		 test	 eax, eax
  000f0	0f 84 fb 00 00
	00		 je	 $LN6@SetSection

; 407  : 				(iter->Key == ""))											// And not a record
; 408  : 			{	
; 409  : 				if (Comments.size() >= 2)									// Is there a comment?

  000f6	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  000f9	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  000fe	83 f8 02	 cmp	 eax, 2
  00101	72 6e		 jb	 SHORT $LN7@SetSection

; 410  : 				{
; 411  : 					if (Comments.substr(Comments.size()-2) != "\n")		// Does the std::string end in a newline?

  00103	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00108	6a ff		 push	 -1
  0010a	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0010d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00112	83 e8 02	 sub	 eax, 2
  00115	50		 push	 eax
  00116	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0011c	50		 push	 eax
  0011d	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  00120	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00125	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
  0012b	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv68[ebp]
  00131	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
  00137	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0013b	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR tv206[ebp]
  00141	52		 push	 edx
  00142	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00147	83 c4 08	 add	 esp, 8
  0014a	88 45 93	 mov	 BYTE PTR $T6[ebp], al
  0014d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00151	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00157	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0015c	0f b6 45 93	 movzx	 eax, BYTE PTR $T6[ebp]
  00160	85 c0		 test	 eax, eax
  00162	74 0d		 je	 SHORT $LN7@SetSection

; 412  : 						Comments += "\n";								// If not, add one

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00169	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0016c	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN7@SetSection:

; 413  : 				}
; 414  : 				iter->Comments = Comments;								// Set the comments

  00171	8d 45 08	 lea	 eax, DWORD PTR _Comments$[ebp]
  00174	50		 push	 eax
  00175	8d 4d e0	 lea	 ecx, DWORD PTR _iter$10[ebp]
  00178	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  0017d	8b c8		 mov	 ecx, eax
  0017f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 415  : 					
; 416  : 				return Save(FileName,content);							// Save

  00184	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00187	50		 push	 eax
  00188	83 ec 18	 sub	 esp, 24			; 00000018H
  0018b	8b cc		 mov	 ecx, esp
  0018d	89 a5 70 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00193	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  00196	52		 push	 edx
  00197	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0019c	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  001a1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001a4	88 85 6e ff ff
	ff		 mov	 BYTE PTR tv181[ebp], al
  001aa	8a 85 6e ff ff
	ff		 mov	 al, BYTE PTR tv181[ebp]
  001b0	88 85 77 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  001b6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001ba	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  001bd	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  001c2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001c6	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  001c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ce	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d2	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  001d5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e1	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  001e4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001e9	8a 85 77 ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  001ef	eb 45		 jmp	 SHORT $LN1@SetSection
$LN6@SetSection:

; 417  : 			}
; 418  : 		}

  001f1	e9 8b fe ff ff	 jmp	 $LN2@SetSection
$LN5@SetSection:

; 419  : 	}
; 420  : 	return false;															// In the event the file does not load

  001f6	c6 85 6f ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  001fd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00201	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00204	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00209	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0020d	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  00210	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00215	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00219	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0021c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00221	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00228	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0022b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00230	8a 85 6f ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@SetSection:

; 421  : }

  00236	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00239	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00240	59		 pop	 ecx
  00241	5f		 pop	 edi
  00242	5e		 pop	 esi
  00243	5b		 pop	 ebx
  00244	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	33 cd		 xor	 ecx, ebp
  00249	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2:
  00010	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3:
  00018	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$5:
  00020	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
__ehhandler$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z:
  00030	90		 npad	 1
  00031	90		 npad	 1
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetSectionComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ENDP ; CIniFile::SetSectionComments
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
_TEXT	SEGMENT
tv218 = -164						; size = 4
tv69 = -160						; size = 4
tv185 = -154						; size = 1
tv71 = -154						; size = 1
$T2 = -153						; size = 1
$T3 = -152						; size = 4
$T4 = -145						; size = 1
$T5 = -144						; size = 24
$T6 = -118						; size = 1
$T7 = -117						; size = 1
$T8 = -116						; size = 4
$T9 = -112						; size = 4
$T10 = -108						; size = 4
$T11 = -104						; size = 4
$T12 = -100						; size = 4
_iter$13 = -32						; size = 4
_content$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Comments$ = 8						; size = 24
_KeyName$ = 32						; size = 24
_SectionName$ = 56					; size = 24
_FileName$ = 80						; size = 24
?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z PROC ; CIniFile::SetRecordComments, COMDAT

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 425  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00035	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 426  : 
; 427  : 	if (Load(FileName, content))											// Make sure the file is loaded

  00041	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00044	50		 push	 eax
  00045	83 ec 18	 sub	 esp, 24			; 00000018H
  00048	8b cc		 mov	 ecx, esp
  0004a	89 65 9c	 mov	 DWORD PTR $T12[ebp], esp
  0004d	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00056	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  0005b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0005e	88 85 66 ff ff
	ff		 mov	 BYTE PTR tv71[ebp], al
  00064	0f b6 85 66 ff
	ff ff		 movzx	 eax, BYTE PTR tv71[ebp]
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 ad 01 00
	00		 je	 $LN2@SetRecordC

; 428  : 	{
; 429  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00073	83 ec 30	 sub	 esp, 48			; 00000030H
  00076	8b cc		 mov	 ecx, esp
  00078	89 65 98	 mov	 DWORD PTR $T11[ebp], esp
  0007b	8d 45 20	 lea	 eax, DWORD PTR _KeyName$[ebp]
  0007e	50		 push	 eax
  0007f	8d 55 38	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  00088	8d 45 94	 lea	 eax, DWORD PTR $T10[ebp]
  0008b	50		 push	 eax
  0008c	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0008f	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	8d 55 90	 lea	 edx, DWORD PTR $T9[ebp]
  0009a	52		 push	 edx
  0009b	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0009e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000a3	8b 00		 mov	 eax, DWORD PTR [eax]
  000a5	50		 push	 eax
  000a6	8d 4d e0	 lea	 ecx, DWORD PTR _iter$13[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000af	83 c4 3c	 add	 esp, 60			; 0000003cH

; 430  : 				content.end(), 
; 431  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Section/Key
; 432  : 
; 433  : 		if (iter == content.end()) return false;							// The Section/Key was not found

  000b2	8d 45 8c	 lea	 eax, DWORD PTR $T8[ebp]
  000b5	50		 push	 eax
  000b6	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  000b9	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000be	50		 push	 eax
  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _iter$13[ebp]
  000c2	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000c7	0f b6 c8	 movzx	 ecx, al
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 4b		 je	 SHORT $LN3@SetRecordC
  000ce	c6 45 8b 00	 mov	 BYTE PTR $T7[ebp], 0
  000d2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000d6	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000de	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e2	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ea	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ee	8d 4d 20	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000f1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000fa	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000fd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00102	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00109	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0010c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00111	8a 45 8b	 mov	 al, BYTE PTR $T7[ebp]
  00114	e9 53 01 00 00	 jmp	 $LN1@SetRecordC
$LN3@SetRecordC:

; 434  : 	
; 435  : 		if (Comments.size() >= 2)											// Is there a comment?

  00119	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0011c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00121	83 f8 02	 cmp	 eax, 2
  00124	72 6e		 jb	 SHORT $LN4@SetRecordC

; 436  : 		{
; 437  : 			if (Comments.substr(Comments.size()-2) != "\n")					// Does the std::string end in a newline?

  00126	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0012b	6a ff		 push	 -1
  0012d	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  00130	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00135	83 e8 02	 sub	 eax, 2
  00138	50		 push	 eax
  00139	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0013f	50		 push	 eax
  00140	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  00143	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00148	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  0014e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  00154	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv218[ebp], ecx
  0015a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0015e	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv218[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0016a	83 c4 08	 add	 esp, 8
  0016d	88 45 8a	 mov	 BYTE PTR $T6[ebp], al
  00170	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00174	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017f	0f b6 45 8a	 movzx	 eax, BYTE PTR $T6[ebp]
  00183	85 c0		 test	 eax, eax
  00185	74 0d		 je	 SHORT $LN4@SetRecordC

; 438  : 				Comments += "\n";											// If not, add one

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0018c	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0018f	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN4@SetRecordC:

; 439  : 		}
; 440  : 		iter->Comments = Comments;											// Set the comments

  00194	8d 45 08	 lea	 eax, DWORD PTR _Comments$[ebp]
  00197	50		 push	 eax
  00198	8d 4d e0	 lea	 ecx, DWORD PTR _iter$13[ebp]
  0019b	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  001a0	8b c8		 mov	 ecx, eax
  001a2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 441  : 		return Save(FileName,content);										// Save

  001a7	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  001aa	50		 push	 eax
  001ab	83 ec 18	 sub	 esp, 24			; 00000018H
  001ae	8b cc		 mov	 ecx, esp
  001b0	89 a5 68 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  001b6	8d 55 50	 lea	 edx, DWORD PTR _FileName$[ebp]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001bf	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  001c4	83 c4 1c	 add	 esp, 28			; 0000001cH
  001c7	88 85 66 ff ff
	ff		 mov	 BYTE PTR tv185[ebp], al
  001cd	8a 85 66 ff ff
	ff		 mov	 al, BYTE PTR tv185[ebp]
  001d3	88 85 6f ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  001d9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001dd	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  001e0	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  001e5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001e9	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  001ec	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001f1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001f5	8d 4d 20	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  001f8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001fd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00201	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00204	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00209	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00210	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00213	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00218	8a 85 6f ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  0021e	eb 4c		 jmp	 SHORT $LN1@SetRecordC
$LN2@SetRecordC:

; 442  : 
; 443  : 	}
; 444  : 	
; 445  : 	return false;															// In the event the file does not load

  00220	c6 85 67 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00227	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0022b	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0022e	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00233	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00237	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0023a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0023f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00243	8d 4d 20	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00246	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0024b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0024f	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00252	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00257	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025e	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00261	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00266	8a 85 67 ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@SetRecordC:

; 446  : }

  0026c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00276	59		 pop	 ecx
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	5b		 pop	 ebx
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027d	33 cd		 xor	 ecx, ebp
  0027f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$0:
  00000	8d 4d 50	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$1:
  00008	8d 4d 38	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$2:
  00010	8d 4d 20	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$3:
  00018	8d 4d 08	 lea	 ecx, DWORD PTR _Comments$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$4:
  00020	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z$7:
  00028	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
__ehhandler$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z:
  00038	90		 npad	 1
  00039	90		 npad	 1
  0003a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00041	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetRecordComments@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@000@Z ENDP ; CIniFile::SetRecordComments
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
tv69 = -115						; size = 1
$T2 = -114						; size = 1
$T3 = -113						; size = 1
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -104						; size = 4
$T7 = -100						; size = 4
$T8 = -96						; size = 4
_iter$9 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_SectionName$ = 8					; size = 24
_FileName$ = 32						; size = 24
?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::SectionExists, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 193  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 194  : 
; 195  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T8[ebp], esp
  00047	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 8d	 mov	 BYTE PTR tv69[ebp], al
  0005b	0f b6 45 8d	 movzx	 eax, BYTE PTR tv69[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 87 00 00
	00		 je	 $LN2@SectionExi

; 196  : 	{
; 197  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00067	83 ec 18	 sub	 esp, 24			; 00000018H
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 65 9c	 mov	 DWORD PTR $T7[ebp], esp
  0006f	8d 45 08	 lea	 eax, DWORD PTR _SectionName$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??0RecordSectionIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIniFile::RecordSectionIs::RecordSectionIs
  00078	8d 4d 98	 lea	 ecx, DWORD PTR $T6[ebp]
  0007b	51		 push	 ecx
  0007c	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0007f	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00084	8b 10		 mov	 edx, DWORD PTR [eax]
  00086	52		 push	 edx
  00087	8d 45 94	 lea	 eax, DWORD PTR $T5[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0008e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	51		 push	 ecx
  00096	8d 55 e4	 lea	 edx, DWORD PTR _iter$9[ebp]
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionIs>
  0009f	83 c4 24	 add	 esp, 36			; 00000024H

; 198  : 				content.end(), 
; 199  : 				CIniFile::RecordSectionIs(SectionName));					// Locate the Section
; 200  : 
; 201  : 		if (iter == content.end()) return false;							// The Section was not found

  000a2	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  000a5	50		 push	 eax
  000a6	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000a9	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000ae	50		 push	 eax
  000af	8d 4d e4	 lea	 ecx, DWORD PTR _iter$9[ebp]
  000b2	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000b7	0f b6 c8	 movzx	 ecx, al
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 30		 je	 SHORT $LN2@SectionExi
  000be	c6 45 8f 00	 mov	 BYTE PTR $T3[ebp], 0
  000c2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c6	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000c9	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000ce	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d2	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000d5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e1	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000e4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e9	8a 45 8f	 mov	 al, BYTE PTR $T3[ebp]
  000ec	eb 2e		 jmp	 SHORT $LN1@SectionExi
$LN2@SectionExi:

; 202  : 	}
; 203  : 	return true;															// The Section was found

  000ee	c6 45 8e 01	 mov	 BYTE PTR $T2[ebp], 1
  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000fe	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00102	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00105	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00111	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00119	8a 45 8e	 mov	 al, BYTE PTR $T2[ebp]
$LN1@SectionExi:

; 204  : }

  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SectionExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::SectionExists
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
_TEXT	SEGMENT
tv153 = -114						; size = 1
tv70 = -114						; size = 1
$T2 = -113						; size = 1
$T3 = -112						; size = 4
$T4 = -105						; size = 1
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
_iter$8 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_OldSectionName$ = 8					; size = 24
_NewSectionName$ = 32					; size = 24
_FileName$ = 56						; size = 24
?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z PROC ; CIniFile::RenameSection, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 273  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 274  : 
; 275  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T7[ebp], esp
  00047	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 8e	 mov	 BYTE PTR tv70[ebp], al
  0005b	0f b6 45 8e	 movzx	 eax, BYTE PTR tv70[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 cd 00 00
	00		 je	 $LN5@RenameSect

; 276  : 	{
; 277  : 		for(std::vector<Record>::iterator iter = content.begin(); 

  00067	8d 45 e4	 lea	 eax, DWORD PTR _iter$8[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0006e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00073	eb 0e		 jmp	 SHORT $LN4@RenameSect
$LN2@RenameSect:

; 278  : 			iter < content.end(); iter++)									// Loop through the records

  00075	6a 00		 push	 0
  00077	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  0007e	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN4@RenameSect:
  00083	8d 45 98	 lea	 eax, DWORD PTR $T5[ebp]
  00086	50		 push	 eax
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0008a	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  0008f	50		 push	 eax
  00090	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  00093	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  00098	0f b6 c8	 movzx	 ecx, al
  0009b	85 c9		 test	 ecx, ecx
  0009d	74 37		 je	 SHORT $LN3@RenameSect

; 279  : 		{
; 280  : 			if(iter->Section == OldSectionName)								// Is this the OldSectionName?

  0009f	8d 45 08	 lea	 eax, DWORD PTR _OldSectionName$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000a6	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000ab	83 c0 1c	 add	 eax, 28			; 0000001cH
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000b4	83 c4 08	 add	 esp, 8
  000b7	0f b6 c8	 movzx	 ecx, al
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 16		 je	 SHORT $LN6@RenameSect

; 281  : 				iter->Section = NewSectionName;								// Now its the NewSectionName

  000be	8d 45 20	 lea	 eax, DWORD PTR _NewSectionName$[ebp]
  000c1	50		 push	 eax
  000c2	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000c5	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000ca	83 c0 1c	 add	 eax, 28			; 0000001cH
  000cd	8b c8		 mov	 ecx, eax
  000cf	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN6@RenameSect:

; 282  : 		}

  000d4	eb 9f		 jmp	 SHORT $LN2@RenameSect
$LN3@RenameSect:

; 283  : 		return Save(FileName,content);										// Save

  000d6	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  000d9	50		 push	 eax
  000da	83 ec 18	 sub	 esp, 24			; 00000018H
  000dd	8b cc		 mov	 ecx, esp
  000df	89 65 90	 mov	 DWORD PTR $T3[ebp], esp
  000e2	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000eb	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  000f0	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f3	88 45 8e	 mov	 BYTE PTR tv153[ebp], al
  000f6	8a 45 8e	 mov	 al, BYTE PTR tv153[ebp]
  000f9	88 45 97	 mov	 BYTE PTR $T4[ebp], al
  000fc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00100	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00108	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010c	8d 4d 08	 lea	 ecx, DWORD PTR _OldSectionName$[ebp]
  0010f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00114	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00118	8d 4d 20	 lea	 ecx, DWORD PTR _NewSectionName$[ebp]
  0011b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00127	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0012a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012f	8a 45 97	 mov	 al, BYTE PTR $T4[ebp]
  00132	eb 3a		 jmp	 SHORT $LN1@RenameSect
$LN5@RenameSect:

; 284  : 	}
; 285  : 
; 286  : 	return false;															// In the event the file does not load

  00134	c6 45 8f 00	 mov	 BYTE PTR $T2[ebp], 0
  00138	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013c	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0013f	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00144	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00148	8d 4d 08	 lea	 ecx, DWORD PTR _OldSectionName$[ebp]
  0014b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00150	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00154	8d 4d 20	 lea	 ecx, DWORD PTR _NewSectionName$[ebp]
  00157	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0015c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00163	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00166	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0016b	8a 45 8f	 mov	 al, BYTE PTR $T2[ebp]
$LN1@RenameSect:

; 287  : }

  0016e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00171	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00178	59		 pop	 ecx
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _NewSectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2:
  00010	8d 4d 08	 lea	 ecx, DWORD PTR _OldSectionName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenameSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ENDP ; CIniFile::RenameSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
_TEXT	SEGMENT
tv70 = -115						; size = 1
$T2 = -114						; size = 1
$T3 = -113						; size = 1
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -104						; size = 4
$T7 = -100						; size = 4
$T8 = -96						; size = 4
_iter$9 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_KeyName$ = 8						; size = 24
_SectionName$ = 32					; size = 24
_FileName$ = 56						; size = 24
?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z PROC ; CIniFile::RecordExists, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 178  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 179  : 
; 180  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T8[ebp], esp
  00047	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 8d	 mov	 BYTE PTR tv70[ebp], al
  0005b	0f b6 45 8d	 movzx	 eax, BYTE PTR tv70[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 97 00 00
	00		 je	 $LN2@RecordExis

; 181  : 	{
; 182  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00067	83 ec 30	 sub	 esp, 48			; 00000030H
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 65 9c	 mov	 DWORD PTR $T7[ebp], esp
  0006f	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00072	50		 push	 eax
  00073	8d 55 20	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  0007c	8d 45 98	 lea	 eax, DWORD PTR $T6[ebp]
  0007f	50		 push	 eax
  00080	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00083	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	51		 push	 ecx
  0008b	8d 55 94	 lea	 edx, DWORD PTR $T5[ebp]
  0008e	52		 push	 edx
  0008f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00092	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	50		 push	 eax
  0009a	8d 4d e4	 lea	 ecx, DWORD PTR _iter$9[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000a3	83 c4 3c	 add	 esp, 60			; 0000003cH

; 183  : 				content.end(), 
; 184  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Section/Key
; 185  : 
; 186  : 		if (iter == content.end()) return false;							// The Section/Key was not found

  000a6	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  000a9	50		 push	 eax
  000aa	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000ad	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000b2	50		 push	 eax
  000b3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$9[ebp]
  000b6	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000bb	0f b6 c8	 movzx	 ecx, al
  000be	85 c9		 test	 ecx, ecx
  000c0	74 3c		 je	 SHORT $LN2@RecordExis
  000c2	c6 45 8f 00	 mov	 BYTE PTR $T3[ebp], 0
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e2	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8a 45 8f	 mov	 al, BYTE PTR $T3[ebp]
  000fc	eb 3a		 jmp	 SHORT $LN1@RecordExis
$LN2@RecordExis:

; 187  : 	}
; 188  : 	return true;															// The Section/Key was found

  000fe	c6 45 8e 01	 mov	 BYTE PTR $T2[ebp], 1
  00102	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00106	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00109	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0010e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00112	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00115	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011e	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00121	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00126	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012d	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00130	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00135	8a 45 8e	 mov	 al, BYTE PTR $T2[ebp]
$LN1@RecordExis:

; 189  : }

  00138	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00142	59		 pop	 ecx
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2:
  00010	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RecordExists@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ENDP ; CIniFile::RecordExists
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z
_TEXT	SEGMENT
tv163 = -116						; size = 4
tv147 = -112						; size = 4
tv155 = -108						; size = 4
$T2 = -104						; size = 4
$T3 = -100						; size = 4
$T4 = -96						; size = 4
$T5 = -92						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_KeyName$ = 12						; size = 24
_SectionName$ = 36					; size = 24
_FileName$ = 60						; size = 24
?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z PROC ; CIniFile::GetValue, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 226  : 	std::vector<Record> content = GetRecord(KeyName,SectionName, FileName);		// Get the Record

  00036	83 ec 18	 sub	 esp, 24			; 00000018H
  00039	8b cc		 mov	 ecx, esp
  0003b	89 65 a4	 mov	 DWORD PTR $T5[ebp], esp
  0003e	8d 45 3c	 lea	 eax, DWORD PTR _FileName$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	89 45 94	 mov	 DWORD PTR tv155[ebp], eax
  0004a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0004e	83 ec 18	 sub	 esp, 24			; 00000018H
  00051	8b cc		 mov	 ecx, esp
  00053	89 65 a0	 mov	 DWORD PTR $T4[ebp], esp
  00056	8d 55 24	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005f	89 45 90	 mov	 DWORD PTR tv147[ebp], eax
  00062	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00066	83 ec 18	 sub	 esp, 24			; 00000018H
  00069	8b cc		 mov	 ecx, esp
  0006b	89 65 9c	 mov	 DWORD PTR $T3[ebp], esp
  0006e	8d 45 0c	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00077	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0007a	51		 push	 ecx
  0007b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007f	e8 00 00 00 00	 call	 ?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z ; CIniFile::GetRecord
  00084	83 c4 4c	 add	 esp, 76			; 0000004cH
  00087	89 45 8c	 mov	 DWORD PTR tv163[ebp], eax
  0008a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 227  : 
; 228  : 	if(!content.empty())													// Make sure there is a value to return

  0008e	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00091	e8 00 00 00 00	 call	 ?empty@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBE_NXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::empty
  00096	0f b6 c0	 movzx	 eax, al
  00099	85 c0		 test	 eax, eax
  0009b	75 57		 jne	 SHORT $LN2@GetValue

; 229  : 		return content[0].Value;											// And return the value

  0009d	6a 00		 push	 0
  0009f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000a2	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000a7	83 c0 4c	 add	 eax, 76			; 0000004cH
  000aa	50		 push	 eax
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ae	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b3	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
  000b6	83 c8 01	 or	 eax, 1
  000b9	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  000bc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c0	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000c3	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cc	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000cf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d8	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000db	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e7	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000ea	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ef	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f2	eb 4c		 jmp	 SHORT $LN1@GetValue
$LN2@GetValue:

; 230  : 
; 231  : 	return "";																// No value was found

  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000fc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00101	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
  00104	83 c8 01	 or	 eax, 1
  00107	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  0010a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010e	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00111	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00116	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0011a	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0011d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00122	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00126	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00129	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00135	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00138	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetValue:

; 232  : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$0:
  00000	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$1:
  00008	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$2:
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$3:
  00018	8b 4d a4	 mov	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$4:
  00020	8b 4d a0	 mov	 ecx, DWORD PTR $T4[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z$6:
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
__ehhandler$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z:
  00035	90		 npad	 1
  00036	90		 npad	 1
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetValue@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@00@Z ENDP ; CIniFile::GetValue
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
_TEXT	SEGMENT
tv71 = -113						; size = 1
$T2 = -112						; size = 4
$T3 = -108						; size = 4
_i$4 = -40						; size = 4
_content$ = -36						; size = 12
_data$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_FileName$ = 12						; size = 24
?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z PROC ; CIniFile::GetSectionNames, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 143  : 	std::vector<std::string> data;													// Holds the return data

  00036	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0003e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 144  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00042	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0004a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 145  : 
; 146  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0004e	8d 45 dc	 lea	 eax, DWORD PTR _content$[ebp]
  00051	50		 push	 eax
  00052	83 ec 18	 sub	 esp, 24			; 00000018H
  00055	8b cc		 mov	 ecx, esp
  00057	89 65 94	 mov	 DWORD PTR $T3[ebp], esp
  0005a	8d 55 0c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	88 45 8f	 mov	 BYTE PTR tv71[ebp], al
  0006e	0f b6 45 8f	 movzx	 eax, BYTE PTR tv71[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 5d		 je	 SHORT $LN5@GetSection

; 147  : 	{
; 148  : 		for (int i=0;i<(int)content.size();i++)								// Loop through the content

  00076	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN4@GetSection
$LN2@GetSection:
  0007f	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 d8	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@GetSection:
  00088	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0008b	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  00090	39 45 d8	 cmp	 DWORD PTR _i$4[ebp], eax
  00093	7d 3e		 jge	 SHORT $LN5@GetSection

; 149  : 		{
; 150  : 			if(content[i].Key =="")											// If there is no key value, then its a section

  00095	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0009a	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  0009d	50		 push	 eax
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000a1	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000a6	83 c0 34	 add	 eax, 52			; 00000034H
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000af	83 c4 08	 add	 esp, 8
  000b2	0f b6 c8	 movzx	 ecx, al
  000b5	85 c9		 test	 ecx, ecx
  000b7	74 18		 je	 SHORT $LN6@GetSection

; 151  : 				data.push_back(content[i].Section);							// Add the section to the return data

  000b9	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000c0	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000c5	83 c0 1c	 add	 eax, 28			; 0000001cH
  000c8	50		 push	 eax
  000c9	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  000cc	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
$LN6@GetSection:

; 152  : 		}

  000d1	eb ac		 jmp	 SHORT $LN2@GetSection
$LN5@GetSection:

; 153  : 	}
; 154  : 
; 155  : 	return data;															// Return the data

  000d3	8d 45 e8	 lea	 eax, DWORD PTR _data$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000da	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000df	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  000e2	83 c9 01	 or	 ecx, 1
  000e5	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ec	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000f4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f8	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  000fb	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00100	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00107	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0010a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 156  : }

  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$2:
  00010	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSectionNames@CIniFile@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ENDP ; CIniFile::GetSectionNames
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z
_TEXT	SEGMENT
tv72 = -113						; size = 1
$T2 = -112						; size = 4
$T3 = -108						; size = 4
_i$4 = -40						; size = 4
_content$ = -36						; size = 12
_data$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_SectionName$ = 12					; size = 24
_FileName$ = 36						; size = 24
?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z PROC ; CIniFile::GetSection, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 160  : 	std::vector<Record> data;													// Holds the return data

  00036	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 161  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00042	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0004a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 162  : 
; 163  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0004e	8d 45 dc	 lea	 eax, DWORD PTR _content$[ebp]
  00051	50		 push	 eax
  00052	83 ec 18	 sub	 esp, 24			; 00000018H
  00055	8b cc		 mov	 ecx, esp
  00057	89 65 94	 mov	 DWORD PTR $T3[ebp], esp
  0005a	8d 55 24	 lea	 edx, DWORD PTR _FileName$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	88 45 8f	 mov	 BYTE PTR tv72[ebp], al
  0006e	0f b6 45 8f	 movzx	 eax, BYTE PTR tv72[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 7d		 je	 SHORT $LN5@GetSection

; 164  : 	{
; 165  : 		for (int i=0;i<(int)content.size();i++)								// Loop through the content

  00076	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN4@GetSection
$LN2@GetSection:
  0007f	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 d8	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@GetSection:
  00088	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0008b	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  00090	39 45 d8	 cmp	 DWORD PTR _i$4[ebp], eax
  00093	7d 5e		 jge	 SHORT $LN5@GetSection

; 166  : 		{
; 167  : 			if((content[i].Section == SectionName) &&						// If this is the section name we want

  00095	8d 45 0c	 lea	 eax, DWORD PTR _SectionName$[ebp]
  00098	50		 push	 eax
  00099	8b 4d d8	 mov	 ecx, DWORD PTR _i$4[ebp]
  0009c	51		 push	 ecx
  0009d	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000a0	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000a5	83 c0 1c	 add	 eax, 28			; 0000001cH
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000ae	83 c4 08	 add	 esp, 8
  000b1	0f b6 d0	 movzx	 edx, al
  000b4	85 d2		 test	 edx, edx
  000b6	74 39		 je	 SHORT $LN6@GetSection
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000bd	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000c4	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000c9	83 c0 34	 add	 eax, 52			; 00000034H
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  000d2	83 c4 08	 add	 esp, 8
  000d5	0f b6 c8	 movzx	 ecx, al
  000d8	85 c9		 test	 ecx, ecx
  000da	74 15		 je	 SHORT $LN6@GetSection

; 168  : 				(content[i].Key != ""))										// but not the section name itself
; 169  : 				data.push_back(content[i]);									// Add the record to the return data

  000dc	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000df	50		 push	 eax
  000e0	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000e3	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000e8	50		 push	 eax
  000e9	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  000ec	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
$LN6@GetSection:

; 170  : 		}

  000f1	eb 8c		 jmp	 SHORT $LN2@GetSection
$LN5@GetSection:

; 171  : 	}
; 172  : 	
; 173  : 	return data;															// Return the data

  000f3	8d 45 e8	 lea	 eax, DWORD PTR _data$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000fa	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000ff	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  00102	83 c9 01	 or	 ecx, 1
  00105	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx
  00108	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010c	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0010f	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00114	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00118	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  0011b	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00120	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00124	8d 4d 0c	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00127	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00133	8d 4d 24	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00136	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 174  : }

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$0:
  00000	8d 4d 24	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z$3:
  00018	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSection@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z ENDP ; CIniFile::GetSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z
_TEXT	SEGMENT
tv73 = -129						; size = 1
$T2 = -128						; size = 4
$T3 = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
$T6 = -112						; size = 4
$T7 = -108						; size = 4
_iter$8 = -40						; size = 4
_content$ = -36						; size = 12
_data$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_KeyName$ = 12						; size = 24
_SectionName$ = 36					; size = 24
_FileName$ = 60						; size = 24
?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z PROC ; CIniFile::GetRecord, COMDAT

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 208  : 	std::vector<Record> data;													// Holds the return data

  00036	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 209  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00042	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0004a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 210  : 
; 211  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0004e	8d 45 dc	 lea	 eax, DWORD PTR _content$[ebp]
  00051	50		 push	 eax
  00052	83 ec 18	 sub	 esp, 24			; 00000018H
  00055	8b cc		 mov	 ecx, esp
  00057	89 65 94	 mov	 DWORD PTR $T7[ebp], esp
  0005a	8d 55 3c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	88 85 7f ff ff
	ff		 mov	 BYTE PTR tv73[ebp], al
  00071	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR tv73[ebp]
  00078	85 c0		 test	 eax, eax
  0007a	0f 84 c5 00 00
	00		 je	 $LN2@GetRecord

; 212  : 	{
; 213  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00080	83 ec 30	 sub	 esp, 48			; 00000030H
  00083	8b cc		 mov	 ecx, esp
  00085	89 65 90	 mov	 DWORD PTR $T6[ebp], esp
  00088	8d 45 0c	 lea	 eax, DWORD PTR _KeyName$[ebp]
  0008b	50		 push	 eax
  0008c	8d 55 24	 lea	 edx, DWORD PTR _SectionName$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  00095	8d 45 8c	 lea	 eax, DWORD PTR $T5[ebp]
  00098	50		 push	 eax
  00099	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  0009c	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	51		 push	 ecx
  000a4	8d 55 88	 lea	 edx, DWORD PTR $T4[ebp]
  000a7	52		 push	 edx
  000a8	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000ab	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]
  000b2	50		 push	 eax
  000b3	8d 4d d8	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000bc	83 c4 3c	 add	 esp, 60			; 0000003cH

; 214  : 				content.end(), 
; 215  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Record
; 216  : 
; 217  : 		if (iter == content.end()) return data;								// The Record was not found

  000bf	8d 45 84	 lea	 eax, DWORD PTR $T3[ebp]
  000c2	50		 push	 eax
  000c3	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000c6	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000cb	50		 push	 eax
  000cc	8d 4d d8	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000cf	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000d4	0f b6 c8	 movzx	 ecx, al
  000d7	85 c9		 test	 ecx, ecx
  000d9	74 59		 je	 SHORT $LN3@GetRecord
  000db	8d 45 e8	 lea	 eax, DWORD PTR _data$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e2	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000e7	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  000ea	83 c9 01	 or	 ecx, 1
  000ed	89 4d 80	 mov	 DWORD PTR $T2[ebp], ecx
  000f0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000f4	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  000f7	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000fc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00100	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00108	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010c	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0010f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00114	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00118	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0011b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00127	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0012a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00132	eb 68		 jmp	 SHORT $LN1@GetRecord
$LN3@GetRecord:

; 218  : 
; 219  : 		data.push_back (*iter);												// The Record was found

  00134	8d 4d d8	 lea	 ecx, DWORD PTR _iter$8[ebp]
  00137	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEAAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator*
  0013c	50		 push	 eax
  0013d	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  00140	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back
$LN2@GetRecord:

; 220  : 	}
; 221  : 	return data;															// Return the Record

  00145	8d 45 e8	 lea	 eax, DWORD PTR _data$[ebp]
  00148	50		 push	 eax
  00149	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0014c	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00151	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  00154	83 c9 01	 or	 ecx, 1
  00157	89 4d 80	 mov	 DWORD PTR $T2[ebp], ecx
  0015a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0015e	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00161	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00166	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0016a	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  0016d	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00172	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00176	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00179	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00182	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00185	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0018a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00191	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00194	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00199	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetRecord:

; 222  : }

  0019c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a6	59		 pop	 ecx
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$0:
  00000	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$1:
  00008	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$2:
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _data$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z$4:
  00020	8d 4d dc	 lea	 ecx, DWORD PTR _content$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetRecord@CIniFile@@SA?AV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00@Z ENDP ; CIniFile::GetRecord
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
tv134 = -122						; size = 1
tv69 = -122						; size = 1
$T2 = -121						; size = 1
$T3 = -120						; size = 4
$T4 = -113						; size = 1
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
$T9 = -96						; size = 4
_i$10 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_SectionName$ = 8					; size = 24
_FileName$ = 32						; size = 24
?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::DeleteSection, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 383  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 384  : 
; 385  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T9[ebp], esp
  00047	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 86	 mov	 BYTE PTR tv69[ebp], al
  0005b	0f b6 45 86	 movzx	 eax, BYTE PTR tv69[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 c6 00 00
	00		 je	 $LN5@DeleteSect

; 386  : 	{
; 387  : 		for(int i=(int)content.size()-1;i>-1;i--)								// Iterate backwards through the content

  00067	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0006a	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  0006f	83 e8 01	 sub	 eax, 1
  00072	89 45 e4	 mov	 DWORD PTR _i$10[ebp], eax
  00075	eb 09		 jmp	 SHORT $LN4@DeleteSect
$LN2@DeleteSect:
  00077	8b 45 e4	 mov	 eax, DWORD PTR _i$10[ebp]
  0007a	83 e8 01	 sub	 eax, 1
  0007d	89 45 e4	 mov	 DWORD PTR _i$10[ebp], eax
$LN4@DeleteSect:
  00080	83 7d e4 ff	 cmp	 DWORD PTR _i$10[ebp], -1
  00084	7e 55		 jle	 SHORT $LN3@DeleteSect

; 388  : 		{							
; 389  : 			if(content[i].Section == SectionName)							// Is this related to the Section?

  00086	8d 45 08	 lea	 eax, DWORD PTR _SectionName$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d e4	 mov	 ecx, DWORD PTR _i$10[ebp]
  0008d	51		 push	 ecx
  0008e	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00091	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00096	83 c0 1c	 add	 eax, 28			; 0000001cH
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0009f	83 c4 08	 add	 esp, 8
  000a2	0f b6 d0	 movzx	 edx, al
  000a5	85 d2		 test	 edx, edx
  000a7	74 30		 je	 SHORT $LN6@DeleteSect

; 390  : 				content.erase (content.begin()+i);							// Then erase it

  000a9	8b 45 e4	 mov	 eax, DWORD PTR _i$10[ebp]
  000ac	50		 push	 eax
  000ad	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  000b0	51		 push	 ecx
  000b1	8d 55 98	 lea	 edx, DWORD PTR $T7[ebp]
  000b4	52		 push	 edx
  000b5	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000b8	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  000bd	8b c8		 mov	 ecx, eax
  000bf	e8 00 00 00 00	 call	 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator+
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	89 45 9c	 mov	 DWORD PTR $T8[ebp], eax
  000c9	8b 4d 9c	 mov	 ecx, DWORD PTR $T8[ebp]
  000cc	51		 push	 ecx
  000cd	8d 55 90	 lea	 edx, DWORD PTR $T5[ebp]
  000d0	52		 push	 edx
  000d1	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000d4	e8 00 00 00 00	 call	 ?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::erase
$LN6@DeleteSect:

; 391  : 		}

  000d9	eb 9c		 jmp	 SHORT $LN2@DeleteSect
$LN3@DeleteSect:

; 392  : 
; 393  : 		return Save(FileName,content);										// Save

  000db	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  000de	50		 push	 eax
  000df	83 ec 18	 sub	 esp, 24			; 00000018H
  000e2	8b cc		 mov	 ecx, esp
  000e4	89 65 88	 mov	 DWORD PTR $T3[ebp], esp
  000e7	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  000ea	52		 push	 edx
  000eb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f0	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  000f5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f8	88 45 86	 mov	 BYTE PTR tv134[ebp], al
  000fb	8a 45 86	 mov	 al, BYTE PTR tv134[ebp]
  000fe	88 45 8f	 mov	 BYTE PTR $T4[ebp], al
  00101	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00105	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0010d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00111	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00119	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00120	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00123	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00128	8a 45 8f	 mov	 al, BYTE PTR $T4[ebp]
  0012b	eb 2e		 jmp	 SHORT $LN1@DeleteSect
$LN5@DeleteSect:

; 394  : 	}
; 395  : 	return false;															// In the event the file does not load

  0012d	c6 45 87 00	 mov	 BYTE PTR $T2[ebp], 0
  00131	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00135	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00138	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0013d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00141	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00144	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00149	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00150	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00153	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00158	8a 45 87	 mov	 al, BYTE PTR $T2[ebp]
$LN1@DeleteSect:

; 396  : }

  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::DeleteSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
_TEXT	SEGMENT
tv161 = -134						; size = 1
tv70 = -134						; size = 1
$T2 = -133						; size = 1
$T3 = -132						; size = 4
$T4 = -125						; size = 1
$T5 = -124						; size = 4
$T6 = -120						; size = 4
$T7 = -113						; size = 1
$T8 = -112						; size = 4
$T9 = -108						; size = 4
$T10 = -104						; size = 4
$T11 = -100						; size = 4
$T12 = -96						; size = 4
_iter$13 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_KeyName$ = 8						; size = 24
_SectionName$ = 32					; size = 24
_FileName$ = 56						; size = 24
?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z PROC ; CIniFile::DeleteRecord, COMDAT

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 363  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 364  : 
; 365  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T12[ebp], esp
  00047	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 85 7a ff ff
	ff		 mov	 BYTE PTR tv70[ebp], al
  0005e	0f b6 85 7a ff
	ff ff		 movzx	 eax, BYTE PTR tv70[ebp]
  00065	85 c0		 test	 eax, eax
  00067	0f 84 17 01 00
	00		 je	 $LN2@DeleteReco

; 366  : 	{
; 367  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  0006d	83 ec 30	 sub	 esp, 48			; 00000030H
  00070	8b cc		 mov	 ecx, esp
  00072	89 65 9c	 mov	 DWORD PTR $T11[ebp], esp
  00075	8d 45 08	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00078	50		 push	 eax
  00079	8d 55 20	 lea	 edx, DWORD PTR _SectionName$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  00082	8d 45 98	 lea	 eax, DWORD PTR $T10[ebp]
  00085	50		 push	 eax
  00086	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00089	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	51		 push	 ecx
  00091	8d 55 94	 lea	 edx, DWORD PTR $T9[ebp]
  00094	52		 push	 edx
  00095	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00098	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	50		 push	 eax
  000a0	8d 4d e4	 lea	 ecx, DWORD PTR _iter$13[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000a9	83 c4 3c	 add	 esp, 60			; 0000003cH

; 368  : 				content.end(), 
; 369  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Section/Key
; 370  : 
; 371  : 		if (iter == content.end()) return false;							// The Section/Key was not found

  000ac	8d 45 90	 lea	 eax, DWORD PTR $T8[ebp]
  000af	50		 push	 eax
  000b0	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000b3	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000b8	50		 push	 eax
  000b9	8d 4d e4	 lea	 ecx, DWORD PTR _iter$13[ebp]
  000bc	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000c1	0f b6 c8	 movzx	 ecx, al
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 3f		 je	 SHORT $LN3@DeleteReco
  000c8	c6 45 8f 00	 mov	 BYTE PTR $T7[ebp], 0
  000cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000d0	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000d3	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000dc	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000df	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e8	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f7	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ff	8a 45 8f	 mov	 al, BYTE PTR $T7[ebp]
  00102	e9 bd 00 00 00	 jmp	 $LN1@DeleteReco
$LN3@DeleteReco:

; 372  : 	
; 373  : 		content.erase(iter);												// Remove the Record

  00107	8b 45 e4	 mov	 eax, DWORD PTR _iter$13[ebp]
  0010a	89 45 88	 mov	 DWORD PTR $T6[ebp], eax
  0010d	8b 4d 88	 mov	 ecx, DWORD PTR $T6[ebp]
  00110	51		 push	 ecx
  00111	8d 55 84	 lea	 edx, DWORD PTR $T5[ebp]
  00114	52		 push	 edx
  00115	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00118	e8 00 00 00 00	 call	 ?erase@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::erase

; 374  : 		return Save(FileName,content);										// Save

  0011d	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  00120	50		 push	 eax
  00121	83 ec 18	 sub	 esp, 24			; 00000018H
  00124	8b cc		 mov	 ecx, esp
  00126	89 a5 7c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  0012c	8d 55 38	 lea	 edx, DWORD PTR _FileName$[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00135	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  0013a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0013d	88 85 7a ff ff
	ff		 mov	 BYTE PTR tv161[ebp], al
  00143	8a 85 7a ff ff
	ff		 mov	 al, BYTE PTR tv161[ebp]
  00149	88 45 83	 mov	 BYTE PTR $T4[ebp], al
  0014c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00150	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00153	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00158	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0015c	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0015f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00164	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00168	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0016b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00170	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00177	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017f	8a 45 83	 mov	 al, BYTE PTR $T4[ebp]
  00182	eb 40		 jmp	 SHORT $LN1@DeleteReco
$LN2@DeleteReco:

; 375  : 
; 376  : 	}
; 377  : 	
; 378  : 	return false;															// In the event the file does not load

  00184	c6 85 7b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0018b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0018f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00192	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00197	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0019b	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0019e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001a7	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  001aa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b6	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  001b9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001be	8a 85 7b ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@DeleteReco:

; 379  : }

  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$0:
  00000	8d 4d 38	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$2:
  00010	8d 4d 08	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteRecord@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00@Z ENDP ; CIniFile::DeleteRecord
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv68 = -97						; size = 1
$T2 = -96						; size = 4
$T3 = -89						; size = 1
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_FileName$ = 8						; size = 24
?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CIniFile::Create, COMDAT

; 514  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 515  : 	std::vector<Record> content;													// Create empty content

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 516  : 	return Save(FileName,content);											// Save

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T2[ebp], esp
  00047	8d 55 08	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 9f	 mov	 BYTE PTR tv68[ebp], al
  0005b	8a 45 9f	 mov	 al, BYTE PTR tv68[ebp]
  0005e	88 45 a7	 mov	 BYTE PTR $T3[ebp], al
  00061	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00065	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00068	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00077	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007c	8a 45 a7	 mov	 al, BYTE PTR $T3[ebp]

; 517  : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CIniFile::Create
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
_TEXT	SEGMENT
tv228 = -240						; size = 4
tv224 = -240						; size = 4
tv208 = -236						; size = 4
tv66 = -236						; size = 4
tv226 = -232						; size = 4
tv222 = -232						; size = 4
tv212 = -228						; size = 4
tv70 = -228						; size = 4
tv72 = -225						; size = 1
$T2 = -224						; size = 4
$T3 = -220						; size = 24
$T4 = -196						; size = 24
$T5 = -172						; size = 24
$T6 = -148						; size = 24
$T7 = -124						; size = 4
_i$8 = -56						; size = 4
_content$ = -52						; size = 12
_s$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_FileName$ = 12						; size = 24
?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z PROC ; CIniFile::Content, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  : 	std::string s="";															// Hold our return std::string

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00044	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 121  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00050	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00053	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00058	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 122  : 
; 123  : 	if (Load(FileName, content))											// Make sure the file loads

  0005c	8d 45 cc	 lea	 eax, DWORD PTR _content$[ebp]
  0005f	50		 push	 eax
  00060	83 ec 18	 sub	 esp, 24			; 00000018H
  00063	8b cc		 mov	 ecx, esp
  00065	89 65 84	 mov	 DWORD PTR $T7[ebp], esp
  00068	8d 55 0c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00076	83 c4 1c	 add	 esp, 28			; 0000001cH
  00079	88 85 1f ff ff
	ff		 mov	 BYTE PTR tv72[ebp], al
  0007f	0f b6 85 1f ff
	ff ff		 movzx	 eax, BYTE PTR tv72[ebp]
  00086	85 c0		 test	 eax, eax
  00088	0f 84 4b 02 00
	00		 je	 $LN5@Content

; 124  : 	{
; 125  : 		for (int i=0;i<(int)content.size();i++)								// Loop through the content

  0008e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00095	eb 09		 jmp	 SHORT $LN4@Content
$LN2@Content:
  00097	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  0009a	83 c0 01	 add	 eax, 1
  0009d	89 45 c8	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@Content:
  000a0	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  000a3	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  000a8	39 45 c8	 cmp	 DWORD PTR _i$8[ebp], eax
  000ab	0f 8d e1 01 00
	00		 jge	 $LN3@Content

; 126  : 		{
; 127  : 			if(content[i].Comments != "") s += content[i].Comments;			// Add the comments

  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000b6	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  000b9	50		 push	 eax
  000ba	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  000bd	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  000c8	83 c4 08	 add	 esp, 8
  000cb	0f b6 c8	 movzx	 ecx, al
  000ce	85 c9		 test	 ecx, ecx
  000d0	74 15		 je	 SHORT $LN6@Content
  000d2	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  000d5	50		 push	 eax
  000d6	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  000d9	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000de	50		 push	 eax
  000df	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  000e2	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN6@Content:

; 128  : 			if(content[i].Commented != ' ') s += content[i].Commented;		// If this is commented, then add it

  000e7	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  000ea	50		 push	 eax
  000eb	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  000ee	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  000f3	0f be 48 18	 movsx	 ecx, BYTE PTR [eax+24]
  000f7	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000fa	74 1b		 je	 SHORT $LN7@Content
  000fc	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  000ff	50		 push	 eax
  00100	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00103	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00108	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  0010b	0f b6 d1	 movzx	 edx, cl
  0010e	52		 push	 edx
  0010f	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00112	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN7@Content:

; 129  : 			if((content[i].Key == ""))										// Is this a section?

  00117	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0011c	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  0011f	50		 push	 eax
  00120	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00123	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  00128	83 c0 34	 add	 eax, 52			; 00000034H
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00131	83 c4 08	 add	 esp, 8
  00134	0f b6 c8	 movzx	 ecx, al
  00137	85 c9		 test	 ecx, ecx
  00139	0f 84 97 00 00
	00		 je	 $LN8@Content

; 130  : 				s += '[' + content[i].Section + ']';						// Add the section

  0013f	6a 5d		 push	 93			; 0000005dH
  00141	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  00144	50		 push	 eax
  00145	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00148	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  0014d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00150	50		 push	 eax
  00151	6a 5b		 push	 91			; 0000005bH
  00153	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00162	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00168	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv70[ebp]
  0016e	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv222[ebp], edx
  00174	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00178	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv222[ebp]
  0017e	50		 push	 eax
  0017f	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0018b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018e	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00194	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv66[ebp]
  0019a	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv224[ebp], edx
  001a0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001a4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  001aa	50		 push	 eax
  001ab	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  001ae	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  001b3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001b7	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001bd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001c6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001cc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d1	e9 a0 00 00 00	 jmp	 $LN9@Content
$LN8@Content:

; 131  : 			else s += content[i].Key + '=' + content[i].Value;				// Or the Key value to the return srting

  001d6	8b 45 c8	 mov	 eax, DWORD PTR _i$8[ebp]
  001d9	50		 push	 eax
  001da	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  001dd	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  001e2	83 c0 4c	 add	 eax, 76			; 0000004cH
  001e5	50		 push	 eax
  001e6	6a 3d		 push	 61			; 0000003dH
  001e8	8b 4d c8	 mov	 ecx, DWORD PTR _i$8[ebp]
  001eb	51		 push	 ecx
  001ec	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  001ef	e8 00 00 00 00	 call	 ??A?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEAAURecord@CIniFile@@I@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::operator[]
  001f4	83 c0 34	 add	 eax, 52			; 00000034H
  001f7	50		 push	 eax
  001f8	8d 95 3c ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  001fe	52		 push	 edx
  001ff	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH
  00207	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv212[ebp], eax
  0020d	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv212[ebp]
  00213	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv226[ebp], eax
  00219	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0021d	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  00223	51		 push	 ecx
  00224	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  0022a	52		 push	 edx
  0022b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00230	83 c4 0c	 add	 esp, 12			; 0000000cH
  00233	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv208[ebp], eax
  00239	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv208[ebp]
  0023f	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv228[ebp], eax
  00245	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00249	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv228[ebp]
  0024f	51		 push	 ecx
  00250	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00253	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00258	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0025c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00262	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00267	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0026b	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00271	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@Content:

; 132  : 
; 133  : 			if (i != content.size()) s += '\n';								// If this is not the last line, add a CrLf

  00276	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00279	e8 00 00 00 00	 call	 ?size@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QBEIXZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::size
  0027e	39 45 c8	 cmp	 DWORD PTR _i$8[ebp], eax
  00281	74 0a		 je	 SHORT $LN10@Content
  00283	6a 0a		 push	 10			; 0000000aH
  00285	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00288	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN10@Content:

; 134  : 		}

  0028d	e9 05 fe ff ff	 jmp	 $LN2@Content
$LN3@Content:

; 135  : 		return s;															// Return the contents

  00292	8d 45 d8	 lea	 eax, DWORD PTR _s$[ebp]
  00295	50		 push	 eax
  00296	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00299	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0029e	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  002a4	83 c9 01	 or	 ecx, 1
  002a7	89 8d 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  002ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002b1	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  002b4	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  002b9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002bd	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  002c0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002cc	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  002cf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002d4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  002d7	eb 46		 jmp	 SHORT $LN1@Content
$LN5@Content:

; 136  : 	}
; 137  : 
; 138  : 	return "";

  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  002de	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002e1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002e6	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  002ec	83 c8 01	 or	 eax, 1
  002ef	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  002f5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002f9	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  002fc	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00301	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00305	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  00308	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0030d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00314	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00317	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0031c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Content:

; 139  : }

  0031f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00322	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00329	59		 pop	 ecx
  0032a	5f		 pop	 edi
  0032b	5e		 pop	 esi
  0032c	5b		 pop	 ebx
  0032d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00330	33 cd		 xor	 ecx, ebp
  00332	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00337	8b e5		 mov	 esp, ebp
  00339	5d		 pop	 ebp
  0033a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _s$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$2:
  00010	8d 4d cc	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$4:
  00018	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$5:
  00023	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$6:
  0002e	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$7:
  00039	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
__ehhandler$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z:
  00049	90		 npad	 1
  0004a	90		 npad	 1
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Content@CIniFile@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ENDP ; CIniFile::Content
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
tv151 = -114						; size = 1
tv69 = -114						; size = 1
$T2 = -113						; size = 1
$T3 = -112						; size = 4
$T4 = -105						; size = 1
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
_iter$8 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_CommentChar$ = 8					; size = 1
_SectionName$ = 12					; size = 24
_FileName$ = 36						; size = 24
?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::CommentSection, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 329  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 330  : 
; 331  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T7[ebp], esp
  00047	8d 55 24	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 8e	 mov	 BYTE PTR tv69[ebp], al
  0005b	0f b6 45 8e	 movzx	 eax, BYTE PTR tv69[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 b9 00 00
	00		 je	 $LN5@CommentSec

; 332  : 	{
; 333  : 		for(std::vector<Record>::iterator iter = content.begin(); iter < content.end(); iter++)

  00067	8d 45 e4	 lea	 eax, DWORD PTR _iter$8[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0006e	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00073	eb 0e		 jmp	 SHORT $LN4@CommentSec
$LN2@CommentSec:
  00075	6a 00		 push	 0
  00077	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  0007e	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator++
$LN4@CommentSec:
  00083	8d 45 98	 lea	 eax, DWORD PTR $T5[ebp]
  00086	50		 push	 eax
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0008a	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  0008f	50		 push	 eax
  00090	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  00093	e8 00 00 00 00	 call	 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator<
  00098	0f b6 c8	 movzx	 ecx, al
  0009b	85 c9		 test	 ecx, ecx
  0009d	74 2f		 je	 SHORT $LN3@CommentSec

; 334  : 		{
; 335  : 			if(iter->Section == SectionName)								// Is this the right section?

  0009f	8d 45 0c	 lea	 eax, DWORD PTR _SectionName$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000a6	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000ab	83 c0 1c	 add	 eax, 28			; 0000001cH
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000b4	83 c4 08	 add	 esp, 8
  000b7	0f b6 c8	 movzx	 ecx, al
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 0e		 je	 SHORT $LN6@CommentSec

; 336  : 				iter->Commented = CommentChar;								// Change the comment value

  000be	8d 4d e4	 lea	 ecx, DWORD PTR _iter$8[ebp]
  000c1	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  000c6	8a 4d 08	 mov	 cl, BYTE PTR _CommentChar$[ebp]
  000c9	88 48 18	 mov	 BYTE PTR [eax+24], cl
$LN6@CommentSec:

; 337  : 		}

  000cc	eb a7		 jmp	 SHORT $LN2@CommentSec
$LN3@CommentSec:

; 338  : 		return Save(FileName,content);										// Save

  000ce	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  000d1	50		 push	 eax
  000d2	83 ec 18	 sub	 esp, 24			; 00000018H
  000d5	8b cc		 mov	 ecx, esp
  000d7	89 65 90	 mov	 DWORD PTR $T3[ebp], esp
  000da	8d 55 24	 lea	 edx, DWORD PTR _FileName$[ebp]
  000dd	52		 push	 edx
  000de	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e3	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  000e8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000eb	88 45 8e	 mov	 BYTE PTR tv151[ebp], al
  000ee	8a 45 8e	 mov	 al, BYTE PTR tv151[ebp]
  000f1	88 45 97	 mov	 BYTE PTR $T4[ebp], al
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000fb	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00100	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00104	8d 4d 0c	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00107	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00113	8d 4d 24	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00116	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011b	8a 45 97	 mov	 al, BYTE PTR $T4[ebp]
  0011e	eb 2e		 jmp	 SHORT $LN1@CommentSec
$LN5@CommentSec:

; 339  : 	}
; 340  : 
; 341  : 	return false;															// In the event the file does not load

  00120	c6 45 8f 00	 mov	 BYTE PTR $T2[ebp], 0
  00124	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00128	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0012b	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00130	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00134	8d 4d 0c	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00137	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00143	8d 4d 24	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00146	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014b	8a 45 8f	 mov	 al, BYTE PTR $T2[ebp]
$LN1@CommentSec:

; 342  : }

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 24	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CommentSection@CIniFile@@SA_NDV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::CommentSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
_TEXT	SEGMENT
tv163 = -122						; size = 1
tv70 = -122						; size = 1
$T2 = -121						; size = 1
$T3 = -120						; size = 4
$T4 = -114						; size = 1
$T5 = -113						; size = 1
$T6 = -112						; size = 4
$T7 = -108						; size = 4
$T8 = -104						; size = 4
$T9 = -100						; size = 4
$T10 = -96						; size = 4
_iter$11 = -28						; size = 4
_content$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_cc$ = 8						; size = 4
_KeyName$ = 12						; size = 24
_SectionName$ = 36					; size = 24
_FileName$ = 60						; size = 24
?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z PROC ; CIniFile::CommentRecord, COMDAT

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 291  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  0002f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 292  : 
; 293  : 	if (Load(FileName, content))											// Make sure the file is loaded

  0003b	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  0003e	50		 push	 eax
  0003f	83 ec 18	 sub	 esp, 24			; 00000018H
  00042	8b cc		 mov	 ecx, esp
  00044	89 65 a0	 mov	 DWORD PTR $T10[ebp], esp
  00047	8d 55 3c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
  00058	88 45 86	 mov	 BYTE PTR tv70[ebp], al
  0005b	0f b6 45 86	 movzx	 eax, BYTE PTR tv70[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 06 01 00
	00		 je	 $LN2@CommentRec

; 294  : 	{
; 295  : 		std::vector<Record>::iterator iter = std::find_if(content.begin(), 

  00067	83 ec 30	 sub	 esp, 48			; 00000030H
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 65 9c	 mov	 DWORD PTR $T9[ebp], esp
  0006f	8d 45 0c	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00072	50		 push	 eax
  00073	8d 55 24	 lea	 edx, DWORD PTR _SectionName$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ??0RecordSectionKeyIs@CIniFile@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CIniFile::RecordSectionKeyIs::RecordSectionKeyIs
  0007c	8d 45 98	 lea	 eax, DWORD PTR $T8[ebp]
  0007f	50		 push	 eax
  00080	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00083	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	51		 push	 ecx
  0008b	8d 55 94	 lea	 edx, DWORD PTR $T7[ebp]
  0008e	52		 push	 edx
  0008f	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00092	e8 00 00 00 00	 call	 ?begin@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::begin
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	50		 push	 eax
  0009a	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@URecordSectionKeyIs@CIniFile@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@0@V10@V10@URecordSectionKeyIs@CIniFile@@@Z ; std::find_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >,CIniFile::RecordSectionKeyIs>
  000a3	83 c4 3c	 add	 esp, 60			; 0000003cH

; 296  : 				content.end(), 
; 297  : 				CIniFile::RecordSectionKeyIs(SectionName,KeyName));			// Locate the Section/Key
; 298  : 
; 299  : 		if (iter == content.end()) return false;							// The Section/Key was not found

  000a6	8d 45 90	 lea	 eax, DWORD PTR $T6[ebp]
  000a9	50		 push	 eax
  000aa	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000ad	e8 00 00 00 00	 call	 ?end@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@2@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::end
  000b2	50		 push	 eax
  000b3	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  000b6	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator==
  000bb	0f b6 c8	 movzx	 ecx, al
  000be	85 c9		 test	 ecx, ecx
  000c0	74 3f		 je	 SHORT $LN3@CommentRec
  000c2	c6 45 8f 00	 mov	 BYTE PTR $T5[ebp], 0
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e2	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8a 45 8f	 mov	 al, BYTE PTR $T5[ebp]
  000fc	e9 a6 00 00 00	 jmp	 $LN1@CommentRec
$LN3@CommentRec:

; 300  : 	
; 301  : 		iter->Commented = cc;										// Change the Comment value

  00101	8d 4d e4	 lea	 ecx, DWORD PTR _iter$11[ebp]
  00104	e8 00 00 00 00	 call	 ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@URecord@CIniFile@@@std@@@std@@@std@@QBEPAURecord@CIniFile@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CIniFile::Record> > >::operator->
  00109	8a 4d 08	 mov	 cl, BYTE PTR _cc$[ebp]
  0010c	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 302  : 		return Save(FileName,content);										// Save

  0010f	8d 45 e8	 lea	 eax, DWORD PTR _content$[ebp]
  00112	50		 push	 eax
  00113	83 ec 18	 sub	 esp, 24			; 00000018H
  00116	8b cc		 mov	 ecx, esp
  00118	89 65 88	 mov	 DWORD PTR $T3[ebp], esp
  0011b	8d 55 3c	 lea	 edx, DWORD PTR _FileName$[ebp]
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00124	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  00129	83 c4 1c	 add	 esp, 28			; 0000001cH
  0012c	88 45 86	 mov	 BYTE PTR tv163[ebp], al
  0012f	8a 45 86	 mov	 al, BYTE PTR tv163[ebp]
  00132	88 45 8e	 mov	 BYTE PTR $T4[ebp], al
  00135	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00139	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0013c	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00141	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00145	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00148	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00151	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00154	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00159	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00160	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00163	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00168	8a 45 8e	 mov	 al, BYTE PTR $T4[ebp]
  0016b	eb 3a		 jmp	 SHORT $LN1@CommentRec
$LN2@CommentRec:

; 303  : 
; 304  : 	}
; 305  : 	return false;															// In the event the file does not load

  0016d	c6 45 87 00	 mov	 BYTE PTR $T2[ebp], 0
  00171	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00175	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0017d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00181	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00184	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00189	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0018d	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00190	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00195	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0019c	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0019f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a4	8a 45 87	 mov	 al, BYTE PTR $T2[ebp]
$LN1@CommentRec:

; 306  : }

  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$0:
  00000	8d 4d 3c	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$1:
  00008	8d 4d 24	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$2:
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z$3:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _content$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CommentRecord@CIniFile@@SA_NW4CommentChar@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ENDP ; CIniFile::CommentRecord
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
tv138 = -206						; size = 1
tv69 = -206						; size = 1
$T2 = -205						; size = 1
$T3 = -204						; size = 4
$T4 = -197						; size = 1
$T5 = -196						; size = 4
_s$6 = -128						; size = 100
_content$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_SectionName$ = 8					; size = 24
_FileName$ = 32						; size = 24
?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CIniFile::AddSection, COMDAT

; 500  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 501  : 	std::vector<Record> content;													// Holds the current record													// Holds the current record

  00035	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  0003d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 502  : 
; 503  : 	if (Load(FileName, content))											// Make sure the file is loaded

  00041	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  00044	50		 push	 eax
  00045	83 ec 18	 sub	 esp, 24			; 00000018H
  00048	8b cc		 mov	 ecx, esp
  0004a	89 a5 3c ff ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  00050	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00059	e8 00 00 00 00	 call	 ?Load@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Load
  0005e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00061	88 85 32 ff ff
	ff		 mov	 BYTE PTR tv69[ebp], al
  00067	0f b6 85 32 ff
	ff ff		 movzx	 eax, BYTE PTR tv69[ebp]
  0006e	85 c0		 test	 eax, eax
  00070	0f 84 c0 00 00
	00		 je	 $LN2@AddSection

; 504  : 	{
; 505  : 		Record s = {"",' ',SectionName,"",""};								// Define a new section

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0007b	8d 4d 80	 lea	 ecx, DWORD PTR _s$6[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00083	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00087	c6 45 98 20	 mov	 BYTE PTR _s$6[ebp+24], 32 ; 00000020H
  0008b	8d 45 08	 lea	 eax, DWORD PTR _SectionName$[ebp]
  0008e	50		 push	 eax
  0008f	8d 4d 9c	 lea	 ecx, DWORD PTR _s$6[ebp+28]
  00092	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00097	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000a0	8d 4d b4	 lea	 ecx, DWORD PTR _s$6[ebp+52]
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a8	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000b1	8d 4d cc	 lea	 ecx, DWORD PTR _s$6[ebp+76]
  000b4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b9	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 506  : 		content.push_back(s);												// Add the section

  000bd	8d 45 80	 lea	 eax, DWORD PTR _s$6[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  000c4	e8 00 00 00 00	 call	 ?push_back@?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAEXABURecord@CIniFile@@@Z ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::push_back

; 507  : 		return Save(FileName,content);										// Save

  000c9	8d 45 e4	 lea	 eax, DWORD PTR _content$[ebp]
  000cc	50		 push	 eax
  000cd	83 ec 18	 sub	 esp, 24			; 00000018H
  000d0	8b cc		 mov	 ecx, esp
  000d2	89 a5 34 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  000d8	8d 55 20	 lea	 edx, DWORD PTR _FileName$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e1	e8 00 00 00 00	 call	 ?Save@CIniFile@@CA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@3@@Z ; CIniFile::Save
  000e6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000e9	88 85 32 ff ff
	ff		 mov	 BYTE PTR tv138[ebp], al
  000ef	8a 85 32 ff ff
	ff		 mov	 al, BYTE PTR tv138[ebp]
  000f5	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ff	8d 4d 80	 lea	 ecx, DWORD PTR _s$6[ebp]
  00102	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  00107	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010b	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  0010e	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00113	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00117	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0011a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00129	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012e	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  00134	eb 34		 jmp	 SHORT $LN1@AddSection
$LN2@AddSection:

; 508  : 	}
; 509  : 
; 510  : 	return false;															// The file did not open

  00136	c6 85 33 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0013d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00141	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00144	e8 00 00 00 00	 call	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
  00149	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0014d	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  00150	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00155	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015c	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  0015f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00164	8a 85 33 ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@AddSection:

; 511  : }

  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017b	33 cd		 xor	 ecx, ebp
  0017d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _FileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _SectionName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR _content$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URecord@CIniFile@@V?$allocator@URecord@CIniFile@@@std@@@std@@QAE@XZ ; std::vector<CIniFile::Record,std::allocator<CIniFile::Record> >::~vector<CIniFile::Record,std::allocator<CIniFile::Record> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$4:
  00018	8d 4d 80	 lea	 ecx, DWORD PTR _s$6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$5:
  00020	8d 4d 9c	 lea	 ecx, DWORD PTR _s$6[ebp+28]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$6:
  00028	8d 4d b4	 lea	 ecx, DWORD PTR _s$6[ebp+52]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$8:
  00030	8d 4d 80	 lea	 ecx, DWORD PTR _s$6[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1Record@CIniFile@@QAE@XZ
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
__ehhandler$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0003d	90		 npad	 1
  0003e	90		 npad	 1
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddSection@CIniFile@@SA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CIniFile::AddSection
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ??1CIniFile@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CIniFile@@UAE@XZ PROC				; CIniFile::~CIniFile, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CIniFile@@6B@

; 10   : 
; 11   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CIniFile@@UAE@XZ ENDP				; CIniFile::~CIniFile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ??0CIniFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CIniFile@@QAE@XZ PROC				; CIniFile::CIniFile, COMDAT
; _this$ = ecx

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CIniFile@@6B@

; 5    : 
; 6    : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CIniFile@@QAE@XZ ENDP				; CIniFile::CIniFile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GRecord@CIniFile@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRecord@CIniFile@@QAEPAXI@Z PROC			; CIniFile::Record::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1Record@CIniFile@@QAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 64		 push	 100			; 00000064H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GRecord@CIniFile@@QAEPAXI@Z ENDP			; CIniFile::Record::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z PROC		; CIniFile::Record::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  00021	88 50 18	 mov	 BYTE PTR [eax+24], dl
  00024	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00031	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00036	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00039	83 c0 34	 add	 eax, 52			; 00000034H
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 34	 add	 ecx, 52			; 00000034H
  00043	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00048	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0004b	83 c0 4c	 add	 eax, 76			; 0000004cH
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00055	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??4Record@CIniFile@@QAEAAU01@$$QAU01@@Z ENDP		; CIniFile::Record::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Record@CIniFile@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Record@CIniFile@@QAE@$$QAU01@@Z PROC			; CIniFile::Record::Record, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  00021	88 50 18	 mov	 BYTE PTR [eax+24], dl
  00024	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00031	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00036	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00039	83 c0 34	 add	 eax, 52			; 00000034H
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 34	 add	 ecx, 52			; 00000034H
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0004b	83 c0 4c	 add	 eax, 76			; 0000004cH
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00055	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??0Record@CIniFile@@QAE@$$QAU01@@Z ENDP			; CIniFile::Record::Record
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Record@CIniFile@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Record@CIniFile@@QAE@ABU01@@Z PROC			; CIniFile::Record::Record, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Record@CIniFile@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00044	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  00047	88 50 18	 mov	 BYTE PTR [eax+24], dl
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0004d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00050	50		 push	 eax
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00060	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00063	83 c0 34	 add	 eax, 52			; 00000034H
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 34	 add	 ecx, 52			; 00000034H
  0006d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00072	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00076	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00079	83 c0 4c	 add	 eax, 76			; 0000004cH
  0007c	50		 push	 eax
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00083	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Record@CIniFile@@QAE@ABU01@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 34	 add	 ecx, 52			; 00000034H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0Record@CIniFile@@QAE@ABU01@@Z:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Record@CIniFile@@QAE@ABU01@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Record@CIniFile@@QAE@ABU01@@Z ENDP			; CIniFile::Record::Record
; Function compile flags: /Odtp /ZI
;	COMDAT ??1Record@CIniFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Record@CIniFile@@QAE@XZ PROC				; CIniFile::Record::~Record, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00012	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 34	 add	 ecx, 52			; 00000034H
  0001d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00028	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1Record@CIniFile@@QAE@XZ ENDP				; CIniFile::Record::~Record
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Record@CIniFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Record@CIniFile@@QAE@XZ PROC				; CIniFile::Record::Record, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0001a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 34	 add	 ecx, 52			; 00000034H
  00025	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0Record@CIniFile@@QAE@XZ ENDP				; CIniFile::Record::Record
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 129  : inline bool _Ungetc(const char& _Byte, FILE* _File) { // put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  :     return _CSTD ungetc(static_cast<unsigned char>(_Byte), _File) != EOF;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00010	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 _ungetc
  00019	83 c4 08	 add	 esp, 8
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	74 09		 je	 SHORT $LN3@Ungetc
  00021	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  0002a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Ungetc:
  00031	8a 45 bc	 mov	 al, BYTE PTR tv69[ebp]

; 131  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 106  : inline bool _Fputc(char _Byte, FILE* _File) { // put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 107  :     return _CSTD fputc(_Byte, _File) != EOF;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  0000c	50		 push	 eax
  0000d	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _fputc
  00017	83 c4 08	 add	 esp, 8
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	74 09		 je	 SHORT $LN3@Fputc
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Fputc:
  0002f	8a 45 bc	 mov	 al, BYTE PTR tv69[ebp]

; 108  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -4						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 65   : inline bool _Fgetc(char& _Byte, FILE* _File) { // get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   :     int _Meta;
; 67   :     if ((_Meta = _CSTD fgetc(_File)) == EOF) {

  00009	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _fgetc
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR __Meta$[ebp], eax
  00018	83 7d fc ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  0001c	75 06		 jne	 SHORT $LN2@Fgetc

; 68   :         return false;

  0001e	32 c0		 xor	 al, al
  00020	eb 0c		 jmp	 SHORT $LN1@Fgetc

; 69   :     } else { // got one, convert to char

  00022	eb 0a		 jmp	 SHORT $LN1@Fgetc
$LN2@Fgetc:

; 70   :         _Byte = static_cast<char>(_Meta);

  00024	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00027	8a 4d fc	 mov	 cl, BYTE PTR __Meta$[ebp]
  0002a	88 08		 mov	 BYTE PTR [eax], cl

; 71   :         return true;

  0002c	b0 01		 mov	 al, 1
$LN1@Fgetc:

; 72   :     }
; 73   : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 38		 push	 56			; 00000038H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
tv83 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 462  :     void __CLR_OR_THIS_CALL _Init() { // initialize a new ios_base

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  :         _Ploc   = nullptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 464  :         _Stdstr = 0;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 465  :         _Except = goodbit;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 466  :         _Fmtfl  = skipws | dec;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 40 14 01 02
	00 00		 mov	 DWORD PTR [eax+20], 513	; 00000201H

; 467  :         _Prec   = 6;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 40 18 06 00
	00 00		 mov	 DWORD PTR [eax+24], 6
  0003e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 468  :         _Wide   = 0;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  0004f	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 469  :         _Arr    = nullptr;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 470  :         _Calls  = nullptr;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 471  :         clear(goodbit);

  0006a	6a 00		 push	 0
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH@Z ; std::ios_base::clear

; 472  :         _Ploc = new locale;

  00074	6a 08		 push	 8
  00076	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007b	83 c4 04	 add	 esp, 4
  0007e	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00081	83 7d b8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00085	74 0d		 je	 SHORT $LN3@Init
  00087	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0008a	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  0008f	89 45 b4	 mov	 DWORD PTR tv83[ebp], eax
  00092	eb 07		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00094	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@Init:
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d b4	 mov	 ecx, DWORD PTR tv83[ebp]
  000a1	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 473  :     }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 460  :     __CLR_OR_THIS_CALL ios_base() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 451  :     virtual __CLR_OR_THIS_CALL ~ios_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 452  :         _Ios_base_dtor(this);

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003d	83 c4 04	 add	 esp, 4

; 453  :     }

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 372  :     _NODISCARD locale __CLR_OR_THIS_CALL getloc() const { // get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 373  :         return *_Ploc;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale
  00022	8b 55 b8	 mov	 edx, DWORD PTR $T1[ebp]
  00025	83 ca 01	 or	 edx, 1
  00028	89 55 b8	 mov	 DWORD PTR $T1[ebp], edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 374  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Oldwidth$ = -12					; size = 8
_this$ = -4						; size = 4
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 366  :     streamsize __CLR_OR_THIS_CALL width(streamsize _Newwidth) { // set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 367  :         const streamsize _Oldwidth = _Wide;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00012	89 4d f4	 mov	 DWORD PTR __Oldwidth$[ebp], ecx
  00015	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00018	89 55 f8	 mov	 DWORD PTR __Oldwidth$[ebp+4], edx

; 368  :         _Wide                      = _Newwidth;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __Newwidth$[ebp]
  00021	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00024	8b 55 0c	 mov	 edx, DWORD PTR __Newwidth$[ebp+4]
  00027	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 369  :         return _Oldwidth;

  0002a	8b 45 f4	 mov	 eax, DWORD PTR __Oldwidth$[ebp]
  0002d	8b 55 f8	 mov	 edx, DWORD PTR __Oldwidth$[ebp+4]

; 370  :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 362  :     _NODISCARD streamsize __CLR_OR_THIS_CALL width() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 363  :         return _Wide;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00012	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 364  :     }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 325  :     _NODISCARD fmtflags __CLR_OR_THIS_CALL flags() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 326  :         return _Fmtfl;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 327  :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?eof@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -69						; size = 1
_this$ = -4						; size = 4
?eof@ios_base@std@@QBE_NXZ PROC				; std::ios_base::eof, COMDAT
; _this$ = ecx

; 298  :     _NODISCARD bool __CLR_OR_THIS_CALL eof() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  :         return rdstate() & ios_base::eofbit;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate
  00014	83 e0 01	 and	 eax, 1
  00017	74 06		 je	 SHORT $LN3@eof
  00019	c6 45 bb 01	 mov	 BYTE PTR tv68[ebp], 1
  0001d	eb 04		 jmp	 SHORT $LN4@eof
$LN3@eof:
  0001f	c6 45 bb 00	 mov	 BYTE PTR tv68[ebp], 0
$LN4@eof:
  00023	8a 45 bb	 mov	 al, BYTE PTR tv68[ebp]

; 300  :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?eof@ios_base@std@@QBE_NXZ ENDP				; std::ios_base::eof
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 294  :     _NODISCARD bool __CLR_OR_THIS_CALL good() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 295  :         return rdstate() == ios_base::goodbit;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate
  00014	85 c0		 test	 eax, eax
  00016	75 09		 jne	 SHORT $LN3@good
  00018	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001f	eb 07		 jmp	 SHORT $LN4@good
$LN3@good:
  00021	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@good:
  00028	8a 45 b8	 mov	 al, BYTE PTR tv67[ebp]

; 296  :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 275  :     _NODISCARD iostate __CLR_OR_THIS_CALL rdstate() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :         return _Mystate;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 277  :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 265  :     void __CLR_OR_THIS_CALL clear(iostate _State = goodbit) { // set state to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :         clear(_State, false);

  0000c	6a 00		 push	 0
  0000e	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 267  :     }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -104						; size = 8
$T2 = -96						; size = 20
__Msg$3 = -12						; size = 4
__Filtered$ = -8					; size = 4
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 243  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 244  :         _State &= _Statmask;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000f	83 e0 17	 and	 eax, 23			; 00000017H
  00012	89 45 08	 mov	 DWORD PTR __State$[ebp], eax

; 245  :         _Mystate             = _State;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  0001b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 246  :         const auto _Filtered = _State & _Except;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00024	23 48 10	 and	 ecx, DWORD PTR [eax+16]
  00027	89 4d f8	 mov	 DWORD PTR __Filtered$[ebp], ecx

; 247  :         if (_Filtered) {

  0002a	74 63		 je	 SHORT $LN8@clear

; 248  :             if (_Reraise) {

  0002c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Reraise$[ebp]
  00030	85 c0		 test	 eax, eax
  00032	74 09		 je	 SHORT $LN3@clear

; 249  :                 _RERAISE;

  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 250  :             }
; 251  : 
; 252  :             const char* _Msg;
; 253  :             if (_Filtered & ios_base::badbit) {

  0003d	8b 45 f8	 mov	 eax, DWORD PTR __Filtered$[ebp]
  00040	83 e0 04	 and	 eax, 4
  00043	74 09		 je	 SHORT $LN4@clear

; 254  :                 _Msg = "ios_base::badbit set";

  00045	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0004c	eb 18		 jmp	 SHORT $LN5@clear
$LN4@clear:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Filtered$[ebp]
  00051	83 e0 02	 and	 eax, 2
  00054	74 09		 je	 SHORT $LN6@clear

; 256  :                 _Msg = "ios_base::failbit set";

  00056	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@

; 257  :             } else {

  0005d	eb 07		 jmp	 SHORT $LN5@clear
$LN6@clear:

; 258  :                 _Msg = "ios_base::eofbit set";

  0005f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
$LN5@clear:

; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  00066	6a 01		 push	 1
  00068	8d 45 98	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00071	83 c4 08	 add	 esp, 8
  00074	50		 push	 eax
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __Msg$3[ebp]
  00078	51		 push	 ecx
  00079	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0007c	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00081	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00086	8d 55 a0	 lea	 edx, DWORD PTR $T2[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@clear:

; 262  :         }
; 263  :     }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1failure@ios_base@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7failure@ios_base@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1system_error@std@@UAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7failure@ios_base@std@@6B@
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z PROC	; std::_Adl_verify_range<char *,char const *>, COMDAT

; 1192 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1193 :     // check that [_First, _Last) forms an iterator range
; 1194 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1195 :         _Verify_range(_First, _Last);
; 1196 :     }
; 1197 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z ENDP	; std::_Adl_verify_range<char *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 4
__Psave_guard$3 = -36					; size = 4
__Pfmod$4 = -32						; size = 4
__Pf$5 = -28						; size = 4
__Id$6 = -24						; size = 4
__Psave$7 = -20						; size = 4
__Lock$8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 426  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 427  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 428  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	89 45 ec	 mov	 DWORD PTR __Psave$7[ebp], eax

; 429  : 
; 430  :     const size_t _Id         = _Facet::id;

  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00046	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int
  0004b	89 45 e8	 mov	 DWORD PTR __Id$6[ebp], eax

; 431  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Id$6[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00055	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  0005a	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 432  : 
; 433  :     if (!_Pf) {

  0005d	83 7d e4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  00061	75 7b		 jne	 SHORT $LN2@use_facet

; 434  :         if (_Psave) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  00067	74 08		 je	 SHORT $LN3@use_facet

; 435  :             _Pf = _Psave; // lazy facet already allocated

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0006c	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax
  0006f	eb 6d		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 436  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  00071	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00074	50		 push	 eax
  00075	8d 4d ec	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  0007e	83 c4 08	 add	 esp, 8
  00081	83 f8 ff	 cmp	 eax, -1
  00084	75 07		 jne	 SHORT $LN5@use_facet

; 437  : #if _HAS_EXCEPTIONS
; 438  :             _Throw_bad_cast(); // lazy disallowed

  00086	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 439  : #else // _HAS_EXCEPTIONS
; 440  :             _CSTD abort(); // lazy disallowed
; 441  : #endif // _HAS_EXCEPTIONS
; 442  :         } else { // queue up lazy facet for destruction

  0008b	eb 51		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 443  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  0008d	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  00090	89 45 e0	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 444  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  00093	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  00096	50		 push	 eax
  00097	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  0009a	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  0009f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 445  : 
; 446  : #if defined(_M_CEE)
; 447  :             _Facet_Register_m(_Pfmod);
; 448  : #else // defined(_M_CEE)
; 449  :             _Facet_Register(_Pfmod);

  000a3	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000ac	83 c4 04	 add	 esp, 4

; 450  : #endif // defined(_M_CEE)
; 451  : 
; 452  :             _Pfmod->_Incref();

  000af	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000b2	8b 10		 mov	 edx, DWORD PTR [eax]
  000b4	8b 4d e0	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	ff d0		 call	 eax

; 453  :             _Facetptr<_Facet>::_Psave = _Psave;

  000bc	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 454  :             _Pf                       = _Psave;

  000c4	8b 45 ec	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000c7	89 45 e4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 455  : 
; 456  :             (void) _Psave_guard.release();

  000ca	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000cd	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 457  :         }

  000d2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d6	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000d9	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 458  :     }
; 459  : 
; 460  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000de	8b 45 e4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  000e1	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000f3	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
$LN7@use_facet:

; 461  :     _END_LOCK()
; 462  : } // end of use_facet body

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$ctype@D@std@@MAE@XZ ; std::ctype<char>::~ctype<char>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 18		 push	 24			; 00000018H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2830 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2831 :         _Adl_verify_range(_First, _Last);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  00019	83 c4 08	 add	 esp, 8

; 2832 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001f	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 14	 mov	 edx, DWORD PTR __Dest$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2833 :         return _Last;

  00033	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 2834 :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2825 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2826 :         return _Ch;

  0000c	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2827 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2819 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2820 :         _Adl_verify_range(_First, _Last);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  00019	83 c4 08	 add	 esp, 8

; 2821 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001f	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2822 :         return _Last;

  00033	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 2823 :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2814 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2815 :         return _Byte;

  0000c	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2816 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2805 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2806 :         _Adl_verify_range(_First, _Last);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z ; std::_Adl_verify_range<char *,char const *>
  00019	83 c4 08	 add	 esp, 8

; 2807 :         for (; _First != _Last; ++_First) {

  0001c	eb 09		 jmp	 SHORT $LN4@do_toupper
$LN2@do_toupper:
  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@do_toupper:
  00027	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0002d	74 1d		 je	 SHORT $LN3@do_toupper

; 2808 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c0 08	 add	 eax, 8
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00039	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 __Toupper
  00042	83 c4 08	 add	 esp, 8
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00048	88 01		 mov	 BYTE PTR [ecx], al

; 2809 :         }

  0004a	eb d2		 jmp	 SHORT $LN2@do_toupper
$LN3@do_toupper:

; 2810 : 
; 2811 :         return _First;

  0004c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 2812 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2800 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2801 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	50		 push	 eax
  00013	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	83 c4 08	 add	 esp, 8

; 2802 :     }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2791 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2792 :         _Adl_verify_range(_First, _Last);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PADPBD@std@@YAXABQADABQBD@Z ; std::_Adl_verify_range<char *,char const *>
  00019	83 c4 08	 add	 esp, 8

; 2793 :         for (; _First != _Last; ++_First) {

  0001c	eb 09		 jmp	 SHORT $LN4@do_tolower
$LN2@do_tolower:
  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@do_tolower:
  00027	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0002d	74 1d		 je	 SHORT $LN3@do_tolower

; 2794 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c0 08	 add	 eax, 8
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00039	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 __Tolower
  00042	83 c4 08	 add	 esp, 8
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00048	88 01		 mov	 BYTE PTR [ecx], al

; 2795 :         }

  0004a	eb d2		 jmp	 SHORT $LN2@do_tolower
$LN3@do_tolower:

; 2796 : 
; 2797 :         return _First;

  0004c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 2798 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2786 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2787 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	50		 push	 eax
  00013	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	83 c4 08	 add	 esp, 8

; 2788 :     }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2776 :     void __CLR_OR_THIS_CALL _Tidy() noexcept { // free any allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2777 :         if (0 < _Ctype._Delfl) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 11		 jle	 SHORT $LN2@Tidy

; 2778 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 04	 add	 esp, 4
  00024	eb 1e		 jmp	 SHORT $LN3@Tidy
$LN2@Tidy:

; 2779 :         } else if (_Ctype._Delfl < 0) {

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002d	7d 15		 jge	 SHORT $LN3@Tidy

; 2780 :             delete[] _Ctype._Table;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00035	89 4d b8	 mov	 DWORD PTR $T1[ebp], ecx
  00038	8b 55 b8	 mov	 edx, DWORD PTR $T1[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00041	83 c4 04	 add	 esp, 4
$LN3@Tidy:

; 2781 :         }
; 2782 : 
; 2783 :         _CSTD free(_Ctype._LocaleName);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _free
  00050	83 c4 04	 add	 esp, 4

; 2784 :     }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -84						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2772 :     void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj) { // initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2773 :         _Ctype = _Lobj._Getctype();

  0000c	8d 45 ac	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	89 11		 mov	 DWORD PTR [ecx], edx
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 2774 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2768 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$ctype@D@std@@6B@

; 2769 :         _Tidy();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IAEXXZ ; std::ctype<char>::_Tidy

; 2770 :     }

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
tv89 = -152						; size = 4
tv128 = -148						; size = 4
tv131 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -136						; size = 52
$T4 = -84						; size = 4
$T5 = -80						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2749 :     static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 2750 :         if (_Ppf && !*_Ppf) {

  00035	83 7d 08 00	 cmp	 DWORD PTR __Ppf$[ebp], 0
  00039	0f 84 be 00 00
	00		 je	 $LN2@Getcat
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  00042	83 38 00	 cmp	 DWORD PTR [eax], 0
  00045	0f 85 b2 00 00
	00		 jne	 $LN2@Getcat

; 2751 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  0004b	6a 18		 push	 24			; 00000018H
  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4
  00055	89 45 ac	 mov	 DWORD PTR $T4[ebp], eax
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	83 7d ac 00	 cmp	 DWORD PTR $T4[ebp], 0
  00063	74 52		 je	 SHORT $LN4@Getcat
  00065	6a 00		 push	 0
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  0006a	e8 00 00 00 00	 call	 ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str
  0006f	50		 push	 eax
  00070	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0007b	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv131[ebp], eax
  00081	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  00087	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00091	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00097	83 c9 01	 or	 ecx, 1
  0009a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000a0	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv128[ebp]
  000a6	52		 push	 edx
  000a7	8b 4d ac	 mov	 ecx, DWORD PTR $T4[ebp]
  000aa	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  000af	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  000b5	eb 0a		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000b7	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN5@Getcat:
  000c1	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000c7	89 45 b0	 mov	 DWORD PTR $T5[ebp], eax
  000ca	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR __Ppf$[ebp]
  000d4	8b 55 b0	 mov	 edx, DWORD PTR $T5[ebp]
  000d7	89 11		 mov	 DWORD PTR [ecx], edx
  000d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  000e6	83 e0 01	 and	 eax, 1
  000e9	74 12		 je	 SHORT $LN2@Getcat
  000eb	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000f2	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000f8	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 2752 :         }
; 2753 : 
; 2754 :         return _X_CTYPE;

  000fd	b8 02 00 00 00	 mov	 eax, 2

; 2755 :     }

  00102	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00105	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010c	59		 pop	 ecx
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 ac	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001e	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00025	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00030	c3		 ret	 0
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2745 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$ctype@D@std@@6B@

; 2746 :         _Init(_Lobj);

  00047	8b 45 08	 mov	 eax, DWORD PTR __Lobj$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<char>::_Init

; 2747 :     }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2708 :     _Elem __CLR_OR_THIS_CALL widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2709 :         return do_widen(_Byte);

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR __Byte$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001c	ff d0		 call	 eax

; 2710 :     }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?is@?$ctype@D@std@@QBE_NFD@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
_this$ = -4						; size = 4
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 1
?is@?$ctype@D@std@@QBE_NFD@Z PROC			; std::ctype<char>::is, COMDAT
; _this$ = ecx

; 2656 :     bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const { // test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2657 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  0000c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00016	0f bf 04 42	 movsx	 eax, WORD PTR [edx+eax*2]
  0001a	0f bf 4d 08	 movsx	 ecx, WORD PTR __Maskval$[ebp]
  0001e	23 c1		 and	 eax, ecx
  00020	74 09		 je	 SHORT $LN3@is
  00022	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN4@is
$LN3@is:
  0002b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@is:
  00032	8a 45 b8	 mov	 al, BYTE PTR tv73[ebp]

; 2658 :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?is@?$ctype@D@std@@QBE_NFD@Z ENDP			; std::ctype<char>::is
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2411 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2409 :     __CLR_OR_THIS_CALL ctype_base(size_t _Refs = 0) : locale::facet(_Refs) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\utility
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
$T1 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT

; 67   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 68   :     // return smaller of _Left and _Right
; 69   :     return _Right < _Left ? _Right : _Left;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 08		 jge	 SHORT $LN3@min
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  0001b	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00020	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@min:
  00023	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  00026	89 55 bc	 mov	 DWORD PTR $T1[ebp], edx
  00029	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]

; 70   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 1192 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1193 :     // check that [_First, _Last) forms an iterator range
; 1194 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1195 :         _Verify_range(_First, _Last);
; 1196 :     }
; 1197 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gcodecvt_base@std@@UAEPAXI@Z PROC			; std::codecvt_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gcodecvt_base@std@@UAEPAXI@Z ENDP			; std::codecvt_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_encoding@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_encoding, COMDAT
; _this$ = ecx

; 700  :     virtual int __CLR_OR_THIS_CALL do_encoding() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         return 1; // -1 ==> state dependent, 0 ==> varying length

  0000c	b8 01 00 00 00	 mov	 eax, 1

; 702  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?do_encoding@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_encoding
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_max_length@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_max_length, COMDAT
; _this$ = ecx

; 695  :     virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 696  :         // return maximum length required for a conversion (from codecvt)
; 697  :         return 1;

  0000c	b8 01 00 00 00	 mov	 eax, 1

; 698  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?do_max_length@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_max_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_always_noconv@codecvt_base@std@@MBE_NXZ PROC	; std::codecvt_base::do_always_noconv, COMDAT
; _this$ = ecx

; 690  :     virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 691  :         // return true if conversions never change input (from codecvt)
; 692  :         return false;

  0000c	32 c0		 xor	 al, al

; 693  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?do_always_noconv@codecvt_base@std@@MBE_NXZ ENDP	; std::codecvt_base::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1codecvt_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1codecvt_base@std@@UAE@XZ PROC			; std::codecvt_base::~codecvt_base, COMDAT
; _this$ = ecx

; 687  :     __CLR_OR_THIS_CALL ~codecvt_base() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7codecvt_base@std@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1codecvt_base@std@@UAE@XZ ENDP			; std::codecvt_base::~codecvt_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?always_noconv@codecvt_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?always_noconv@codecvt_base@std@@QBE_NXZ PROC		; std::codecvt_base::always_noconv, COMDAT
; _this$ = ecx

; 673  :     bool __CLR_OR_THIS_CALL always_noconv() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 674  :         // return true if conversions never change input (from codecvt)
; 675  :         return do_always_noconv();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00017	ff d0		 call	 eax

; 676  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?always_noconv@codecvt_base@std@@QBE_NXZ ENDP		; std::codecvt_base::always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0codecvt_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0codecvt_base@std@@QAE@I@Z PROC			; std::codecvt_base::codecvt_base, COMDAT
; _this$ = ecx

; 671  :     __CLR_OR_THIS_CALL codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7codecvt_base@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0codecvt_base@std@@QAE@I@Z ENDP			; std::codecvt_base::codecvt_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv71 = -80						; size = 4
__Ptr0$ = -12						; size = 4
__Facptr$ = -8						; size = 4
_this$ = -4						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00015	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00018	73 14		 jae	 SHORT $LN6@Getfacet
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00023	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  00026	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00029	89 4d b0	 mov	 DWORD PTR tv71[ebp], ecx
  0002c	eb 07		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0002e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00035	8b 55 b0	 mov	 edx, DWORD PTR tv71[ebp]
  00038	89 55 f8	 mov	 DWORD PTR __Facptr$[ebp], edx

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  0003b	83 7d f8 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0003f	75 0e		 jne	 SHORT $LN3@Getfacet
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  0004b	85 d2		 test	 edx, edx
  0004d	75 05		 jne	 SHORT $LN2@Getfacet
$LN3@Getfacet:

; 376  :             return _Facptr; // found facet or not transparent

  0004f	8b 45 f8	 mov	 eax, DWORD PTR __Facptr$[ebp]
  00052	eb 23		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  00054	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00059	89 45 f4	 mov	 DWORD PTR __Ptr0$[ebp], eax

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  0005c	8b 45 f4	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00062	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00065	73 0e		 jae	 SHORT $LN4@Getfacet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  00067	8b 45 f4	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  0006a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006d	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00070	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00073	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN4@Getfacet:

; 383  :         }
; 384  : 
; 385  :         return nullptr; // no entry in current locale

  00075	33 c0		 xor	 eax, eax
$LN1@Getfacet:

; 386  :     }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 369  :     _Ret_z_ const char* c_str() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	74 13		 je	 SHORT $LN3@c_str
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	83 c1 18	 add	 ecx, 24			; 00000018H
  0001e	e8 00 00 00 00	 call	 ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str
  00023	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00026	eb 07		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  00028	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN4@c_str:
  0002f	8b 45 b8	 mov	 eax, DWORD PTR tv70[ebp]

; 371  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 350  :     ~locale() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 351  :         if (_Ptr) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	74 36		 je	 SHORT $LN3@locale

; 352  :             delete _Ptr->_Decref();

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00020	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00023	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00026	ff d2		 call	 edx
  00028	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0002b	83 7d b8 00	 cmp	 DWORD PTR $T1[ebp], 0
  0002f	74 13		 je	 SHORT $LN4@locale
  00031	6a 01		 push	 1
  00033	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  00036	8b 10		 mov	 edx, DWORD PTR [eax]
  00038	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	8b 02		 mov	 eax, DWORD PTR [edx]
  0003d	ff d0		 call	 eax
  0003f	89 45 b4	 mov	 DWORD PTR tv84[ebp], eax
  00042	eb 07		 jmp	 SHORT $LN3@locale
$LN4@locale:
  00044	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN3@locale:

; 353  :         }
; 354  :     }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 271  :     locale() noexcept : _Ptr(_Init(true)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	6a 01		 push	 1
  0002d	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00032	83 c4 04	 add	 esp, 4
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 268  :         _Ptr->_Incref();

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00026	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00029	ff d2		 call	 edx

; 269  :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 155  :         virtual __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 153  :         {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Facet_base@std@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Initrefs$[ebp]
  00023	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 153  :         {}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 139  :         virtual _Facet_base* __CLR_OR_THIS_CALL _Decref() noexcept override { // decrement use count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :             if (_MT_DECR(_Myrefs) == 0) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	83 c9 ff	 or	 ecx, -1
  00015	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00019	49		 dec	 ecx
  0001a	75 05		 jne	 SHORT $LN2@Decref

; 141  :                 return this;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	eb 02		 jmp	 SHORT $LN3@Decref
$LN2@Decref:

; 142  :             }
; 143  : 
; 144  :             return nullptr;

  00021	33 c0		 xor	 eax, eax
$LN3@Decref:

; 145  :         }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 135  :         virtual void __CLR_OR_THIS_CALL _Incref() noexcept override { // increment use count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  :             _MT_INCR(_Myrefs);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	f0 ff 00	 lock	  inc	 DWORD PTR [eax]

; 137  :         }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -8						; size = 4
_this$ = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 104  :         __CLR_OR_THIS_CALL operator size_t() { // get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 32		 jne	 SHORT $LN2@operator

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00014	6a 00		 push	 0
  00016	8d 4d f8	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 38 00	 cmp	 DWORD PTR [eax], 0
  00024	75 18		 jne	 SHORT $LN3@operator

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0002b	83 c0 01	 add	 eax, 1
  0002e	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@operator:

; 109  :                 }
; 110  :                 _END_LOCK()

  0003e	8d 4d f8	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00041	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 111  :             }
; 112  :             return _Id;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 00		 mov	 eax, DWORD PTR [eax]

; 113  :         }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 99   :         __CLR_OR_THIS_CALL id(size_t _Val = 0) : _Id(_Val) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 122  :         if (_Myptr) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 0e		 je	 SHORT $LN2@Tidy

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _free
  0001f	83 c4 04	 add	 esp, 4
$LN2@Tidy:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 131  :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  :         _Tidy();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy

; 102  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	33 c0		 xor	 eax, eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 122  :         if (_Myptr) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 0e		 je	 SHORT $LN2@Tidy

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _free
  0001f	83 c4 04	 add	 esp, 4
$LN2@Tidy:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 131  :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 108  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  :         return _Myptr ? _Myptr : &_Nul;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 0a		 je	 SHORT $LN3@c_str
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	89 55 b8	 mov	 DWORD PTR tv68[ebp], edx
  0001c	eb 09		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c0 04	 add	 eax, 4
  00024	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
$LN4@c_str:
  00027	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]

; 110  :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  :         _Tidy();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy

; 102  :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -100						; size = 16
$T2 = -84						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 198  :     _Ctypevec __CLR_OR_THIS_CALL _Getctype() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 199  :         return ::_Getctype();

  0000c	8d 45 9c	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 __Getctype
  00015	83 c4 04	 add	 esp, 4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d ac	 mov	 DWORD PTR $T2[ebp], ecx
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00020	89 55 b0	 mov	 DWORD PTR $T2[ebp+4], edx
  00023	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00026	89 4d b4	 mov	 DWORD PTR $T2[ebp+8], ecx
  00029	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002c	89 55 b8	 mov	 DWORD PTR $T2[ebp+12], edx
  0002f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00032	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  00035	89 08		 mov	 DWORD PTR [eax], ecx
  00037	8b 55 b0	 mov	 edx, DWORD PTR $T2[ebp+4]
  0003a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003d	8b 4d b4	 mov	 ecx, DWORD PTR $T2[ebp+8]
  00040	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00043	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp+12]
  00046	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00049	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 200  :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 178  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 179  :         _Locinfo_dtor(this);

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
  00034	83 c4 04	 add	 esp, 4

; 180  :     }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0003d	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 24	 add	 ecx, 36			; 00000024H
  00048	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00053	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 c1 14	 add	 ecx, 20			; 00000014H
  0005e	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00069	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 04	 add	 ecx, 4
  00074	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
  00093	cc		 int	 3
  00094	cc		 int	 3
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 155  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 152  :         : _Lock(_LOCK_LOCALE)

  0002b	6a 00		 push	 0
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 155  :     {

  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 04	 add	 ecx, 4
  00042	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00056	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 14	 add	 ecx, 20			; 00000014H
  00060	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00065	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00069	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0006f	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00074	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 24	 add	 ecx, 36			; 00000024H
  0007e	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00083	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0008d	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00092	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 156  :         if (_Pch) {

  00096	83 7d 08 00	 cmp	 DWORD PTR __Pch$[ebp], 0
  0009a	74 12		 je	 SHORT $LN2@Locinfo

; 157  :             _Locinfo_ctor(this, _Pch);

  0009c	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  000a9	83 c4 08	 add	 esp, 8

; 158  :             return;

  000ac	eb 0a		 jmp	 SHORT $LN1@Locinfo
$LN2@Locinfo:

; 159  :         }
; 160  : 
; 161  :         _Xruntime_error("bad locale name");

  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  000b3	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN1@Locinfo:

; 162  :     }

  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@Locinfo:
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 28   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -76						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 64   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 65   :     _THROW(bad_cast{});

  00009	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  00011	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00016	8d 45 b4	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 66   : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 135  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 134  :         : exception("bad cast", 1)

  0000c	6a 01		 push	 1
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast@
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 135  :     {

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 136  :     }

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
$T1 = -84						; size = 4
__Target_iter$ = -16					; size = 4
__Target$ = -12						; size = 8
__Pointer_count$ = -4					; size = 4
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 562  : _NODISCARD const _Ty& _Immortalize_memcpy_image() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 563  :     // return reference to a memcpy'd default-initialized _Ty
; 564  :     // pre: A default-initialized _Ty sets the first pointer-sized field to nonzero
; 565  :     constexpr size_t _Pointer_count = sizeof(_Ty) / sizeof(uintptr_t);

  00009	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __Pointer_count$[ebp], 2

; 566  :     static atomic<uintptr_t> _Storage[_Pointer_count];
; 567  :     static_assert(sizeof(_Storage) == sizeof(_Ty), "Bad storage size");
; 568  :     static_assert(alignof(decltype(_Storage)) >= alignof(_Ty), "Bad alignment assumptions");
; 569  :     if (_Storage[0].load(memory_order_acquire) != 0) {

  00010	6a 02		 push	 2
  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	6b c8 00	 imul	 ecx, eax, 0
  0001a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
  00020	e8 00 00 00 00	 call	 ?load@?$_Atomic_storage@I$03@std@@QBEIW4memory_order@2@@Z ; std::_Atomic_storage<unsigned int,4>::load
  00025	85 c0		 test	 eax, eax
  00027	74 07		 je	 SHORT $LN2@Immortaliz

; 570  :         return reinterpret_cast<_Ty&>(_Storage);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
  0002e	eb 63		 jmp	 SHORT $LN3@Immortaliz
$LN2@Immortaliz:

; 571  :     }
; 572  : 
; 573  :     const _Ty _Target;

  00030	8d 4d f4	 lea	 ecx, DWORD PTR __Target$[ebp]
  00033	e8 00 00 00 00	 call	 ??0_Iostream_error_category2@std@@QAE@XZ ; std::_Iostream_error_category2::_Iostream_error_category2

; 574  :     const auto _Target_iter = reinterpret_cast<const uintptr_t*>(_STD addressof(_Target));

  00038	8d 45 f4	 lea	 eax, DWORD PTR __Target$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@$$CBV_Iostream_error_category2@std@@@std@@YAPBV_Iostream_error_category2@0@ABV10@@Z ; std::addressof<std::_Iostream_error_category2 const >
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f0	 mov	 DWORD PTR __Target_iter$[ebp], eax

; 575  :     _CSTD memcpy(_Storage + 1, _Target_iter + 1, sizeof(_Ty) - sizeof(uintptr_t));

  00047	6a 04		 push	 4
  00049	8b 45 f0	 mov	 eax, DWORD PTR __Target_iter$[ebp]
  0004c	83 c0 04	 add	 eax, 4
  0004f	50		 push	 eax
  00050	68 04 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A+4
  00055	e8 00 00 00 00	 call	 _memcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  :     _Storage[0].store(_Target_iter[0], memory_order_release);

  0005d	6a 03		 push	 3
  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8b 55 f0	 mov	 edx, DWORD PTR __Target_iter$[ebp]
  0006a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0006d	50		 push	 eax
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	6b c9 00	 imul	 ecx, ecx, 0
  00076	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
  0007c	e8 00 00 00 00	 call	 ?store@?$_Atomic_storage@I$03@std@@QAEXIW4memory_order@2@@Z ; std::_Atomic_storage<unsigned int,4>::store

; 577  :     return reinterpret_cast<_Ty&>(_Storage);

  00081	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A
  00088	8d 4d f4	 lea	 ecx, DWORD PTR __Target$[ebp]
  0008b	e8 00 00 00 00	 call	 ??1_Iostream_error_category2@std@@UAE@XZ
  00090	8b 45 ac	 mov	 eax, DWORD PTR $T1[ebp]
$LN3@Immortaliz:

; 578  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G_Iostream_error_category2@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Iostream_error_category2@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1_Iostream_error_category2@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category2@std@@UAE@XZ PROC		; std::_Iostream_error_category2::~_Iostream_error_category2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1error_category@std@@UAE@XZ ; std::error_category::~error_category
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1_Iostream_error_category2@std@@UAE@XZ ENDP		; std::_Iostream_error_category2::~_Iostream_error_category2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -76						; size = 4
__Iostream_error_length$2 = -8				; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT
; _this$ = ecx

; 475  :     _NODISCARD virtual string message(int _Errcode) const override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 476  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00013	83 7d 0c 01	 cmp	 DWORD PTR __Errcode$[ebp], 1
  00017	75 26		 jne	 SHORT $LN2@message

; 477  :             static constexpr char _Iostream_error[] = "iostream stream error";
; 478  :             constexpr size_t _Iostream_error_length = sizeof(_Iostream_error) - 1; // TRANSITION, DevCom-906503

  00019	c7 45 f8 15 00
	00 00		 mov	 DWORD PTR __Iostream_error_length$2[ebp], 21 ; 00000015H

; 479  :             return string(_Iostream_error, _Iostream_error_length);

  00020	6a 15		 push	 21			; 00000015H
  00022	68 00 00 00 00	 push	 OFFSET ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002f	8b 45 b4	 mov	 eax, DWORD PTR $T1[ebp]
  00032	83 c8 01	 or	 eax, 1
  00035	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	eb 23		 jmp	 SHORT $LN1@message

; 480  :         } else {

  0003d	eb 21		 jmp	 SHORT $LN1@message
$LN2@message:

; 481  :             return _Syserror_map(_Errcode);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00054	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00057	83 c9 01	 or	 ecx, 1
  0005a	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  0005d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@message:

; 482  :         }
; 483  :     }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category2@std@@UBEPBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT
; _this$ = ecx

; 471  :     _NODISCARD virtual const char* name() const noexcept override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 472  :         return "iostream";

  0000c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 473  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?name@_Iostream_error_category2@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0_Iostream_error_category2@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category2@std@@QAE@XZ PROC		; std::_Iostream_error_category2::_Iostream_error_category2, COMDAT
; _this$ = ecx

; 469  :     constexpr _Iostream_error_category2() noexcept : error_category(_Iostream_addr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	6a 05		 push	 5
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0error_category@std@@IAE@I@Z ; std::error_category::error_category
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Iostream_error_category2@std@@6B@
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Iostream_error_category2@std@@QAE@XZ ENDP		; std::_Iostream_error_category2::_Iostream_error_category2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1system_error@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0_System_error@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7system_error@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_System_error@std@@UAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
$T2 = -108						; size = 24
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 410  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00031	50		 push	 eax
  00032	8d 4d 94	 lea	 ecx, DWORD PTR $T2[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	8d 4d 94	 lea	 ecx, DWORD PTR $T2[ebp]
  00044	51		 push	 ecx
  00045	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8d 4d 94	 lea	 ecx, DWORD PTR $T2[ebp]
  0005f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00064	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7system_error@std@@6B@
  0006d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_System_error@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_System_error@std@@6B@
  00021	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00024	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00027	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00030	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1runtime_error@std@@UAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
tv137 = -120						; size = 4
tv135 = -116						; size = 4
$T2 = -112						; size = 24
$T3 = -88						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 395  :     _System_error(error_code _Errcode, const string& _Message)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 396  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  0002e	83 ec 18	 sub	 esp, 24			; 00000018H
  00031	8b cc		 mov	 ecx, esp
  00033	89 65 a8	 mov	 DWORD PTR $T3[ebp], esp
  00036	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR __Errcode$[ebp]
  00046	52		 push	 edx
  00047	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
  00050	83 c4 24	 add	 esp, 36			; 00000024H
  00053	89 45 8c	 mov	 DWORD PTR tv135[ebp], eax
  00056	8b 4d 8c	 mov	 ecx, DWORD PTR tv135[ebp]
  00059	89 4d 88	 mov	 DWORD PTR tv137[ebp], ecx
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	8b 55 88	 mov	 edx, DWORD PTR tv137[ebp]
  00066	52		 push	 edx
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0006f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00079	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_System_error@std@@6B@
  00087	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  0008d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00090	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  00093	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00096	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	33 cd		 xor	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
tv84 = -116						; size = 4
tv79 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 24
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 385  :     static string _Makestr(error_code _Errcode, string _Message) { // compose error message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 386  :         if (!_Message.empty()) {

  00039	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  0003c	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 0d		 jne	 SHORT $LN2@Makestr

; 387  :             _Message.append(": ");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  0004d	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00050	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 388  :         }
; 389  : 
; 390  :         _Message.append(_Errcode.message());

  00055	8d 45 98	 lea	 eax, DWORD PTR $T3[ebp]
  00058	50		 push	 eax
  00059	8d 4d 0c	 lea	 ecx, DWORD PTR __Errcode$[ebp]
  0005c	e8 00 00 00 00	 call	 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
  00061	89 45 90	 mov	 DWORD PTR tv79[ebp], eax
  00064	8b 4d 90	 mov	 ecx, DWORD PTR tv79[ebp]
  00067	89 4d 8c	 mov	 DWORD PTR tv84[ebp], ecx
  0006a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006e	8b 55 8c	 mov	 edx, DWORD PTR tv84[ebp]
  00071	52		 push	 edx
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0007a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007e	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  00081	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 391  :         return _Message;

  00086	8d 45 14	 lea	 eax, DWORD PTR __Message$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00092	8b 4d 94	 mov	 ecx, DWORD PTR $T2[ebp]
  00095	83 c9 01	 or	 ecx, 1
  00098	89 4d 94	 mov	 DWORD PTR $T2[ebp], ecx
  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  000a5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 392  :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1:
  00008	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
tv78 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 248  :     _NODISCARD friend bool operator==(const error_condition& _Left, const error_condition& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 249  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000c	e8 00 00 00 00	 call	 ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00015	e8 00 00 00 00	 call	 ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
  0001a	8b c8		 mov	 ecx, eax
  0001c	e8 00 00 00 00	 call	 ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==
  00021	0f b6 c0	 movzx	 eax, al
  00024	85 c0		 test	 eax, eax
  00026	74 1f		 je	 SHORT $LN3@operator
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	e8 00 00 00 00	 call	 ?value@error_condition@std@@QBEHXZ ; std::error_condition::value
  00030	8b f0		 mov	 esi, eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00035	e8 00 00 00 00	 call	 ?value@error_condition@std@@QBEHXZ ; std::error_condition::value
  0003a	3b f0		 cmp	 esi, eax
  0003c	75 09		 jne	 SHORT $LN3@operator
  0003e	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00045	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00047	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN4@operator:
  0004e	8a 45 bc	 mov	 al, BYTE PTR tv78[ebp]

; 250  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 235  :     _NODISCARD const error_category& category() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :         return *_Mycat;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 237  :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 231  :     _NODISCARD int value() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 232  :         return _Myval;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 233  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 208  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
tv67 = -76						; size = 4
$T1 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 159  :     _NODISCARD string message() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 160  :         return category().message(value());

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
  0001b	89 45 b4	 mov	 DWORD PTR tv67[ebp], eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?value@error_code@std@@QBEHXZ ; std::error_code::value
  00026	50		 push	 eax
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d b4	 mov	 ecx, DWORD PTR tv67[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8b 4d b4	 mov	 ecx, DWORD PTR tv67[ebp]
  00033	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00036	ff d0		 call	 eax
  00038	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	83 c9 01	 or	 ecx, 1
  0003e	89 4d b8	 mov	 DWORD PTR $T1[ebp], ecx
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 161  :     }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 153  :     _NODISCARD const error_category& category() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :         return *_Mycat;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 155  :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 149  :     _NODISCARD int value() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  :         return _Myval;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 151  :     }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 126  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??0error_category@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Addr_$ = 8						; size = 4
??0error_category@std@@IAE@I@Z PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 107  :     constexpr explicit error_category(const uintptr_t _Addr_) noexcept : _Addr(_Addr_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Addr_$[ebp]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0error_category@std@@IAE@I@Z ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 89   :     _NODISCARD bool operator==(const error_category& _Right) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   :         return _Addr == _Right._Addr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00012	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00015	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00018	75 09		 jne	 SHORT $LN3@operator
  0001a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00021	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00023	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@operator:
  0002a	8a 45 b8	 mov	 al, BYTE PTR tv67[ebp]

; 91   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 333  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return *this == _Code.category() && _Code.value() == _Errval;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Code$[ebp]
  0000f	e8 00 00 00 00	 call	 ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	74 16		 je	 SHORT $LN3@equivalent
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Code$[ebp]
  00027	e8 00 00 00 00	 call	 ?value@error_code@std@@QBEHXZ ; std::error_code::value
  0002c	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  0002f	75 09		 jne	 SHORT $LN3@equivalent
  00031	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  00038	eb 07		 jmp	 SHORT $LN4@equivalent
$LN3@equivalent:
  0003a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@equivalent:
  00041	8a 45 b8	 mov	 al, BYTE PTR tv74[ebp]

; 335  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 329  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  :     return default_error_condition(_Errval) == _Cond;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Cond$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Errval$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  00017	52		 push	 edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00023	ff d0		 call	 eax
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??8std@@YA_NABVerror_condition@0@0@Z ; std::operator==
  0002b	83 c4 08	 add	 esp, 8

; 331  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 324  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  :     // make error_condition for error code
; 326  :     return error_condition(_Errval, *this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Errval$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 327  : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 115  : };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 585  : _NODISCARD inline const error_category& iostream_category() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 586  :     return _Immortalize_memcpy_image<_Iostream_error_category2>();

  00009	e8 00 00 00 00	 call	 ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>

; 587  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 348  : _NODISCARD inline error_code make_error_code(io_errc _Errno) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 349  :     return error_code(static_cast<int>(_Errno), _STD iostream_category());

  00009	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  0000e	50		 push	 eax
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Errno$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00016	e8 00 00 00 00	 call	 ??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code
  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 350  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic
;	COMDAT ?_Load_barrier@std@@YAXW4memory_order@1@@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
__Order$ = 8						; size = 4
?_Load_barrier@std@@YAXW4memory_order@1@@Z PROC		; std::_Load_barrier, COMDAT

; 237  : inline void _Load_barrier(const memory_order _Order) noexcept { // implement memory barrier for atomic load functions

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 238  :     switch (_Order) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __Order$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 05	 cmp	 DWORD PTR tv64[ebp], 5
  00013	77 0c		 ja	 SHORT $LN6@Load_barri
  00015	8b 4d bc	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN8@Load_barri[ecx*4]
$LN4@Load_barri:

; 239  :     case memory_order_relaxed:
; 240  :         // no barrier
; 241  :         break;

  0001f	eb 00		 jmp	 SHORT $LN7@Load_barri
$LN6@Load_barri:
$LN7@Load_barri:

; 242  :     default:
; 243  :     case memory_order_release:
; 244  :     case memory_order_acq_rel:
; 245  :         _INVALID_MEMORY_ORDER;
; 246  :         // [[fallthrough]];
; 247  :     case memory_order_consume:
; 248  :     case memory_order_acquire:
; 249  :     case memory_order_seq_cst:
; 250  :         _Compiler_or_memory_barrier();
; 251  :         break;
; 252  :     }
; 253  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN8@Load_barri:
  00028	00 00 00 00	 DD	 $LN4@Load_barri
  0002c	00 00 00 00	 DD	 $LN6@Load_barri
  00030	00 00 00 00	 DD	 $LN6@Load_barri
  00034	00 00 00 00	 DD	 $LN6@Load_barri
  00038	00 00 00 00	 DD	 $LN6@Load_barri
  0003c	00 00 00 00	 DD	 $LN6@Load_barri
?_Load_barrier@std@@YAXW4memory_order@1@@Z ENDP		; std::_Load_barrier
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1runtime_error@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 111  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0000f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBD@Z ; std::exception::exception
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 18		 push	 24			; 00000018H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1347 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1348 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1349 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1344 :         return *this;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1345 :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4328 :     const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4329 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4330 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4324 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4325 :         return _Mypair._Get_first();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4326 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -89						; size = 1
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4299 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4300 :         _Mypair._Myval2._Orphan_all();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 4301 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 35		 je	 SHORT $LN2@Tidy_deall

; 4302 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00042	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 4d ec	 mov	 DWORD PTR __Ptr$4[ebp], ecx

; 4303 :             auto& _Al          = _Getal();

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00052	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4304 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  0005e	83 c4 04	 add	 esp, 4

; 4305 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00067	83 c1 01	 add	 ecx, 1
  0006a	51		 push	 ecx
  0006b	8b 55 ec	 mov	 edx, DWORD PTR __Ptr$4[ebp]
  0006e	52		 push	 edx
  0006f	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00072	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4306 :         }
; 4307 : 
; 4308 :         _Mypair._Myval2._Mysize = 0;

  00077	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4309 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00081	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00084	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4310 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4311 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0008b	c6 45 a7 00	 mov	 BYTE PTR $T2[ebp], 0
  0008f	8d 45 a7	 lea	 eax, DWORD PTR $T2[ebp]
  00092	50		 push	 eax
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	6b d1 00	 imul	 edx, ecx, 0
  0009b	03 55 f0	 add	 edx, DWORD PTR _this$[ebp]
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000a4	83 c4 08	 add	 esp, 8

; 4312 :     }

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
  000b9	cc		 int	 3
  000ba	cc		 int	 3
  000bb	cc		 int	 3
  000bc	cc		 int	 3
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4292 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4293 :         _Mypair._Myval2._Mysize = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4294 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4295 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4296 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00020	c6 45 bb 00	 mov	 BYTE PTR $T1[ebp], 0
  00024	8d 45 bb	 lea	 eax, DWORD PTR $T1[ebp]
  00027	50		 push	 eax
  00028	b9 01 00 00 00	 mov	 ecx, 1
  0002d	6b d1 00	 imul	 edx, ecx, 0
  00030	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00039	83 c4 08	 add	 esp, 8

; 4297 :     }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 4288 :     void _Eos(const size_type _Newsize) { // set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4289 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  0000c	c6 45 bb 00	 mov	 BYTE PTR $T1[ebp], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00016	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00019	8d 55 bb	 lea	 edx, DWORD PTR $T1[ebp]
  0001c	52		 push	 edx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00025	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0002e	83 c4 08	 add	 esp, 8

; 4290 :     }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4213 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4214 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00014	50		 push	 eax
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001b	51		 push	 ecx
  0001c	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4215 :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
__Masked$ = -4						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4200 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4201 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  0000c	83 c8 0f	 or	 eax, 15			; 0000000fH
  0000f	89 45 fc	 mov	 DWORD PTR __Masked$[ebp], eax

; 4202 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00012	8b 45 fc	 mov	 eax, DWORD PTR __Masked$[ebp]
  00015	3b 45 10	 cmp	 eax, DWORD PTR __Max$[ebp]
  00018	76 05		 jbe	 SHORT $LN2@Calculate_

; 4203 :             return _Max;

  0001a	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0001d	eb 31		 jmp	 SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4204 :         }
; 4205 : 
; 4206 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  00022	d1 e8		 shr	 eax, 1
  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Max$[ebp]
  00027	2b c8		 sub	 ecx, eax
  00029	39 4d 0c	 cmp	 DWORD PTR __Old$[ebp], ecx
  0002c	76 05		 jbe	 SHORT $LN3@Calculate_

; 4207 :             return _Max;

  0002e	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	eb 1d		 jmp	 SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4208 :         }
; 4209 : 
; 4210 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00033	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  00036	d1 e8		 shr	 eax, 1
  00038	03 45 0c	 add	 eax, DWORD PTR __Old$[ebp]
  0003b	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  0003e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	8d 55 fc	 lea	 edx, DWORD PTR __Masked$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4211 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 4194 :     _NODISCARD allocator_type get_allocator() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return static_cast<allocator_type>(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4196 :     }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 4128 :     _NODISCARD int compare(const basic_string& _Right) const noexcept { // compare [0, size()) with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4129 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	50		 push	 eax
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 4130 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 4131 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4095 :     bool _Equal(_In_z_ const _Elem* const _Ptr) const noexcept { // compare [0, size()) with _Ptr for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4096 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 4097 :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4090 :     bool _Equal(const basic_string& _Right) const noexcept { // compare [0, size()) with _Right for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4091 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	50		 push	 eax
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 4092 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 4093 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -69						; size = 1
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 4085 :     _NODISCARD basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 4086 :         // return [_Off, _Off + _Count) as new string
; 4087 :         return basic_string(*this, _Off, _Count, get_allocator());

  00013	8d 45 bb	 lea	 eax, DWORD PTR $T2[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00027	52		 push	 edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00034	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	83 c9 01	 or	 ecx, 1
  0003a	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  0003d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4088 :     }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
$T1 = -70						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx

; 4051 :     _NODISCARD size_type find_last_not_of(const basic_string& _Right, const size_type _Off = npos) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4052 :         // look for none of _Right before _Off
; 4053 :         return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  0000c	0f b6 45 ba	 movzx	 eax, BYTE PTR $T1[ebp]
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00017	52		 push	 edx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00020	50		 push	 eax
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	52		 push	 edx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
  0003a	83 c4 18	 add	 esp, 24			; 00000018H

; 4054 :             _Mypair._Myval2._Mysize, _Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize,
; 4055 :             _Is_specialization<_Traits, char_traits>{}));
; 4056 :     }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
$T1 = -70						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx

; 4012 :     _NODISCARD size_type find_first_not_of(const basic_string& _Right, const size_type _Off = 0) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4013 :         // look for none of _Right at or after _Off
; 4014 :         return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  0000c	0f b6 45 ba	 movzx	 eax, BYTE PTR $T1[ebp]
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00017	52		 push	 edx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00020	50		 push	 eax
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	52		 push	 edx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
  0003a	83 c4 18	 add	 esp, 24			; 00000018H

; 4015 :             _Mypair._Myval2._Mysize, _Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize,
; 4016 :             _Is_specialization<_Traits, char_traits>{}));
; 4017 :     }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 3885 :     _NODISCARD size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3886 :         // look for _Ch at or after _Off
; 3887 :         return static_cast<size_type>(

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Traits_find_ch@U?$char_traits@D@std@@@std@@YAIQBDIID@Z ; std::_Traits_find_ch<std::char_traits<char> >
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 3888 :             _Traits_find_ch<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ch));
; 3889 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -72						; size = 4
_this$ = -4						; size = 4
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3763 :     _NODISCARD bool empty() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3764 :         return size() == 0;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00014	85 c0		 test	 eax, eax
  00016	75 09		 jne	 SHORT $LN3@empty
  00018	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001f	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00021	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@empty:
  00028	8a 45 b8	 mov	 al, BYTE PTR tv67[ebp]

; 3765 :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
__Storage_max$ = -12					; size = 4
__Alloc_max$ = -8					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3689 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3690 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3691 :         const size_type _Storage_max = // can always store small string

  00020	c7 45 b0 10 00
	00 00		 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00027	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00034	83 c4 08	 add	 esp, 8
  00037	8b 10		 mov	 edx, DWORD PTR [eax]
  00039	89 55 f4	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3692 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3693 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0003c	8b 45 f4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
  00045	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  0004a	89 45 a8	 mov	 DWORD PTR $T1[ebp], eax
  0004d	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  00050	51		 push	 ecx
  00051	8d 55 a8	 lea	 edx, DWORD PTR $T1[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]

; 3694 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3695 :         );
; 3696 :     }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3685 :     _NODISCARD size_type size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3686 :         return _Mypair._Myval2._Mysize;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 3687 :     }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3671 :     _NODISCARD _Ret_z_ const _Elem* data() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3672 :         return _Mypair._Myval2._Myptr();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3673 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3667 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3668 :         return _Mypair._Myval2._Myptr();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3669 :     }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT
; _this$ = ecx

; 3635 :     _NODISCARD reference front() noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3636 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3637 :         _STL_VERIFY(_Mypair._Myval2._Mysize != 0, "front() called on empty string");
; 3638 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3639 : 
; 3640 :         return _Mypair._Myval2._Myptr()[0];

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00014	b9 01 00 00 00	 mov	 ecx, 1
  00019	6b d1 00	 imul	 edx, ecx, 0
  0001c	03 c2		 add	 eax, edx

; 3641 :     }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
$T1 = -78						; size = 1
$T2 = -77						; size = 1
__Ptr$3 = -12						; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 3607 :     void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3608 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3609 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0001b	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0001e	73 47		 jae	 SHORT $LN2@push_back

; 3610 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 3611 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00034	89 45 f4	 mov	 DWORD PTR __Ptr$3[ebp], eax

; 3612 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00037	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$3[ebp]
  0003e	03 4d f8	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00047	83 c4 08	 add	 esp, 8

; 3613 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0004a	c6 45 b3 00	 mov	 BYTE PTR $T2[ebp], 0
  0004e	8d 45 b3	 lea	 eax, DWORD PTR $T2[ebp]
  00051	50		 push	 eax
  00052	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00055	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00058	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00062	83 c4 08	 add	 esp, 8

; 3614 :             return;

  00065	eb 19		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 3615 :         }
; 3616 : 
; 3617 :         _Reallocate_grow_by(

  00067	33 c0		 xor	 eax, eax
  00069	88 45 b2	 mov	 BYTE PTR $T1[ebp], al
  0006c	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00070	51		 push	 ecx
  00071	0f b6 55 b2	 movzx	 edx, BYTE PTR $T1[ebp]
  00075	52		 push	 edx
  00076	6a 01		 push	 1
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
$LN1@push_back:

; 3618 :             1,
; 3619 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {
; 3620 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3621 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);
; 3622 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3623 :             },
; 3624 :             _Ch);
; 3625 :     }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3586 :     _NODISCARD reference operator[](const size_type _Off) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3587 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3588 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3589 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3590 :         return _Mypair._Myval2._Myptr()[_Off];

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00014	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 3591 :     }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 3485 :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3486 :         return iterator(_Refancy<pointer>(_Mypair._Myval2._Myptr()), _STD addressof(_Mypair._Myval2));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ; std::_Refancy<char *,0>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
  00033	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3487 :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
__Off$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 3227 :     iterator erase(const const_iterator _Where) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3228 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3229 :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_Mypair._Myval2), "string iterator incompatible");
; 3230 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3231 :         const auto _Off = static_cast<size_type>(_Unfancy(_Where._Ptr) - _Mypair._Myval2._Myptr());

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ; std::_Unfancy<char const >
  00034	83 c4 04	 add	 esp, 4
  00037	8b f0		 mov	 esi, eax
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	2b f0		 sub	 esi, eax
  00043	89 75 ec	 mov	 DWORD PTR __Off$[ebp], esi

; 3232 :         erase(_Off, 1);

  00046	6a 01		 push	 1
  00048	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 3233 :         return begin() + static_cast<difference_type>(_Off);

  00054	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0005b	51		 push	 ecx
  0005c	8d 55 a8	 lea	 edx, DWORD PTR $T2[ebp]
  0005f	52		 push	 edx
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00068	8b c8		 mov	 ecx, eax
  0006a	e8 00 00 00 00	 call	 ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
  0006f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3234 :     }

  00072	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
  00086	cc		 int	 3
  00087	cc		 int	 3
  00088	cc		 int	 3
  00089	cc		 int	 3
  0008a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__New_size$ = -20					; size = 4
__Erase_at$ = -16					; size = 4
__My_ptr$ = -12						; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 3215 :     basic_string& erase(const size_type _Off, size_type _Count) { // erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3216 :         _Mypair._Myval2._Check_offset(_Off);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3217 :         _Count                    = _Mypair._Myval2._Clamp_suffix_size(_Off, _Count);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00028	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax

; 3218 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00031	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3219 :         _Elem* const _My_ptr      = _Mypair._Myval2._Myptr();

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003c	89 45 f4	 mov	 DWORD PTR __My_ptr$[ebp], eax

; 3220 :         _Elem* const _Erase_at    = _My_ptr + _Off;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __My_ptr$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __Erase_at$[ebp], eax

; 3221 :         const size_type _New_size = _Old_size - _Count;

  00048	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0004b	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __New_size$[ebp], eax

; 3222 :         _Mypair._Myval2._Mysize   = _New_size;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d ec	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00057	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 3223 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  0005a	8b 45 ec	 mov	 eax, DWORD PTR __New_size$[ebp]
  0005d	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	50		 push	 eax
  00064	8b 4d f0	 mov	 ecx, DWORD PTR __Erase_at$[ebp]
  00067	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 55 f0	 mov	 edx, DWORD PTR __Erase_at$[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :         return *this;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 3225 :     }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 3209 :     basic_string& erase(const size_type _Off = 0) { // erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3210 :         _Mypair._Myval2._Check_offset(_Off);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3211 :         _Eos(_Off);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 3212 :         return *this;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 3213 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2983 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2984 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  0001e	83 c4 04	 add	 esp, 4
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00025	51		 push	 ecx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2985 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -74						; size = 1
$T2 = -73						; size = 1
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2964 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2965 :         // assign [_Ptr, _Ptr + _Count)
; 2966 :         if (_Count <= _Mypair._Myval2._Myres) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00012	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00015	77 44		 ja	 SHORT $LN2@assign

; 2967 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001f	89 45 f8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2968 :             _Mypair._Myval2._Mysize = _Count;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00028	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2969 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 f8	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2970 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003f	c6 45 b7 00	 mov	 BYTE PTR $T2[ebp], 0
  00043	8d 45 b7	 lea	 eax, DWORD PTR $T2[ebp]
  00046	50		 push	 eax
  00047	8b 4d f8	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  0004a	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00053	83 c4 08	 add	 esp, 8

; 2971 :             return *this;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2972 :         }
; 2973 : 
; 2974 :         return _Reallocate_for(

  0005b	33 c0		 xor	 eax, eax
  0005d	88 45 b6	 mov	 BYTE PTR $T1[ebp], al
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00063	51		 push	 ecx
  00064	0f b6 55 b6	 movzx	 edx, BYTE PTR $T1[ebp]
  00068	52		 push	 edx
  00069	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2975 :             _Count,
; 2976 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2977 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2978 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2979 :             },
; 2980 :             _Ptr);
; 2981 :     }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2942 :     basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2943 :         // assign _Right [_Roff, _Roff + _Count)
; 2944 :         _Right._Mypair._Myval2._Check_offset(_Roff);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2945 :         _Count = _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count);

  00018	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00028	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 2946 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00037	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2947 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2879 :     basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2880 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  0001e	83 c4 04	 add	 esp, 4
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00025	51		 push	 ecx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2881 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -78						; size = 1
$T2 = -77						; size = 1
__Old_ptr$3 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2857 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2858 :         // append [_Ptr, _Ptr + _Count)
; 2859 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2860 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001b	2b 4d f8	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  0001e	39 4d 0c	 cmp	 DWORD PTR __Count$[ebp], ecx
  00021	77 4d		 ja	 SHORT $LN2@append

; 2861 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2862 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00037	89 45 f4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2863 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00041	51		 push	 ecx
  00042	8b 55 f4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00045	03 55 f8	 add	 edx, DWORD PTR __Old_size$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2864 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00051	c6 45 b3 00	 mov	 BYTE PTR $T2[ebp], 0
  00055	8d 45 b3	 lea	 eax, DWORD PTR $T2[ebp]
  00058	50		 push	 eax
  00059	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0005c	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0005f	03 4d f4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00068	83 c4 08	 add	 esp, 8

; 2865 :             return *this;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	eb 1e		 jmp	 SHORT $LN1@append
$LN2@append:

; 2866 :         }
; 2867 : 
; 2868 :         return _Reallocate_grow_by(

  00070	33 c0		 xor	 eax, eax
  00072	88 45 b2	 mov	 BYTE PTR $T1[ebp], al
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0007c	52		 push	 edx
  0007d	0f b6 45 b2	 movzx	 eax, BYTE PTR $T1[ebp]
  00081	50		 push	 eax
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00085	51		 push	 ecx
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2869 :             _Count,
; 2870 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 2871 :                 const size_type _Count) {
; 2872 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2873 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2874 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2875 :             },
; 2876 :             _Ptr, _Count);
; 2877 :     }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2831 :     basic_string& append(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2832 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2833 :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2826 :     basic_string& operator+=(_Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2827 :         push_back(_Ch);

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 2828 :         return *this;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2829 :     }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2822 :     basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2823 :         return append(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2824 :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2811 :     basic_string& operator+=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2812 :         return append(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2813 :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2799 :     basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2800 :         return assign(_Ptr);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2801 :     }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2784 :     basic_string& operator=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2785 :         if (this != _STD addressof(_Right)) {

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
  00015	83 c4 04	 add	 esp, 4
  00018	39 45 fc	 cmp	 DWORD PTR _this$[ebp], eax
  0001b	74 16		 je	 SHORT $LN2@operator

; 2786 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});

  0001d	33 c0		 xor	 eax, eax
  0001f	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00022	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
$LN2@operator:

; 2787 :         }
; 2788 : 
; 2789 :         return *this;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2790 :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign, COMDAT
; _this$ = ecx

; 2748 :     void _Copy_assign(const basic_string& _Right, false_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2749 :         _Pocca(_Getal(), _Right._Getal());

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
  00023	83 c4 08	 add	 esp, 8

; 2750 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00026	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00029	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002c	51		 push	 ecx
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2751 :     }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2722 :     ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2723 :         _Tidy_deallocate();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2724 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2725 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2726 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2727 :         _Mypair._Myval2._Myproxy = nullptr;
; 2728 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2729 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2730 :     }

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -104						; size = 4
$T2 = -100						; size = 4
__New_array$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
__Right_ptr$ = -16					; size = 4
__Right_size$ = -12					; size = 4
__Right_data$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2650 :     void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2651 :         // assign by copying data stored in _Right
; 2652 :         // pre: this != &_Right
; 2653 :         // pre: *this owns no memory, iterators orphaned (note:
; 2654 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2655 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2656 :         const size_type _Right_size   = _Right_data._Mysize;

  00012	8b 45 f8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00015	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00018	89 4d f4	 mov	 DWORD PTR __Right_size$[ebp], ecx

; 2657 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00023	89 45 f0	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2658 :         auto& _My_data                = _Mypair._Myval2;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2659 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0002c	83 7d f4 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  00030	73 2a		 jae	 SHORT $LN2@Construct_

; 2660 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  00032	6a 10		 push	 16			; 00000010H
  00034	8b 45 f0	 mov	 eax, DWORD PTR __Right_ptr$[ebp]
  00037	50		 push	 eax
  00038	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2661 :             _My_data._Mysize = _Right_size;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0004a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2662 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00050	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 2663 :             return;

  00057	e9 88 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2664 :         }
; 2665 : 
; 2666 :         auto& _Al                     = _Getal();

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00064	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 2667 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0006f	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  00072	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00075	83 c8 0f	 or	 eax, 15			; 0000000fH
  00078	89 45 98	 mov	 DWORD PTR $T1[ebp], eax
  0007b	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  0007e	51		 push	 ecx
  0007f	8d 55 98	 lea	 edx, DWORD PTR $T1[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00088	83 c4 08	 add	 esp, 8
  0008b	8b 00		 mov	 eax, DWORD PTR [eax]
  0008d	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2668 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00090	8b 45 e4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	50		 push	 eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0009a	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009f	89 45 e0	 mov	 DWORD PTR __New_array$[ebp], eax

; 2669 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000a2	8d 45 e0	 lea	 eax, DWORD PTR __New_array$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000af	83 c4 08	 add	 esp, 8

; 2670 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000b2	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000b5	83 c0 01	 add	 eax, 1
  000b8	50		 push	 eax
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 e0	 mov	 edx, DWORD PTR __New_array$[ebp]
  000c0	52		 push	 edx
  000c1	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c6	83 c4 04	 add	 esp, 4
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2671 :         _My_data._Mysize = _Right_size;

  000d2	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000d8	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2672 :         _My_data._Myres  = _New_capacity;

  000db	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000de	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000e1	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN1@Construct_:

; 2673 :     }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 2609 :     void _Take_contents(basic_string& _Right, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2610 :         // assign by stealing _Right's buffer, memcpy optimization
; 2611 :         // pre: this != &_Right
; 2612 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2613 :         // pre: *this owns no memory, iterators orphaned (note:
; 2614 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2615 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2616 :         if (_Right._Mypair._Myval2._Large_string_engaged()) {
; 2617 :             // take ownership of _Right's iterators along with its buffer
; 2618 :             _Swap_proxy_and_iterators(_Right);
; 2619 :         } else {
; 2620 :             _Right._Mypair._Myval2._Orphan_all();
; 2621 :         }
; 2622 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2623 : 
; 2624 :         _Memcpy_val_from(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2625 :         _Right._Tidy_init();

  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2626 :     }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -12					; size = 4
__My_data_mem$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 2600 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2601 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2602 :         const auto _My_data_mem =

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 f8	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2603 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2604 :         const auto _Right_data_mem =

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
  00024	83 c4 04	 add	 esp, 4
  00027	89 45 f4	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2605 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2606 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0002a	6a 18		 push	 24			; 00000018H
  0002c	8b 45 f4	 mov	 eax, DWORD PTR __Right_data_mem$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR __My_data_mem$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _memcpy
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2607 :     }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2586 :     basic_string& operator=(basic_string&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2587 :         if (this != _STD addressof(_Right)) {

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00015	83 c4 04	 add	 esp, 4
  00018	39 45 fc	 cmp	 DWORD PTR _this$[ebp], eax
  0001b	74 16		 je	 SHORT $LN2@operator

; 2588 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  0001d	33 c0		 xor	 eax, eax
  0001f	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00022	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN2@operator:

; 2589 :         }
; 2590 : 
; 2591 :         return *this;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2592 :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT
; _this$ = ecx

; 2558 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2559 :         _Tidy_deallocate();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2560 :         _Pocma(_Getal(), _Right._Getal());

  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  0002b	83 c4 08	 add	 esp, 8

; 2561 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  0002e	33 c0		 xor	 eax, eax
  00030	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00033	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0003b	52		 push	 edx
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2562 :     }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
_TEXT	SEGMENT
$T2 = -111						; size = 1
$T3 = -110						; size = 1
$T4 = -109						; size = 1
__Fancyptr$5 = -44					; size = 4
__Proxy$ = -38						; size = 1
_$S24$ = -37						; size = 1
__Alproxy$ = -36					; size = 4
__Ptr$ = -32						; size = 4
__My_data$ = -28					; size = 4
__New_capacity$ = -24					; size = 4
__New_size$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Source_of_al$ = 12					; size = 4
__Left_ptr$ = 16					; size = 4
__Left_size$ = 20					; size = 4
__Right_ptr$ = 24					; size = 4
__Right_size$ = 28					; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2443 :             _One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2442 :         : _Mypair(

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Source_of_al$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00033	50		 push	 eax
  00034	8d 45 93	 lea	 eax, DWORD PTR $T4[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  0003d	83 c4 08	 add	 esp, 8
  00040	50		 push	 eax
  00041	0f b6 4d 92	 movzx	 ecx, BYTE PTR $T3[ebp]
  00045	51		 push	 ecx
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2444 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 2445 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 2446 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 2447 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00055	8b 45 14	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00058	03 45 1c	 add	 eax, DWORD PTR __Right_size$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __New_size$[ebp], eax

; 2448 :         size_type _New_capacity = _BUF_SIZE - 1;

  0005e	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __New_capacity$[ebp], 15 ; 0000000fH

; 2449 :         auto& _My_data          = _Mypair._Myval2;

  00065	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00068	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 2450 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  0006b	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0006e	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2451 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00071	8d 45 db	 lea	 eax, DWORD PTR _$S24$[ebp]
  00074	89 45 dc	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2452 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws

  00077	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d dc	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 4d da	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00082	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2453 :         if (_New_capacity < _New_size) {

  00087	8b 45 e8	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0008a	3b 45 ec	 cmp	 eax, DWORD PTR __New_size$[ebp]
  0008d	73 52		 jae	 SHORT $LN2@basic_stri

; 2454 :             _New_capacity           = _Calculate_growth(_New_size, _BUF_SIZE - 1, max_size());

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00097	50		 push	 eax
  00098	6a 0f		 push	 15			; 0000000fH
  0009a	8b 45 ec	 mov	 eax, DWORD PTR __New_size$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2455 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  000a9	8b 45 e8	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	50		 push	 eax
  000b0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000b8	8b c8		 mov	 ecx, eax
  000ba	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000bf	89 45 d4	 mov	 DWORD PTR __Fancyptr$5[ebp], eax

; 2456 :             _Ptr                    = _Unfancy(_Fancyptr);

  000c2	8b 45 d4	 mov	 eax, DWORD PTR __Fancyptr$5[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000cb	83 c4 04	 add	 esp, 4
  000ce	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2457 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  000d1	8d 45 d4	 lea	 eax, DWORD PTR __Fancyptr$5[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000de	83 c4 08	 add	 esp, 8
$LN2@basic_stri:

; 2458 :         }
; 2459 : 
; 2460 :         _My_data._Mysize = _New_size;

  000e1	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000e7	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2461 :         _My_data._Myres  = _New_capacity;

  000ea	8b 45 e4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000ed	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000f0	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2462 :         _Traits::copy(_Ptr, _Left_ptr, _Left_size);

  000f3	8b 45 14	 mov	 eax, DWORD PTR __Left_size$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 10	 mov	 ecx, DWORD PTR __Left_ptr$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2463 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  00107	8b 45 1c	 mov	 eax, DWORD PTR __Right_size$[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d 18	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00112	03 55 14	 add	 edx, DWORD PTR __Left_size$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2464 :         _Traits::assign(_Ptr[_New_size], _Elem());

  0011e	c6 45 91 00	 mov	 BYTE PTR $T2[ebp], 0
  00122	8d 45 91	 lea	 eax, DWORD PTR $T2[ebp]
  00125	50		 push	 eax
  00126	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00129	03 4d ec	 add	 ecx, DWORD PTR __New_size$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00132	83 c4 08	 add	 esp, 8

; 2465 :         _Proxy._Release();

  00135	8d 4d da	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00138	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2466 :     }

  0013d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00144	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00147	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00151	59		 pop	 ecx
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -83						; size = 1
$T3 = -82						; size = 1
$T4 = -81						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2418 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00039	83 c4 04	 add	 esp, 4
  0003c	50		 push	 eax
  0003d	0f b6 45 af	 movzx	 eax, BYTE PTR $T4[ebp]
  00041	50		 push	 eax
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2419 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0004a	8d 45 ae	 lea	 eax, DWORD PTR $T3[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2420 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00056	33 c0		 xor	 eax, eax
  00058	88 45 ad	 mov	 BYTE PTR $T2[ebp], al
  0005b	0f b6 4d ad	 movzx	 ecx, BYTE PTR $T2[ebp]
  0005f	51		 push	 ecx
  00060	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00063	52		 push	 edx
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2421 :     }

  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -87						; size = 1
__Proxy$ = -22						; size = 1
_$S18$ = -21						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2335 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	0f b6 45 a9	 movzx	 eax, BYTE PTR $T2[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2336 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003f	8d 45 eb	 lea	 eax, DWORD PTR _$S18$[ebp]
  00042	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2337 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2338 :         _Tidy_init();

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2339 :         assign(_Ptr);

  0005d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00060	50		 push	 eax
  00061	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2340 :         _Proxy._Release();

  00069	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2341 :     }

  00071	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
_TEXT	SEGMENT
$T2 = -87						; size = 1
__Proxy$ = -22						; size = 1
_$S19$ = -21						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2317 :         : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	0f b6 45 a9	 movzx	 eax, BYTE PTR $T2[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2318 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003f	8d 45 eb	 lea	 eax, DWORD PTR _$S19$[ebp]
  00042	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2319 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2320 :         _Tidy_init();

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2321 :         assign(_Ptr, _Count);

  0005d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00064	51		 push	 ecx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2322 :         _Proxy._Release();

  0006d	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00070	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2323 :     }

  00075	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T2 = -87						; size = 1
__Proxy$ = -22						; size = 1
_$S23$ = -21						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2308 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0002e	50		 push	 eax
  0002f	0f b6 4d a9	 movzx	 ecx, BYTE PTR $T2[ebp]
  00033	51		 push	 ecx
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2309 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00043	8d 45 eb	 lea	 eax, DWORD PTR _$S23$[ebp]
  00046	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2310 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00050	51		 push	 ecx
  00051	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00054	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2311 :         _Tidy_init();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2312 :         assign(_Right, _Roff, _Count);

  00061	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006c	52		 push	 edx
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2313 :         _Proxy._Release();

  00075	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2314 :     }

  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -82						; size = 1
$T3 = -81						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2287 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	0f b6 45 af	 movzx	 eax, BYTE PTR $T3[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2288 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00038	8d 45 ae	 lea	 eax, DWORD PTR $T2[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2289 :         _Tidy_init();

  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2290 :     }

  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 1
$T3 = -87						; size = 1
__Proxy$ = -22						; size = 1
_$S20$ = -21						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2273 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00033	50		 push	 eax
  00034	8d 45 a9	 lea	 eax, DWORD PTR $T3[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  0003d	83 c4 08	 add	 esp, 8
  00040	50		 push	 eax
  00041	0f b6 4d a8	 movzx	 ecx, BYTE PTR $T2[ebp]
  00045	51		 push	 ecx
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2274 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00055	8d 45 eb	 lea	 eax, DWORD PTR _$S20$[ebp]
  00058	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2275 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00062	51		 push	 ecx
  00063	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00066	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2276 :         _Construct_lv_contents(_Right);

  0006b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2277 :         _Proxy._Release();

  00077	8d 4d ea	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2278 :     }

  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2180 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2178 :         _Bxty() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2172 :     size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2173 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2174 :         return (_STD min)(_Size, _Mysize - _Off);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T1[ebp], ecx
  00018	8d 55 b8	 lea	 edx, DWORD PTR $T1[ebp]
  0001b	52		 push	 edx
  0001c	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00025	83 c4 08	 add	 esp, 8
  00028	8b 00		 mov	 eax, DWORD PTR [eax]

; 2175 :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2168 :     [[noreturn]] static void _Xran() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2169 :         _Xout_of_range("invalid string position");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  0000e	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2170 :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2156 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2157 :         if (_Mysize < _Off) {

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00015	73 05		 jae	 SHORT $LN3@Check_offs

; 2158 :             _Xran();

  00017	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 2159 :         }
; 2160 :     }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2152 :     bool _Large_string_engaged() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2153 :         return _BUF_SIZE <= _Myres;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00013	72 09		 jb	 SHORT $LN3@Large_stri
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00025	8a 45 b8	 mov	 al, BYTE PTR tv66[ebp]

; 2154 :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2143 :     const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2144 :         const value_type* _Result = _Bx._Buf;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2145 :         if (_Large_string_engaged()) {

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	85 c0		 test	 eax, eax
  0001f	74 11		 je	 SHORT $LN2@Myptr

; 2146 :             _Result = _Unfancy(_Bx._Ptr);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2147 :         }
; 2148 : 
; 2149 :         return _Result;

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2150 :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2134 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2135 :         value_type* _Result = _Bx._Buf;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2136 :         if (_Large_string_engaged()) {

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	85 c0		 test	 eax, eax
  0001f	74 11		 je	 SHORT $LN2@Myptr

; 2137 :             _Result = _Unfancy(_Bx._Ptr);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2138 :         }
; 2139 : 
; 2140 :         return _Result;

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2141 :     }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2124 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 706  :     _NODISCARD static _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 707  :         return _Al;

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 708  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 702  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 703  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00009	83 c8 ff	 or	 eax, -1

; 704  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 806  :     _NODISCARD __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 807  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 808  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 801  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 803  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00019	83 c4 08	 add	 esp, 8

; 804  :     }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 795  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2200 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2201 :     _Xlength_error("string too long");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  0000e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2202 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 400  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 401  :         return static_cast<int_type>(EOF);

  00009	83 c8 ff	 or	 eax, -1

; 402  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
tv69 = -68						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z PROC	; std::_Narrow_char_traits<char,int>::not_eof, COMDAT

; 396  :     _NODISCARD static constexpr int_type not_eof(const int_type& _Meta) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 397  :         return _Meta != eof() ? _Meta : !eof();

  00009	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00011	39 01		 cmp	 DWORD PTR [ecx], eax
  00013	74 0a		 je	 SHORT $LN5@not_eof
  00015	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 bc	 mov	 DWORD PTR tv69[ebp], eax
  0001d	eb 1f		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  0001f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00024	85 c0		 test	 eax, eax
  00026	75 09		 jne	 SHORT $LN3@not_eof
  00028	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  00031	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@not_eof:
  00038	8b 4d b8	 mov	 ecx, DWORD PTR tv68[ebp]
  0003b	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
  0003e	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 398  :     }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?not_eof@?$_Narrow_char_traits@DH@std@@SAHABH@Z ENDP	; std::_Narrow_char_traits<char,int>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 392  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 393  :         return _Left == _Right;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	75 09		 jne	 SHORT $LN3@eq_int_typ
  00015	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0001e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00025	8a 45 bc	 mov	 al, BYTE PTR tv65[ebp]

; 394  :     }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z PROC ; std::_Narrow_char_traits<char,int>::to_int_type, COMDAT

; 388  :     _NODISCARD static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 389  :         return static_cast<unsigned char>(_Ch);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 390  :     }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHABD@Z ENDP ; std::_Narrow_char_traits<char,int>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z PROC ; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 384  :     _NODISCARD static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 385  :         return static_cast<_Elem>(_Meta);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0000c	8a 00		 mov	 al, BYTE PTR [eax]

; 386  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ENDP ; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 372  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 373  :         _Left = _Right;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 10		 mov	 BYTE PTR [eax], dl

; 374  :     }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::move, COMDAT

; 361  :         const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 362  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 363  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _memmove
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z PROC	; std::_Narrow_char_traits<char,int>::find, COMDAT

; 340  :         const _Elem& _Ch) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 341  :         // look for _Ch in [_First, _First + _Count)
; 342  : #if _HAS_CXX17
; 343  : #ifdef __cpp_char8_t
; 344  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 345  : #if _HAS_U8_INTRINSICS
; 346  :             return __builtin_u8memchr(_First, _Ch, _Count);
; 347  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 348  :             return _Char_traits<_Elem, _Int_type>::find(_First, _Count, _Ch);
; 349  : #endif // _HAS_U8_INTRINSICS
; 350  :         } else
; 351  : #endif // __cpp_char8_t
; 352  :         {
; 353  :             return __builtin_char_memchr(_First, _Ch, _Count);
; 354  :         }
; 355  : #else // _HAS_CXX17
; 356  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Ch$[ebp]
  00010	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _memchr
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 357  : #endif // _HAS_CXX17
; 358  :     }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ENDP	; std::_Narrow_char_traits<char,int>::find
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::copy, COMDAT

; 326  :         const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 327  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 328  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _memcpy
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 329  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 305  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 306  :         // find length of null-terminated string
; 307  : #if _HAS_CXX17
; 308  : #ifdef __cpp_char8_t
; 309  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 310  : #if _HAS_U8_INTRINSICS
; 311  :             return __builtin_u8strlen(_First);
; 312  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 313  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 314  : #endif // _HAS_U8_INTRINSICS
; 315  :         } else
; 316  : #endif // __cpp_char8_t
; 317  :         {
; 318  :             return __builtin_strlen(_First);
; 319  :         }
; 320  : #else // _HAS_CXX17
; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4

; 322  : #endif // _HAS_CXX17
; 323  :     }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z PROC	; std::_Narrow_char_traits<char,int>::compare, COMDAT

; 289  :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 290  :         // compare [_First1, _First1 + _Count) with [_First2, ...)
; 291  : #if _HAS_CXX17
; 292  : #if _HAS_U8_INTRINSICS
; 293  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 294  :             return __builtin_u8memcmp(_First1, _First2, _Count);
; 295  :         } else
; 296  : #endif // _HAS_U8_INTRINSICS
; 297  :         {
; 298  :             return __builtin_memcmp(_First1, _First2, _Count);
; 299  :         }
; 300  : #else // _HAS_CXX17
; 301  :         return _CSTD memcmp(_First1, _First2, _Count);

  00009	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _memcmp
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : #endif // _HAS_CXX17
; 303  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ENDP	; std::_Narrow_char_traits<char,int>::compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ PROC		; std::_Fake_proxy_ptr_impl::_Release, COMDAT
; _this$ = ecx

; 1259 :     void _Release() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ENDP		; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT
; _this$ = ecx

; 1256 :     _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 1072 :     void _Adopt(const void*) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1067 :     void _Alloc_proxy(const _Fake_allocator&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z PROC ; std::_Container_base0::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1066 :     void _Swap_proxy_and_iterators(_Container_base0&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Swap_proxy_and_iterators@_Container_base0@std@@QAEXAAU12@@Z ENDP ; std::_Container_base0::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 1065 :     void _Orphan_all() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 990  : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 991  :     // convert size_t to size_t, unchanged
; 992  :     return _Len;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 993  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	83 c1 23	 add	 ecx, 35			; 00000023H
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00016	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 ff	 imul	 ecx, eax, -1
  00026	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00029	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0002c	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002f	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00036	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  0003e	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	83 7d f0 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00045	72 08		 jb	 SHORT $LN7@Adjust_man
  00047	83 7d f0 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  0004b	77 02		 ja	 SHORT $LN7@Adjust_man
  0004d	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00054	33 c0		 xor	 eax, eax
  00056	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00058	33 c0		 xor	 eax, eax
  0005a	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :     __declspec(allocator) static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 77   :         return ::operator new(_Bytes);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	83 c4 04	 add	 esp, 4

; 78   :     }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 554  :     _NODISCARD static constexpr int(max)() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 555  :         return INT_MAX;

  00009	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 556  :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -76						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 321  :     _THROW(bad_array_new_length{});

  00009	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00011	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00016	8d 45 b4	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

  0000c	6a 01		 push	 1
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 130  :     {

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	74 0b		 je	 SHORT $LN3@what
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001b	89 55 b8	 mov	 DWORD PTR tv69[ebp], edx
  0001e	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00020	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00027	8b 45 b8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00021	83 c4 04	 add	 esp, 4

; 91   :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00015	33 c0		 xor	 eax, eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
  0001f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c0 04	 add	 eax, 4
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ___std_exception_copy
  00035	83 c4 08	 add	 esp, 8

; 74   :     }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00015	33 c0		 xor	 eax, eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
  0001f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00028	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 68   :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -12					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 59   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 58   :         : _Data()

  00015	33 c0		 xor	 eax, eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
  0001f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 60   :         __std_exception_data _InitData = { _Message, true };

  00022	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00025	89 45 f4	 mov	 DWORD PTR __InitData$[ebp], eax
  00028	c6 45 f8 01	 mov	 BYTE PTR __InitData$[ebp+4], 1

; 61   :         __std_exception_copy(&_InitData, &_Data);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	50		 push	 eax
  00033	8d 4d f4	 lea	 ecx, DWORD PTR __InitData$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ___std_exception_copy
  0003c	83 c4 08	 add	 esp, 8

; 62   :     }

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 167  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 168  :         (void)_Size;
; 169  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 170  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\IniFile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
