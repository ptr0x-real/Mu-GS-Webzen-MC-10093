; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	_vsprintf
PUBLIC	?Output@CLogToFile@@QAAXPADZZ			; CLogToFile::Output
PUBLIC	??0CLogToFile@@QAE@QAD0H@Z			; CLogToFile::CLogToFile
PUBLIC	??1CLogToFile@@QAE@XZ				; CLogToFile::~CLogToFile
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_07EIPNPBIJ@LOGDATA@			; `string'
PUBLIC	??_C@_03MLIHNEFJ@LOG@				; `string'
PUBLIC	??_C@_0BJ@FIAJAMML@?$CFs?2?$CFs?5?$CF04u?9?$CF02u?9?$CF02u?4txt@ ; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL@				; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_0O@JAONHOHJ@?$CFu?3?$CFu?3?$CFu?5?5?$CFs?6@ ; `string'
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0O@JAONHOHJ@?$CFu?3?$CFu?3?$CFu?5?5?$CFs?6@
CONST	SEGMENT
??_C@_0O@JAONHOHJ@?$CFu?3?$CFu?3?$CFu?5?5?$CFs?6@ DB '%u:%u:%u  %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL@ DB 'a+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FIAJAMML@?$CFs?2?$CFs?5?$CF04u?9?$CF02u?9?$CF02u?4txt@
CONST	SEGMENT
??_C@_0BJ@FIAJAMML@?$CFs?2?$CFs?5?$CF04u?9?$CF02u?9?$CF02u?4txt@ DB '%s\%'
	DB	's %04u-%02u-%02u.txt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLIHNEFJ@LOG@
CONST	SEGMENT
??_C@_03MLIHNEFJ@LOG@ DB 'LOG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA@
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
;	COMDAT ??1CLogToFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLogToFile@@QAE@XZ PROC				; CLogToFile::~CLogToFile, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : //#ifdef FOR_KOREA
; 38   : 	DeleteCriticalSection (& m_critLogToFile);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 39   : //#endif
; 40   : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??1CLogToFile@@QAE@XZ ENDP				; CLogToFile::~CLogToFile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
;	COMDAT ??0CLogToFile@@QAE@QAD0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_LogFileName$ = 8					; size = 4
_LogDirectoryName$ = 12					; size = 4
_bWithDate$ = 16					; size = 4
??0CLogToFile@@QAE@QAD0H@Z PROC				; CLogToFile::CLogToFile, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 15   : //#ifdef FOR_KOREA	
; 16   : 	if ( ! strcmp (LogFileName, "") )

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00011	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strcmp
  0001a	83 c4 08	 add	 esp, 8
  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN2@CLogToFile

; 17   : 		strcpy (m_szLogFileName, DEF_LOG_FILE_NAME);

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_07EIPNPBIJ@LOGDATA@
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c0 04	 add	 eax, 4
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _strcpy
  00032	83 c4 08	 add	 esp, 8
  00035	eb 13		 jmp	 SHORT $LN3@CLogToFile
$LN2@CLogToFile:

; 18   : 	else
; 19   : 		strcpy (m_szLogFileName, LogFileName);

  00037	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8
$LN3@CLogToFile:

; 20   : 
; 21   : 	if ( ! strcmp (LogDirectoryName, "") )

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004f	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _strcmp
  00058	83 c4 08	 add	 esp, 8
  0005b	85 c0		 test	 eax, eax
  0005d	75 18		 jne	 SHORT $LN4@CLogToFile

; 22   : 		strcpy (m_szLogDirectoryName, DEF_LOG_DIRECTORY_NAME);

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_03MLIHNEFJ@LOG@
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	05 08 01 00 00	 add	 eax, 264		; 00000108H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _strcpy
  00072	83 c4 08	 add	 esp, 8
  00075	eb 16		 jmp	 SHORT $LN5@CLogToFile
$LN4@CLogToFile:

; 23   : 	else
; 24   : 		strcpy (m_szLogDirectoryName, LogDirectoryName);

  00077	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _strcpy
  0008a	83 c4 08	 add	 esp, 8
$LN5@CLogToFile:

; 25   : 
; 26   : 	m_bWithDate = bWithDate;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _bWithDate$[ebp]
  00093	89 88 0c 02 01
	00		 mov	 DWORD PTR [eax+66060], ecx

; 27   : 
; 28   : 	CreateDirectory (LogDirectoryName, NULL());

  00099	6a 00		 push	 0
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _LogDirectoryName$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 29   : 
; 30   : 	InitializeCriticalSection (& m_critLogToFile);

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 31   : //#endif
; 32   : }

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
??0CLogToFile@@QAE@QAD0H@Z ENDP				; CLogToFile::CLogToFile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
;	COMDAT ?Output@CLogToFile@@QAAXPADZZ
_TEXT	SEGMENT
tv86 = -360						; size = 4
_strSystime$ = -288					; size = 16
_szLogFileName$ = -272					; size = 260
_iChrWritten$ = -12					; size = 4
_argptr$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?Output@CLogToFile@@QAAXPADZZ PROC			; CLogToFile::Output, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 45   : //#ifdef FOR_KOREA
; 46   : 	va_list argptr;
; 47   : 	int iChrWritten;
; 48   : 
; 49   : 	EnterCriticalSection (& m_critLogToFile);

  00016	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00019	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 50   : 	va_start( argptr, fmt );

  00025	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00028	89 45 f8	 mov	 DWORD PTR _argptr$[ebp], eax

; 51   : 	iChrWritten = vsprintf( m_cBUFFER, fmt, argptr );

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _argptr$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00036	81 c2 0c 02 00
	00		 add	 edx, 524		; 0000020cH
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _vsprintf
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 45 f4	 mov	 DWORD PTR _iChrWritten$[ebp], eax

; 52   : 	va_end( argptr );

  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _argptr$[ebp], 0

; 53   : 
; 54   : 	char szLogFileName [MAX_PATH];
; 55   : 	SYSTEMTIME strSystime;
; 56   : 
; 57   : 	GetLocalTime (& strSystime);

  0004f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _strSystime$[ebp]
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 58   : #ifdef MODIFY_KUNDUN_EVENT_LOG_FILENAME_20060220
; 59   : 	wsprintf (szLogFileName, "%s\\%s %04u-%02u-%02u_%s.txt",
; 60   : 		m_szLogDirectoryName,
; 61   : 		m_szLogFileName,
; 62   : 		strSystime.wYear,
; 63   : 		strSystime.wMonth,
; 64   : 		strSystime.wDay,
; 65   : 		szServerName
; 66   : 		);
; 67   : #else
; 68   : 	wsprintf (szLogFileName, "%s\\%s %04u-%02u-%02u.txt",

  0005c	0f b7 85 e6 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+6]
  00063	50		 push	 eax
  00064	0f b7 8d e2 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+2]
  0006b	51		 push	 ecx
  0006c	0f b7 95 e0 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp]
  00073	52		 push	 edx
  00074	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00077	83 c0 04	 add	 eax, 4
  0007a	50		 push	 eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00084	51		 push	 ecx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FIAJAMML@?$CFs?2?$CFs?5?$CF04u?9?$CF02u?9?$CF02u?4txt@
  0008a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szLogFileName$[ebp]
  00090	52		 push	 edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00097	83 c4 1c	 add	 esp, 28			; 0000001cH

; 69   : 		m_szLogDirectoryName,
; 70   : 		m_szLogFileName,
; 71   : 		strSystime.wYear,
; 72   : 		strSystime.wMonth,
; 73   : 		strSystime.wDay
; 74   : 		);
; 75   : #endif
; 76   : 
; 77   : 	if ( ! ( m_fLogFile = fopen (szLogFileName, "a+") ) ) {

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL@
  0009f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _fopen
  000ab	83 c4 08	 add	 esp, 8
  000ae	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  000bd	89 11		 mov	 DWORD PTR [ecx], edx
  000bf	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR tv86[ebp], 0
  000c6	75 11		 jne	 SHORT $LN2@Output

; 78   : 		LeaveCriticalSection (& m_critLogToFile);

  000c8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 79   : 		return;

  000d7	eb 7b		 jmp	 SHORT $LN1@Output
$LN2@Output:

; 80   : 	}
; 81   : 
; 82   : 	if ( ! m_bWithDate ) {

  000d9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 b8 0c 02 01
	00 00		 cmp	 DWORD PTR [eax+66060], 0
  000e3	75 1e		 jne	 SHORT $LN3@Output

; 83   : 		fprintf (m_fLogFile, "%s\n", m_cBUFFER);

  000e5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	05 0c 02 00 00	 add	 eax, 524		; 0000020cH
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 _fprintf
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 84   : 	}

  00101	eb 34		 jmp	 SHORT $LN4@Output
$LN3@Output:

; 85   : 	else {
; 86   : 		fprintf (m_fLogFile, "%u:%u:%u  %s\n", 

  00103	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00106	05 0c 02 00 00	 add	 eax, 524		; 0000020cH
  0010b	50		 push	 eax
  0010c	0f b7 8d ec fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+12]
  00113	51		 push	 ecx
  00114	0f b7 95 ea fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+10]
  0011b	52		 push	 edx
  0011c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+8]
  00123	50		 push	 eax
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JAONHOHJ@?$CFu?3?$CFu?3?$CFu?5?5?$CFs?6@
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 _fprintf
  00134	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Output:

; 87   : 			strSystime.wHour,
; 88   : 			strSystime.wMinute,
; 89   : 			strSystime.wSecond,
; 90   : 			m_cBUFFER
; 91   : 			);
; 92   : 	}
; 93   : 
; 94   : 	fclose (m_fLogFile);

  00137	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0013a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 _fclose
  00142	83 c4 04	 add	 esp, 4

; 95   : 	LeaveCriticalSection (& m_critLogToFile);

  00145	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00148	05 10 02 01 00	 add	 eax, 66064		; 00010210H
  0014d	50		 push	 eax
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@Output:

; 96   : //#endif
; 97   : }

  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015a	33 cd		 xor	 ecx, ebp
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
?Output@CLogToFile@@QAAXPADZZ ENDP			; CLogToFile::Output
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	6a ff		 push	 -1
  00015	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 __vsnprintf_l
  0001e	83 c4 14	 add	 esp, 20			; 00000014H

; 1481 :         #pragma warning(pop)
; 1482 :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LogToFile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
