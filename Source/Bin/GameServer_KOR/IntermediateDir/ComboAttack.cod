; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?Init@ComboSkillData@@QAEXXZ			; ComboSkillData::Init
PUBLIC	?GetSkillPos@CComboAttack@@AAEHH@Z		; CComboAttack::GetSkillPos
PUBLIC	??0CComboAttack@@QAE@XZ				; CComboAttack::CComboAttack
PUBLIC	??1CComboAttack@@UAE@XZ				; CComboAttack::~CComboAttack
PUBLIC	?CheckCombo@CComboAttack@@QAEHHH@Z		; CComboAttack::CheckCombo
PUBLIC	??_GCComboAttack@@UAEPAXI@Z			; CComboAttack::`scalar deleting destructor'
PUBLIC	??_7CComboAttack@@6B@				; CComboAttack::`vftable'
PUBLIC	?gComboAttack@@3VCComboAttack@@A		; gComboAttack
PUBLIC	??_R4CComboAttack@@6B@				; CComboAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCComboAttack@@@8			; CComboAttack `RTTI Type Descriptor'
PUBLIC	??_R3CComboAttack@@8				; CComboAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CComboAttack@@8				; CComboAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CComboAttack@@8			; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECComboAttack@@UAEPAXI@Z:PROC		; CComboAttack::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gObj@@3PAVOBJECTSTRUCT@@A:DWORD		; gObj
_BSS	SEGMENT
?gComboAttack@@3VCComboAttack@@A DD 01H DUP (?)		; gComboAttack
_BSS	ENDS
CRT$XCU	SEGMENT
?gComboAttack$initializer$@@3P6AXXZA DD FLAT:??__EgComboAttack@@YAXXZ ; gComboAttack$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CComboAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CComboAttack@@8 DD FLAT:??_R0?AVCComboAttack@@@8 ; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CComboAttack@@8
rdata$r	SEGMENT
??_R2CComboAttack@@8 DD FLAT:??_R1A@?0A@EA@CComboAttack@@8 ; CComboAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CComboAttack@@8
rdata$r	SEGMENT
??_R3CComboAttack@@8 DD 00H				; CComboAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCComboAttack@@@8
data$r	SEGMENT
??_R0?AVCComboAttack@@@8 DD FLAT:??_7type_info@@6B@	; CComboAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCComboAttack@@', 00H
data$r	ENDS
;	COMDAT ??_R4CComboAttack@@6B@
rdata$r	SEGMENT
??_R4CComboAttack@@6B@ DD 00H				; CComboAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCComboAttack@@@8
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CComboAttack@@6B@
CONST	SEGMENT
??_7CComboAttack@@6B@ DD FLAT:??_R4CComboAttack@@6B@	; CComboAttack::`vftable'
	DD	FLAT:??_ECComboAttack@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FgComboAttack@@YAXXZ
text$yd	SEGMENT
??__FgComboAttack@@YAXXZ PROC				; `dynamic atexit destructor for 'gComboAttack'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  0000e	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgComboAttack@@YAXXZ ENDP				; `dynamic atexit destructor for 'gComboAttack''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ??__EgComboAttack@@YAXXZ
text$di	SEGMENT
??__EgComboAttack@@YAXXZ PROC				; `dynamic initializer for 'gComboAttack'', COMDAT

; 22   : CComboAttack	gComboAttack;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  0000e	e8 00 00 00 00	 call	 ??0CComboAttack@@QAE@XZ	; CComboAttack::CComboAttack
  00013	68 00 00 00 00	 push	 OFFSET ??__FgComboAttack@@YAXXZ ; `dynamic atexit destructor for 'gComboAttack''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgComboAttack@@YAXXZ ENDP				; `dynamic initializer for 'gComboAttack''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCComboAttack@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCComboAttack@@UAEPAXI@Z PROC			; CComboAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCComboAttack@@UAEPAXI@Z ENDP			; CComboAttack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ?CheckCombo@CComboAttack@@QAEHHH@Z
_TEXT	SEGMENT
_tick$1 = -16						; size = 4
_pos$2 = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?CheckCombo@CComboAttack@@QAEHHH@Z PROC			; CComboAttack::CheckCombo, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : #ifdef SECOND_QUEST
; 75   : 	LPOBJECTSTRUCT lpObj = &gObj[aIndex];

  0000c	69 45 08 a0 1b
	00 00		 imul	 eax, DWORD PTR _aIndex$[ebp], 7072
  00013	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00019	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 76   : 
; 77   : #if TESTSERVER == 0
; 78   : 	if( lpObj->ComboSkillquestClear )

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0001f	0f b6 88 8d 00
	00 00		 movzx	 ecx, BYTE PTR [eax+141]
  00026	85 c9		 test	 ecx, ecx
  00028	0f 84 6d 01 00
	00		 je	 $LN2@CheckCombo

; 79   : #endif
; 80   : 	{	// 콤보 스킬이 사용가능하면..
; 81   : 		int pos = GetSkillPos(skillnum);

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?GetSkillPos@CComboAttack@@AAEHH@Z ; CComboAttack::GetSkillPos
  0003a	89 45 f4	 mov	 DWORD PTR _pos$2[ebp], eax

; 82   : 		if( pos == 0 )

  0003d	83 7d f4 00	 cmp	 DWORD PTR _pos$2[ebp], 0
  00041	75 3b		 jne	 SHORT $LN3@CheckCombo

; 83   : 		{	// 첫번째 콤보 등록
; 84   : 			lpObj->comboSkill.ProgressIndex = 0;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00046	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 85   : 			lpObj->comboSkill.dwTime = GetTickCount()+3*1000;

  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00056	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0005e	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 86   : 			lpObj->comboSkill.Skill[0] = skillnum;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0006f	8a 45 0c	 mov	 al, BYTE PTR _skillnum$[ebp]
  00072	88 84 0a 94 00
	00 00		 mov	 BYTE PTR [edx+ecx+148], al

; 87   : 		}		

  00079	e9 1d 01 00 00	 jmp	 $LN2@CheckCombo
$LN3@CheckCombo:

; 88   : 		else if( pos == 1 )

  0007e	83 7d f4 01	 cmp	 DWORD PTR _pos$2[ebp], 1
  00082	0f 85 e6 00 00
	00		 jne	 $LN5@CheckCombo

; 89   : 		{
; 90   : 			if( lpObj->comboSkill.Skill[0] == 0xff )

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	6b c8 00	 imul	 ecx, eax, 0
  00090	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00093	0f b6 84 0a 94
	00 00 00	 movzx	 eax, BYTE PTR [edx+ecx+148]
  0009b	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000a0	75 1a		 jne	 SHORT $LN7@CheckCombo

; 91   : 			{	// 콤보가 되지 않는다
; 92   : 				lpObj->comboSkill.Init();							

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a5	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000ab	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 93   : 				return FALSE;

  000b0	33 c0		 xor	 eax, eax
  000b2	e9 e6 00 00 00	 jmp	 $LN1@CheckCombo

; 94   : 			}

  000b7	e9 b0 00 00 00	 jmp	 $LN8@CheckCombo
$LN7@CheckCombo:

; 95   : 			else
; 96   : 			{
; 97   : 				int tick = GetTickCount();

  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000c2	89 45 f0	 mov	 DWORD PTR _tick$1[ebp], eax

; 98   : 				if( lpObj->comboSkill.dwTime < GetTickCount() )

  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000ce	39 81 90 00 00
	00		 cmp	 DWORD PTR [ecx+144], eax
  000d4	73 17		 jae	 SHORT $LN9@CheckCombo

; 99   : 				{	// 3초보다 크면 콤보 캔슬
; 100  : 					lpObj->comboSkill.Init();					

  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000d9	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000df	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 101  : 					return FALSE;

  000e4	33 c0		 xor	 eax, eax
  000e6	e9 b2 00 00 00	 jmp	 $LN1@CheckCombo

; 102  : 				}

  000eb	eb 7f		 jmp	 SHORT $LN8@CheckCombo
$LN9@CheckCombo:

; 103  : 				else
; 104  : 				{
; 105  : 					if( lpObj->comboSkill.ProgressIndex == 0 )

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000f0	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  000f7	75 38		 jne	 SHORT $LN11@CheckCombo

; 106  : 					{	// 두번째 콤보 등록
; 107  : 						lpObj->comboSkill.ProgressIndex = 1;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000fc	c7 80 98 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+152], 1

; 108  : 						lpObj->comboSkill.dwTime = GetTickCount()+3*1000;

  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0010c	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  00111	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00114	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 109  : 						lpObj->comboSkill.Skill[1] = skillnum;						

  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	c1 e0 00	 shl	 eax, 0
  00122	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00125	8a 55 0c	 mov	 dl, BYTE PTR _skillnum$[ebp]
  00128	88 94 01 94 00
	00 00		 mov	 BYTE PTR [ecx+eax+148], dl

; 110  : 					}

  0012f	eb 3b		 jmp	 SHORT $LN8@CheckCombo
$LN11@CheckCombo:

; 111  : 					else
; 112  : 					{	
; 113  : 						if( lpObj->comboSkill.Skill[1] != skillnum )

  00131	b8 01 00 00 00	 mov	 eax, 1
  00136	c1 e0 00	 shl	 eax, 0
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0013c	0f b6 94 01 94
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+148]
  00144	3b 55 0c	 cmp	 edx, DWORD PTR _skillnum$[ebp]
  00147	74 15		 je	 SHORT $LN13@CheckCombo

; 114  : 						{	// 콤보 완성
; 115  : 							lpObj->comboSkill.Init();

  00149	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0014c	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00152	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init

; 116  : 							return TRUE;

  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	eb 3f		 jmp	 SHORT $LN1@CheckCombo
$LN13@CheckCombo:

; 117  : 						}	
; 118  : 
; 119  : 						lpObj->comboSkill.Init();						

  0015e	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00161	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00167	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
$LN8@CheckCombo:

; 120  : 					}
; 121  : 				}
; 122  : 			}
; 123  : 		}

  0016c	eb 2d		 jmp	 SHORT $LN2@CheckCombo
$LN5@CheckCombo:

; 124  : 		else
; 125  : 		{	// 사용가능한 콤보 스킬 목록에 없다
; 126  : 			lpObj->comboSkill.ProgressIndex = -1;

  0016e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00171	c7 80 98 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+152], -1

; 127  : 			lpObj->comboSkill.dwTime = 0;

  0017b	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0017e	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 128  : 			lpObj->comboSkill.Skill[0] = -1;			

  00188	b8 01 00 00 00	 mov	 eax, 1
  0018d	6b c8 00	 imul	 ecx, eax, 0
  00190	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00193	c6 84 0a 94 00
	00 00 ff	 mov	 BYTE PTR [edx+ecx+148], 255 ; 000000ffH
$LN2@CheckCombo:

; 129  : 		}
; 130  : 	}	
; 131  : #endif
; 132  : 	return FALSE;

  0019b	33 c0		 xor	 eax, eax
$LN1@CheckCombo:

; 133  : }

  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	5b		 pop	 ebx
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 08 00	 ret	 8
?CheckCombo@CComboAttack@@QAEHHH@Z ENDP			; CComboAttack::CheckCombo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ??1CComboAttack@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComboAttack@@UAE@XZ PROC				; CComboAttack::~CComboAttack, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 35   : 
; 36   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CComboAttack@@UAE@XZ ENDP				; CComboAttack::~CComboAttack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ??0CComboAttack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComboAttack@@QAE@XZ PROC				; CComboAttack::CComboAttack, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 30   : 
; 31   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CComboAttack@@QAE@XZ ENDP				; CComboAttack::CComboAttack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ?GetSkillPos@CComboAttack@@AAEHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_skillnum$ = 8						; size = 4
?GetSkillPos@CComboAttack@@AAEHH@Z PROC			; CComboAttack::GetSkillPos, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	switch(skillnum)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _skillnum$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 13	 sub	 ecx, 19			; 00000013H
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 18	 cmp	 DWORD PTR tv64[ebp], 24	; 00000018H
  0001f	77 1c		 ja	 SHORT $LN2@GetSkillPo
  00021	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00024	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN7@GetSkillPo[edx]
  0002b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN8@GetSkillPo[eax*4]
$LN4@GetSkillPo:

; 41   : 	{
; 42   : 		case AT_SKILL_SWORD1:		//내려찍기
; 43   : 		case AT_SKILL_SWORD2:		//찌르기
; 44   : 		case AT_SKILL_SWORD3:		//올려치기
; 45   : 		case AT_SKILL_SWORD4:		//돌려치기
; 46   : 		case AT_SKILL_SWORD5:		//베기
; 47   : 			return 0;

  00032	33 c0		 xor	 eax, eax
  00034	eb 0a		 jmp	 SHORT $LN1@GetSkillPo
$LN5@GetSkillPo:

; 48   : 		case AT_SKILL_WHEEL:		// 회오리베기
; 49   : 		case AT_SKILL_BLOWOFFURY:	// 분노의 일격 
; 50   : 		case AT_SKILL_STRIKE:		// 블로우
; 51   : #ifdef ADD_SEASON4_NEW_SKILL_20080522	// 파괴의 일겨 콤보 2단계에 추가
; 52   : 		case AT_SKILL_DESTRUCTION:	// 파괴의 일격
; 53   : #endif	// ADD_SEASON4_NEW_SKILL_20080522			
; 54   : 			return 1;

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 03		 jmp	 SHORT $LN1@GetSkillPo
$LN2@GetSkillPo:

; 55   : 	}	
; 56   : 
; 57   : #ifdef ADD_MASTER_LEVEL_SKILL_SYSTEM_ACTIVE_20080107	// 회오리베기강화(기사) : 콤보 등록
; 58   : 	if( g_MasterSkillSystem.GetBaseMasterLevelSkill( skillnum ) == AT_SKILL_ML_STRENGTHEN_WHEEL_KNIGHT )
; 59   : 		return 1;
; 60   : #endif
; 61   : 
; 62   : #ifdef UPDATE_MASTER_LEVEL_4RANK_20080428	// 콤보등록(분노의 일격, 블로우)
; 63   : 	if( g_MasterSkillSystem.GetBaseMasterLevelSkill( skillnum ) == AT_SKILL_ML_STRENGTHEN_STRIKE	// 블로우 강화(기사)
; 64   : 		|| g_MasterSkillSystem.GetBaseMasterLevelSkill( skillnum ) == AT_SKILL_ML_STRENGTHEN_BLOWOFFURY	// 분노의 일격 강화(기사)
; 65   : 		)
; 66   : 		return 1;	
; 67   : #endif	// UPDATE_MASTER_LEVEL_4RANK_20080428
; 68   : 	
; 69   : 	return -1;

  0003d	83 c8 ff	 or	 eax, -1
$LN1@GetSkillPo:

; 70   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
  00049	0f 1f 00	 npad	 3
$LN8@GetSkillPo:
  0004c	00 00 00 00	 DD	 $LN4@GetSkillPo
  00050	00 00 00 00	 DD	 $LN5@GetSkillPo
  00054	00 00 00 00	 DD	 $LN2@GetSkillPo
$LN7@GetSkillPo:
  00058	00		 DB	 0
  00059	00		 DB	 0
  0005a	00		 DB	 0
  0005b	00		 DB	 0
  0005c	00		 DB	 0
  0005d	02		 DB	 2
  0005e	02		 DB	 2
  0005f	02		 DB	 2
  00060	02		 DB	 2
  00061	02		 DB	 2
  00062	02		 DB	 2
  00063	02		 DB	 2
  00064	02		 DB	 2
  00065	02		 DB	 2
  00066	02		 DB	 2
  00067	02		 DB	 2
  00068	02		 DB	 2
  00069	02		 DB	 2
  0006a	02		 DB	 2
  0006b	02		 DB	 2
  0006c	02		 DB	 2
  0006d	02		 DB	 2
  0006e	01		 DB	 1
  0006f	01		 DB	 1
  00070	01		 DB	 1
?GetSkillPos@CComboAttack@@AAEHH@Z ENDP			; CComboAttack::GetSkillPos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.h
;	COMDAT ?Init@ComboSkillData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@ComboSkillData@@QAEXXZ PROC			; ComboSkillData::Init, COMDAT
; _this$ = ecx

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 		dwTime = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 25   : #ifdef MODIFY_COMBOSKILLDATA_SKILLNUMBER_20080801
; 26   : 		Skill[0] = -1;	Skill[1] = -1;	Skill[2] = -1;
; 27   : #else	// MODIFY_COMBOSKILLDATA_SKILLNUMBER_20080801
; 28   : 		Skill[0] = 0xff;	Skill[1] = 0xff;	Skill[2] = 0xff;

  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	6b c8 00	 imul	 ecx, eax, 0
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	c6 44 0a 04 ff	 mov	 BYTE PTR [edx+ecx+4], 255 ; 000000ffH
  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	c1 e0 00	 shl	 eax, 0
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	c6 44 01 04 ff	 mov	 BYTE PTR [ecx+eax+4], 255 ; 000000ffH
  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	d1 e0		 shl	 eax, 1
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c6 44 01 04 ff	 mov	 BYTE PTR [ecx+eax+4], 255 ; 000000ffH

; 29   : #endif	 // MODIFY_COMBOSKILLDATA_SKILLNUMBER_20080801
; 30   : 		ProgressIndex = -1;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 31   : 	}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?Init@ComboSkillData@@QAEXXZ ENDP			; ComboSkillData::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\ComboAttack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
