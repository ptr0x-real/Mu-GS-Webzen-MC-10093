; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XorTable@@3PAEA				; XorTable
_DATA	SEGMENT
?XorTable@@3PAEA DB 0a1H				; XorTable
	DB	0b2H
	DB	0aaH
	DB	012H
	DB	023H
	DB	0f1H
	DB	0f3H
	DB	0d3H
	DB	078H
	DB	02H
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CWZScriptEncode@@QAE@XZ			; CWZScriptEncode::CWZScriptEncode
PUBLIC	??1CWZScriptEncode@@UAE@XZ			; CWZScriptEncode::~CWZScriptEncode
PUBLIC	?Open@CWZScriptEncode@@QAEHPAD@Z		; CWZScriptEncode::Open
PUBLIC	?Close@CWZScriptEncode@@QAEXXZ			; CWZScriptEncode::Close
PUBLIC	?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer
PUBLIC	?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ; CWZScriptEncode::GetToken
PUBLIC	?GetNumber@CWZScriptEncode@@QAEHXZ		; CWZScriptEncode::GetNumber
PUBLIC	?GetString@CWZScriptEncode@@QAEPADXZ		; CWZScriptEncode::GetString
PUBLIC	?Encode@CWZScriptEncode@@QAEXPADH@Z		; CWZScriptEncode::Encode
PUBLIC	?GetC@CWZScriptEncode@@IAEHXZ			; CWZScriptEncode::GetC
PUBLIC	?UnGetC@CWZScriptEncode@@IAEXH@Z		; CWZScriptEncode::UnGetC
PUBLIC	??_GCWZScriptEncode@@UAEPAXI@Z			; CWZScriptEncode::`scalar deleting destructor'
PUBLIC	??_7CWZScriptEncode@@6B@			; CWZScriptEncode::`vftable'
PUBLIC	??_R4CWZScriptEncode@@6B@			; CWZScriptEncode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWZScriptEncode@@@8			; CWZScriptEncode `RTTI Type Descriptor'
PUBLIC	??_R3CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWZScriptEncode@@8		; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atof:PROC
EXTRN	??_ECWZScriptEncode@@UAEPAXI@Z:PROC		; CWZScriptEncode::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CWZScriptEncode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWZScriptEncode@@8 DD FLAT:??_R0?AVCWZScriptEncode@@@8 ; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R2CWZScriptEncode@@8
rdata$r	SEGMENT
??_R2CWZScriptEncode@@8 DD FLAT:??_R1A@?0A@EA@CWZScriptEncode@@8 ; CWZScriptEncode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWZScriptEncode@@8
rdata$r	SEGMENT
??_R3CWZScriptEncode@@8 DD 00H				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWZScriptEncode@@@8
data$r	SEGMENT
??_R0?AVCWZScriptEncode@@@8 DD FLAT:??_7type_info@@6B@	; CWZScriptEncode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWZScriptEncode@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWZScriptEncode@@6B@
rdata$r	SEGMENT
??_R4CWZScriptEncode@@6B@ DD 00H			; CWZScriptEncode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWZScriptEncode@@@8
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_7CWZScriptEncode@@6B@
CONST	SEGMENT
??_7CWZScriptEncode@@6B@ DD FLAT:??_R4CWZScriptEncode@@6B@ ; CWZScriptEncode::`vftable'
	DD	FLAT:??_ECWZScriptEncode@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CWZScriptEncode@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWZScriptEncode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWZScriptEncode@@UAEPAXI@Z PROC			; CWZScriptEncode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWZScriptEncode@@UAE@XZ ; CWZScriptEncode::~CWZScriptEncode
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 84 00 00 00	 push	 132			; 00000084H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCWZScriptEncode@@UAEPAXI@Z ENDP			; CWZScriptEncode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?UnGetC@CWZScriptEncode@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ch$ = 8						; size = 4
?UnGetC@CWZScriptEncode@@IAEXH@Z PROC			; CWZScriptEncode::UnGetC, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	if( m_iBufferCount <= 0 )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	7f 02		 jg	 SHORT $LN2@UnGetC

; 94   : 		return;

  00015	eb 21		 jmp	 SHORT $LN1@UnGetC
$LN2@UnGetC:

; 95   : 	
; 96   : 	m_iBufferCount--;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001d	83 e9 01	 sub	 ecx, 1
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 97   : 	m_pBuffer[m_iBufferCount] = ch;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00032	8a 55 08	 mov	 dl, BYTE PTR _ch$[ebp]
  00035	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN1@UnGetC:

; 98   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?UnGetC@CWZScriptEncode@@IAEXH@Z ENDP			; CWZScriptEncode::UnGetC
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?GetC@CWZScriptEncode@@IAEHXZ
_TEXT	SEGMENT
tv78 = -72						; size = 4
_this$ = -4						; size = 4
?GetC@CWZScriptEncode@@IAEHXZ PROC			; CWZScriptEncode::GetC, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 	if( m_iBufferCount >= m_iBufferSize )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00015	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00018	7c 05		 jl	 SHORT $LN2@GetC

; 86   : 		return EOF;

  0001a	83 c8 ff	 or	 eax, -1
  0001d	eb 25		 jmp	 SHORT $LN1@GetC
$LN2@GetC:

; 87   : 
; 88   : 	return m_pBuffer[m_iBufferCount++];

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002b	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  0002f	89 4d b8	 mov	 DWORD PTR tv78[ebp], ecx
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00038	83 c0 01	 add	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00041	8b 45 b8	 mov	 eax, DWORD PTR tv78[ebp]
$LN1@GetC:

; 89   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?GetC@CWZScriptEncode@@IAEHXZ ENDP			; CWZScriptEncode::GetC
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?Encode@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Encode@CWZScriptEncode@@QAEXPADH@Z PROC		; CWZScriptEncode::Encode, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	for( int i = 0; i < size; i++ )

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@Encode
$LN2@Encode:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Encode:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp]
  00024	7d 27		 jge	 SHORT $LN1@Encode

; 78   : 	{
; 79   : 		buffer[i] = buffer[i]^XorTable[i%MAX_XORCODE_TABLE_COUNT];

  00026	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00029	03 45 f8	 add	 eax, DWORD PTR _i$1[ebp]
  0002c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00032	99		 cdq
  00033	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  00038	f7 fe		 idiv	 esi
  0003a	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR ?XorTable@@3PAEA[edx]
  00041	33 ca		 xor	 ecx, edx
  00043	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00046	03 45 f8	 add	 eax, DWORD PTR _i$1[ebp]
  00049	88 08		 mov	 BYTE PTR [eax], cl

; 80   : 	}

  0004b	eb c8		 jmp	 SHORT $LN2@Encode
$LN1@Encode:

; 81   : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?Encode@CWZScriptEncode@@QAEXPADH@Z ENDP		; CWZScriptEncode::Encode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?GetString@CWZScriptEncode@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@CWZScriptEncode@@QAEPADXZ PROC		; CWZScriptEncode::GetString, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 	return	TokenString;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 1c	 add	 eax, 28			; 0000001cH

; 115  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetString@CWZScriptEncode@@QAEPADXZ ENDP		; CWZScriptEncode::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?GetNumber@CWZScriptEncode@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumber@CWZScriptEncode@@QAEHXZ PROC			; CWZScriptEncode::GetNumber, COMDAT
; _this$ = ecx

; 108  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	return	(int)TokenNumber;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	f3 0f 2c 40 18	 cvttss2si eax, DWORD PTR [eax+24]

; 110  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetNumber@CWZScriptEncode@@QAEHXZ ENDP			; CWZScriptEncode::GetNumber
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ
_TEXT	SEGMENT
tv89 = -184						; size = 4
_TempString$ = -116					; size = 100
_p$ = -16						; size = 4
_ch$ = -9						; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ PROC	; CWZScriptEncode::GetToken, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	unsigned char ch;
; 120  : 	TokenString[0] = '\0';

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c6 44 0a 1c 00	 mov	 BYTE PTR [edx+ecx+28], 0
$LN4@GetToken:

; 121  : 	do
; 122  : 	{
; 123  : 		if ( (ch =(unsigned char) GetC()) == (BYTE)EOF) return T_END;

  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00031	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00034	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00038	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0003d	75 0a		 jne	 SHORT $LN15@GetToken
  0003f	b8 02 00 00 00	 mov	 eax, 2
  00044	e9 9b 02 00 00	 jmp	 $LN7@GetToken
$LN15@GetToken:

; 124  : 		if (ch=='/' && (ch =(unsigned char) GetC() )=='/')	

  00049	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0004d	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00050	75 2a		 jne	 SHORT $LN6@GetToken
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0005a	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0005d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00061	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00064	75 16		 jne	 SHORT $LN6@GetToken
$LN5@GetToken:

; 125  : 		{
; 126  : #ifdef MODIFY_ODBC_DSN_IN_FILE_20050811
; 127  : 			while (ch != '\n' && ch != (BYTE)EOF) {
; 128  : 				ch = (unsigned char) GetC();
; 129  : 			}
; 130  : #else
; 131  : 			while( (ch = (unsigned char) GetC()) != '\n' );

  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0006e	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00071	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00075	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00078	74 02		 je	 SHORT $LN6@GetToken
  0007a	eb ea		 jmp	 SHORT $LN5@GetToken
$LN6@GetToken:

; 132  : #endif			
; 133  : 		}
; 134  : 	} while(  isspace(ch) );

  0007c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _isspace
  00086	83 c4 04	 add	 esp, 4
  00089	85 c0		 test	 eax, eax
  0008b	75 9c		 jne	 SHORT $LN4@GetToken

; 135  : 	
; 136  : 	char *p, TempString[100];
; 137  : 	switch(ch)

  0008d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00091	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00097	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  0009d	83 e9 22	 sub	 ecx, 34			; 00000022H
  000a0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], ecx
  000a6	83 bd 48 ff ff
	ff 5b		 cmp	 DWORD PTR tv89[ebp], 91	; 0000005bH
  000ad	0f 87 80 01 00
	00		 ja	 $LN26@GetToken
  000b3	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv89[ebp]
  000b9	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@GetToken[edx]
  000c0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@GetToken[eax*4]
$LN17@GetToken:

; 138  : 	{	
; 139  : 	case '#':
; 140  : 		return CurrentToken = T_COMMAND;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 80 80 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+128], 35	; 00000023H
  000d4	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000d9	e9 06 02 00 00	 jmp	 $LN7@GetToken
$LN18@GetToken:

; 141  : 	case ';':
; 142  : 		return CurrentToken = T_SEMICOLON;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	c7 80 80 00 00
	00 3b 00 00 00	 mov	 DWORD PTR [eax+128], 59	; 0000003bH
  000eb	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000f0	e9 ef 01 00 00	 jmp	 $LN7@GetToken
$LN19@GetToken:

; 143  : 	case ',':
; 144  : 		return CurrentToken = T_COMMA;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	c7 80 80 00 00
	00 2c 00 00 00	 mov	 DWORD PTR [eax+128], 44	; 0000002cH
  00102	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  00107	e9 d8 01 00 00	 jmp	 $LN7@GetToken
$LN20@GetToken:

; 145  : 	case '{':
; 146  : 		return CurrentToken = T_LP;

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	c7 80 80 00 00
	00 7b 00 00 00	 mov	 DWORD PTR [eax+128], 123 ; 0000007bH
  00119	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  0011e	e9 c1 01 00 00	 jmp	 $LN7@GetToken
$LN21@GetToken:

; 147  : 	case '}':
; 148  : 		return CurrentToken = T_RP;

  00123	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00126	c7 80 80 00 00
	00 7d 00 00 00	 mov	 DWORD PTR [eax+128], 125 ; 0000007dH
  00130	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00135	e9 aa 01 00 00	 jmp	 $LN7@GetToken
$LN22@GetToken:

; 149  : 	case '0':	case '1':	case '2':	case '3':	case '4':
; 150  : 	case '5':	case '6':	case '7':	case '8':	case '9':
; 151  : 	case '.':	case '-':
; 152  : 		UnGetC(ch);

  0013a	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 153  : 		p = TempString;

  00147	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  0014a	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN9@GetToken:

; 154  : 		while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch=='.' || isdigit(ch) || ch=='-') )

  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00155	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00158	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0015c	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00161	74 36		 je	 SHORT $LN10@GetToken
  00163	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00167	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0016a	74 1a		 je	 SHORT $LN23@GetToken
  0016c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _isdigit
  00176	83 c4 04	 add	 esp, 4
  00179	85 c0		 test	 eax, eax
  0017b	75 09		 jne	 SHORT $LN23@GetToken
  0017d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00181	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00184	75 13		 jne	 SHORT $LN10@GetToken
$LN23@GetToken:

; 155  : 			*p++ = ch;

  00186	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00189	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  0018c	88 08		 mov	 BYTE PTR [eax], cl
  0018e	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  00191	83 c2 01	 add	 edx, 1
  00194	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  00197	eb b4		 jmp	 SHORT $LN9@GetToken
$LN10@GetToken:

; 156  : 		*p = 0;

  00199	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0019c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 157  : 		TokenNumber = (float)atof(TempString);

  0019f	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _atof
  001a8	83 c4 04	 add	 esp, 4
  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 158  : 		//			sscanf(TempString," %f ",&TokenNumber);
; 159  : 		return CurrentToken = T_NUMBER;

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+128], 1
  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	e9 1c 01 00 00	 jmp	 $LN7@GetToken
$LN24@GetToken:

; 160  : 	case '"':
; 161  : 		p = TokenString;

  001c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	83 c0 1c	 add	 eax, 28			; 0000001cH
  001ce	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN11@GetToken:

; 162  : 		while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch!='"'))// || isalnum(ch)) )

  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  001d9	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  001dc	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  001e0	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001e5	74 1c		 je	 SHORT $LN12@GetToken
  001e7	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  001eb	83 f8 22	 cmp	 eax, 34			; 00000022H
  001ee	74 13		 je	 SHORT $LN12@GetToken

; 163  : 			*p++ = ch;

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  001f3	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  001f6	88 08		 mov	 BYTE PTR [eax], cl
  001f8	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  001fb	83 c2 01	 add	 edx, 1
  001fe	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  00201	eb ce		 jmp	 SHORT $LN11@GetToken
$LN12@GetToken:

; 164  : 		if (ch!='"')

  00203	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00207	83 f8 22	 cmp	 eax, 34			; 00000022H
  0020a	74 0d		 je	 SHORT $LN25@GetToken

; 165  : 			UnGetC(ch);

  0020c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00210	50		 push	 eax
  00211	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC
$LN25@GetToken:

; 166  : 		*p = 0;

  00219	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0021c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 167  : 		return CurrentToken = T_NAME;

  0021f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00222	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  0022c	33 c0		 xor	 eax, eax
  0022e	e9 b1 00 00 00	 jmp	 $LN7@GetToken
$LN26@GetToken:

; 168  : 	default:
; 169  : 		if (isalpha(ch))	

  00233	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 _isalpha
  0023d	83 c4 04	 add	 esp, 4
  00240	85 c0		 test	 eax, eax
  00242	0f 84 8a 00 00
	00		 je	 $LN27@GetToken

; 170  : 		{
; 171  : 			p = TokenString;

  00248	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0024b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0024e	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 172  : 			*p++ = ch;

  00251	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00254	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  00257	88 08		 mov	 BYTE PTR [eax], cl
  00259	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  0025c	83 c2 01	 add	 edx, 1
  0025f	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
$LN13@GetToken:

; 173  : 			while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch=='.' || ch=='_' || isalnum(ch)) )

  00262	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0026a	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0026d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00271	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00276	74 36		 je	 SHORT $LN14@GetToken
  00278	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0027c	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0027f	74 1a		 je	 SHORT $LN28@GetToken
  00281	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00285	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00288	74 11		 je	 SHORT $LN28@GetToken
  0028a	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _isalnum
  00294	83 c4 04	 add	 esp, 4
  00297	85 c0		 test	 eax, eax
  00299	74 13		 je	 SHORT $LN14@GetToken
$LN28@GetToken:

; 174  : 				*p++ = ch;

  0029b	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0029e	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  002a1	88 08		 mov	 BYTE PTR [eax], cl
  002a3	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  002a6	83 c2 01	 add	 edx, 1
  002a9	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  002ac	eb b4		 jmp	 SHORT $LN13@GetToken
$LN14@GetToken:

; 175  : 			UnGetC(ch);

  002ae	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  002b2	50		 push	 eax
  002b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b6	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 176  : 			*p = 0;

  002bb	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  002be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 177  : 			return CurrentToken = T_NAME;

  002c1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002c4	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  002ce	33 c0		 xor	 eax, eax
  002d0	eb 12		 jmp	 SHORT $LN7@GetToken
$LN27@GetToken:

; 178  : 		}
; 179  : 		return CurrentToken = T_SMD_ERROR;

  002d2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	c7 80 80 00 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+128], 60	; 0000003cH
  002df	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN7@GetToken:

; 180  : 	}
; 181  : }

  002e4	5f		 pop	 edi
  002e5	5e		 pop	 esi
  002e6	5b		 pop	 ebx
  002e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ea	33 cd		 xor	 ecx, ebp
  002ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f1	8b e5		 mov	 esp, ebp
  002f3	5d		 pop	 ebp
  002f4	c3		 ret	 0
  002f5	0f 1f 00	 npad	 3
$LN31@GetToken:
  002f8	00 00 00 00	 DD	 $LN24@GetToken
  002fc	00 00 00 00	 DD	 $LN17@GetToken
  00300	00 00 00 00	 DD	 $LN19@GetToken
  00304	00 00 00 00	 DD	 $LN22@GetToken
  00308	00 00 00 00	 DD	 $LN18@GetToken
  0030c	00 00 00 00	 DD	 $LN20@GetToken
  00310	00 00 00 00	 DD	 $LN21@GetToken
  00314	00 00 00 00	 DD	 $LN26@GetToken
$LN30@GetToken:
  00318	00		 DB	 0
  00319	01		 DB	 1
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	02		 DB	 2
  00323	03		 DB	 3
  00324	03		 DB	 3
  00325	07		 DB	 7
  00326	03		 DB	 3
  00327	03		 DB	 3
  00328	03		 DB	 3
  00329	03		 DB	 3
  0032a	03		 DB	 3
  0032b	03		 DB	 3
  0032c	03		 DB	 3
  0032d	03		 DB	 3
  0032e	03		 DB	 3
  0032f	03		 DB	 3
  00330	07		 DB	 7
  00331	04		 DB	 4
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	07		 DB	 7
  00336	07		 DB	 7
  00337	07		 DB	 7
  00338	07		 DB	 7
  00339	07		 DB	 7
  0033a	07		 DB	 7
  0033b	07		 DB	 7
  0033c	07		 DB	 7
  0033d	07		 DB	 7
  0033e	07		 DB	 7
  0033f	07		 DB	 7
  00340	07		 DB	 7
  00341	07		 DB	 7
  00342	07		 DB	 7
  00343	07		 DB	 7
  00344	07		 DB	 7
  00345	07		 DB	 7
  00346	07		 DB	 7
  00347	07		 DB	 7
  00348	07		 DB	 7
  00349	07		 DB	 7
  0034a	07		 DB	 7
  0034b	07		 DB	 7
  0034c	07		 DB	 7
  0034d	07		 DB	 7
  0034e	07		 DB	 7
  0034f	07		 DB	 7
  00350	07		 DB	 7
  00351	07		 DB	 7
  00352	07		 DB	 7
  00353	07		 DB	 7
  00354	07		 DB	 7
  00355	07		 DB	 7
  00356	07		 DB	 7
  00357	07		 DB	 7
  00358	07		 DB	 7
  00359	07		 DB	 7
  0035a	07		 DB	 7
  0035b	07		 DB	 7
  0035c	07		 DB	 7
  0035d	07		 DB	 7
  0035e	07		 DB	 7
  0035f	07		 DB	 7
  00360	07		 DB	 7
  00361	07		 DB	 7
  00362	07		 DB	 7
  00363	07		 DB	 7
  00364	07		 DB	 7
  00365	07		 DB	 7
  00366	07		 DB	 7
  00367	07		 DB	 7
  00368	07		 DB	 7
  00369	07		 DB	 7
  0036a	07		 DB	 7
  0036b	07		 DB	 7
  0036c	07		 DB	 7
  0036d	07		 DB	 7
  0036e	07		 DB	 7
  0036f	07		 DB	 7
  00370	07		 DB	 7
  00371	05		 DB	 5
  00372	07		 DB	 7
  00373	06		 DB	 6
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ENDP	; CWZScriptEncode::GetToken
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z PROC ; CWZScriptEncode::SetScriptParsingBuffer, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	m_pBuffer = buffer;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 103  : 	m_iBufferSize = size;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 104  : 	m_iBufferCount = 0;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 105  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ENDP ; CWZScriptEncode::SetScriptParsingBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?Close@CWZScriptEncode@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CWZScriptEncode@@QAEXXZ PROC			; CWZScriptEncode::Close, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	if( m_pBuffer )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	74 0f		 je	 SHORT $LN1@Close

; 72   : 		free(m_pBuffer);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 04	 add	 esp, 4
$LN1@Close:

; 73   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?Close@CWZScriptEncode@@QAEXXZ ENDP			; CWZScriptEncode::Close
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?Open@CWZScriptEncode@@QAEHPAD@Z
_TEXT	SEGMENT
_iReadFileSize$ = -16					; size = 4
_pBuffer$ = -12						; size = 4
_filesize$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Open@CWZScriptEncode@@QAEHPAD@Z PROC			; CWZScriptEncode::Open, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	if( m_hFile !=  INVALID_HANDLE_VALUE)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  00013	74 0d		 je	 SHORT $LN2@Open

; 40   : 	{
; 41   : 		CloseHandle(m_hFile);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@Open:

; 42   : 	}
; 43   : 	
; 44   : 	m_hFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

  00022	6a 00		 push	 0
  00024	68 80 00 00 00	 push	 128			; 00000080H
  00029	6a 03		 push	 3
  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00034	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 45   : 
; 46   : 	if( m_hFile == INVALID_HANDLE_VALUE )

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  0004b	75 07		 jne	 SHORT $LN3@Open

; 47   : 		return 0;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 80 00 00 00	 jmp	 $LN1@Open
$LN3@Open:

; 48   : 
; 49   : 	int filesize = GetFileSize(m_hFile, NULL);

  00054	6a 00		 push	 0
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005c	51		 push	 ecx
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00063	89 45 f8	 mov	 DWORD PTR _filesize$[ebp], eax

; 50   : 
; 51   : 	char* pBuffer = (char*)malloc(filesize);

  00066	8b 45 f8	 mov	 eax, DWORD PTR _filesize$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _malloc
  0006f	83 c4 04	 add	 esp, 4
  00072	89 45 f4	 mov	 DWORD PTR _pBuffer$[ebp], eax

; 52   : 
; 53   : 	DWORD iReadFileSize;
; 54   : 	ReadFile(m_hFile, pBuffer, filesize, &iReadFileSize, NULL);

  00075	6a 00		 push	 0
  00077	8d 45 f0	 lea	 eax, DWORD PTR _iReadFileSize$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _filesize$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 f4	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00082	52		 push	 edx
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00089	51		 push	 ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 55   : 
; 56   : 	if( iReadFileSize == 0 )

  00090	83 7d f0 00	 cmp	 DWORD PTR _iReadFileSize$[ebp], 0
  00094	75 0c		 jne	 SHORT $LN4@Open

; 57   : 	{
; 58   : 		Close();

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close

; 59   : 		return 0;

  0009e	33 c0		 xor	 eax, eax
  000a0	eb 32		 jmp	 SHORT $LN1@Open
$LN4@Open:

; 60   : 	}	
; 61   : 
; 62   : 	Encode(pBuffer, iReadFileSize);

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?Encode@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::Encode

; 63   : 	SetScriptParsingBuffer(pBuffer, iReadFileSize);

  000b2	8b 45 f0	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer

; 64   : 
; 65   : 	CloseHandle(m_hFile);

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c8	51		 push	 ecx
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 66   : 	return 1;

  000cf	b8 01 00 00 00	 mov	 eax, 1
$LN1@Open:

; 67   : }

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
?Open@CWZScriptEncode@@QAEHPAD@Z ENDP			; CWZScriptEncode::Open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ??1CWZScriptEncode@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CWZScriptEncode@@UAE@XZ PROC				; CWZScriptEncode::~CWZScriptEncode, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWZScriptEncode@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWZScriptEncode@@6B@

; 34   : 	Close();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close

; 35   : }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWZScriptEncode@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWZScriptEncode@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWZScriptEncode@@UAE@XZ ENDP				; CWZScriptEncode::~CWZScriptEncode
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ??0CWZScriptEncode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWZScriptEncode@@QAE@XZ PROC				; CWZScriptEncode::CWZScriptEncode, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWZScriptEncode@@6B@

; 26   : 	m_pBuffer = NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 27   : 	m_iBufferSize = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 28   : 	m_iBufferCount = 0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 29   : 	m_hFile = INVALID_HANDLE_VALUE;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1

; 30   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0CWZScriptEncode@@QAE@XZ ENDP				; CWZScriptEncode::CWZScriptEncode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WZScriptEncode.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
