; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0WZQueue@@QAE@I@Z				; WZQueue::WZQueue
PUBLIC	??1WZQueue@@QAE@XZ				; WZQueue::~WZQueue
PUBLIC	?GetCount@WZQueue@@QAEIXZ			; WZQueue::GetCount
PUBLIC	?AddToQueue@WZQueue@@QAEHPBEIEH@Z		; WZQueue::AddToQueue
PUBLIC	?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PBEIEH@Z ; WZQueue::AddToQueueList
PUBLIC	?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z		; WZQueue::GetFromQueue
PUBLIC	?Init@WZQueue@@QAEXXZ				; WZQueue::Init
PUBLIC	?Free@WZQueue@@QAEXXZ				; WZQueue::Free
PUBLIC	?StartQ@WZQueue@@QAEHXZ				; WZQueue::StartQ
PUBLIC	?NextQ@WZQueue@@QAEHXZ				; WZQueue::NextQ
PUBLIC	?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ; WZQueue::GetCurData
PUBLIC	?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z	; WZQueue::Pop
PUBLIC	?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z	; WZQueue::DeleteNode
PUBLIC	?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ; WZQueue::SetCurDataSending
PUBLIC	?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ	; WZQueue::GetHeadNode
PUBLIC	?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z		; WZQueue::AddTail
PUBLIC	?DeleteAllNodes@WZQueue@@AAEXXZ			; WZQueue::DeleteAllNodes
EXTRN	_memcpy:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z DD 0fffffffeH
	DD	00H
	DD	0ffffff90H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN12@Pop
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1WZQueue@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?DeleteAllNodes@WZQueue@@AAEXXZ
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?DeleteAllNodes@WZQueue@@AAEXXZ PROC			; WZQueue::DeleteAllNodes, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 221  : 	ListNode*	pNode = NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 222  : 
; 223  : 	EnterCriticalSection(&m_CriticalSection);

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
$LN2@DeleteAllN:

; 224  : 
; 225  : 	// DO NOT DELETE Object that pointed by pObject!!!!
; 226  : 	while(pNode = GetHeadNode())

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  00028	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax
  0002b	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  0002f	74 15		 je	 SHORT $LN3@DeleteAllN

; 227  : 	{
; 228  : 		HeapFree(GetProcessHeap(), 0, pNode);

  00031	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00034	50		 push	 eax
  00035	6a 00		 push	 0
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 229  : 	}

  00044	eb da		 jmp	 SHORT $LN2@DeleteAllN
$LN3@DeleteAllN:

; 230  : 	LeaveCriticalSection(&m_CriticalSection);

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c0 14	 add	 eax, 20			; 00000014H
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 231  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?DeleteAllNodes@WZQueue@@AAEXXZ ENDP			; WZQueue::DeleteAllNodes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z
_TEXT	SEGMENT
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pNewNode$ = 8						; size = 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z PROC		; WZQueue::AddTail, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 	EnterCriticalSection(&m_CriticalSection);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 58   : 
; 59   : 	BOOL bRet = TRUE;

  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 60   : 	if( m_Count < MAX_NODE )

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	81 38 00 05 00
	00		 cmp	 DWORD PTR [eax], 1280	; 00000500H
  00029	73 4d		 jae	 SHORT $LN2@AddTail

; 61   : 	{
; 62   : 		// crosslink two nodes.
; 63   : 		pNewNode->pUpLink	= m_pTail;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00034	89 10		 mov	 DWORD PTR [eax], edx

; 64   : 		pNewNode->pDownLink = NULL;

  00036	8b 45 08	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 65   : 
; 66   : 		// check headnode.
; 67   : 		if(m_pHead == NULL)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00047	75 0b		 jne	 SHORT $LN4@AddTail

; 68   : 			m_pHead = pNewNode;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  0004f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00052	eb 0c		 jmp	 SHORT $LN5@AddTail
$LN4@AddTail:

; 69   : 		else
; 70   : 			m_pTail->pDownLink = pNewNode;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005a	8b 55 08	 mov	 edx, DWORD PTR _pNewNode$[ebp]
  0005d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN5@AddTail:

; 71   : 
; 72   : 		m_pTail = pNewNode;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  00066	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 73   : 
; 74   : 		m_Count++;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	83 c1 01	 add	 ecx, 1
  00071	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00074	89 0a		 mov	 DWORD PTR [edx], ecx

; 75   : 	}

  00076	eb 07		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 76   : 	else 
; 77   : 		bRet = FALSE;

  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0
$LN3@AddTail:

; 78   : 	LeaveCriticalSection(&m_CriticalSection);

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 14	 add	 eax, 20			; 00000014H
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 79   : 
; 80   : 	return bRet;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 81   : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ENDP		; WZQueue::AddTail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ PROC		; WZQueue::GetHeadNode, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 	EnterCriticalSection(&m_CriticalSection);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 86   : 	
; 87   : 	ListNode* pNode = NULL;

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 88   : 
; 89   : 	if(m_pHead)

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00027	74 56		 je	 SHORT $LN2@GetHeadNod

; 90   : 	{
; 91   : 		pNode = m_pHead;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 92   : 		if(m_pHead->pDownLink)

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00038	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0003c	74 20		 je	 SHORT $LN3@GetHeadNod

; 93   : 		{
; 94   : 			m_pHead->pDownLink->pUpLink = NULL;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 95   : 			m_pHead = m_pHead->pDownLink;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00053	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00056	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00059	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 96   : 		}

  0005c	eb 14		 jmp	 SHORT $LN4@GetHeadNod
$LN3@GetHeadNod:

; 97   : 		else
; 98   : 		{
; 99   : 			m_pHead = m_pTail = NULL;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN4@GetHeadNod:

; 100  : 		}
; 101  : 
; 102  : 		m_Count--;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	83 e9 01	 sub	 ecx, 1
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@GetHeadNod:

; 103  : 	}
; 104  : 	
; 105  : 	LeaveCriticalSection(&m_CriticalSection);

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 14	 add	 eax, 20			; 00000014H
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 106  : 
; 107  : 	return pNode;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]

; 108  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ENDP		; WZQueue::GetHeadNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z PROC	; WZQueue::SetCurDataSending, COMDAT
; _this$ = ecx

; 303  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	if( pNode )

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  00010	74 24		 je	 SHORT $LN1@SetCurData

; 305  : 	{
; 306  : 		EnterCriticalSection(&m_CriticalSection);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 c0 14	 add	 eax, 20			; 00000014H
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 307  : 		pNode->bSending = 1;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _pNode$[ebp]
  00022	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 308  : 		LeaveCriticalSection(&m_CriticalSection);

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c0 14	 add	 eax, 20			; 00000014H
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@SetCurData:

; 309  : 	}
; 310  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ENDP	; WZQueue::SetCurDataSending
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z
_TEXT	SEGMENT
_pNext$ = -16						; size = 4
_pPre$ = -12						; size = 4
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_pCur$ = 8						; size = 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z PROC		; WZQueue::DeleteNode, COMDAT
; _this$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 314  : 	ListNode* pNode = NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 315  : 	ListNode* pPre = NULL;

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPre$[ebp], 0

; 316  : 	ListNode* pNext = NULL;

  0001a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0

; 317  : 	EnterCriticalSection(&m_CriticalSection);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c0 14	 add	 eax, 20			; 00000014H
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 318  : 	
; 319  : 	if( pCur )

  0002e	83 7d 08 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  00032	0f 84 73 01 00
	00		 je	 $LN2@DeleteNode

; 320  : 	{
; 321  : 		pNode = pCur;

  00038	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0003b	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax

; 322  : 		pPre  = pCur->pUpLink;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	89 4d f4	 mov	 DWORD PTR _pPre$[ebp], ecx

; 323  : 		pNext = pCur->pDownLink;

  00046	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	89 4d f0	 mov	 DWORD PTR _pNext$[ebp], ecx

; 324  : 
; 325  : 		if( pPre == NULL && pNext == NULL )

  0004f	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  00053	75 14		 jne	 SHORT $LN3@DeleteNode
  00055	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  00059	75 0e		 jne	 SHORT $LN3@DeleteNode

; 326  : 		{
; 327  : 			m_pHead = pCur;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  00061	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 328  : 		}

  00064	e9 e5 00 00 00	 jmp	 $LN4@DeleteNode
$LN3@DeleteNode:

; 329  : 		else if( pPre == NULL && pNext != NULL )

  00069	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  0006d	75 42		 jne	 SHORT $LN5@DeleteNode
  0006f	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  00073	74 3c		 je	 SHORT $LN5@DeleteNode

; 330  : 		{
; 331  : 			pNext->pUpLink = NULL;

  00075	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  00078	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 332  : 			pCur = pNext;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  00081	89 45 08	 mov	 DWORD PTR _pCur$[ebp], eax

; 333  : 			m_pHead = pCur;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  0008a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 334  : 			if( pNext->pDownLink == NULL ) {

  0008d	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  00090	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00094	75 16		 jne	 SHORT $LN7@DeleteNode

; 335  : 				m_pTail = pNext;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0009c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 336  : 				m_pTail->pDownLink = NULL;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000a5	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN7@DeleteNode:

; 337  : 			}
; 338  : 		}

  000ac	e9 9d 00 00 00	 jmp	 $LN4@DeleteNode
$LN5@DeleteNode:

; 339  : 		else if( pPre != NULL && pNext == NULL )

  000b1	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  000b5	74 3e		 je	 SHORT $LN8@DeleteNode
  000b7	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  000bb	75 38		 jne	 SHORT $LN8@DeleteNode

; 340  : 		{
; 341  : 			pPre->pDownLink = NULL;

  000bd	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  000c0	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 342  : 			pCur = pPre;

  000c7	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  000ca	89 45 08	 mov	 DWORD PTR _pCur$[ebp], eax

; 343  : 			m_pTail = pCur;

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 344  : 			if( pPre->pUpLink == NULL ) {

  000d6	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  000d9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000dc	75 15		 jne	 SHORT $LN10@DeleteNode

; 345  : 				m_pHead = pPre;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  000e4	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 346  : 				m_pHead->pUpLink = NULL;

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ed	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN10@DeleteNode:

; 347  : 			}
; 348  : 		}		

  000f3	eb 59		 jmp	 SHORT $LN4@DeleteNode
$LN8@DeleteNode:

; 349  : 		else if( pPre && pNext )

  000f5	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  000f9	74 53		 je	 SHORT $LN4@DeleteNode
  000fb	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  000ff	74 4d		 je	 SHORT $LN4@DeleteNode

; 350  : 		{
; 351  : 			pPre->pDownLink = pNext;

  00101	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00104	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00107	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 352  : 			pNext->pUpLink  = pPre;

  0010a	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  00110	89 08		 mov	 DWORD PTR [eax], ecx

; 353  : 			if( pPre->pUpLink == NULL ) {

  00112	8b 45 f4	 mov	 eax, DWORD PTR _pPre$[ebp]
  00115	83 38 00	 cmp	 DWORD PTR [eax], 0
  00118	75 15		 jne	 SHORT $LN12@DeleteNode

; 354  : 				m_pHead = pPre;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d f4	 mov	 ecx, DWORD PTR _pPre$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 355  : 				m_pHead->pUpLink = NULL;

  00123	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00126	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00129	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN12@DeleteNode:

; 356  : 			}
; 357  : 			if( pNext->pDownLink == NULL ) {

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _pNext$[ebp]
  00132	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00136	75 16		 jne	 SHORT $LN4@DeleteNode

; 358  : 				m_pTail = pNext;

  00138	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 4d f0	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0013e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 359  : 				m_pTail->pDownLink = NULL;

  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00147	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN4@DeleteNode:

; 360  : 			}
; 361  : 		}
; 362  : 		HeapFree(GetProcessHeap(), 0, pNode->pObject);

  0014e	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00151	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00154	51		 push	 ecx
  00155	6a 00		 push	 0
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0015d	50		 push	 eax
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 363  : 		HeapFree(GetProcessHeap(), 0, pNode);

  00164	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00167	50		 push	 eax
  00168	6a 00		 push	 0
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 364  : 		if( pPre == NULL && pNext == NULL ) {

  00177	83 7d f4 00	 cmp	 DWORD PTR _pPre$[ebp], 0
  0017b	75 21		 jne	 SHORT $LN14@DeleteNode
  0017d	83 7d f0 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  00181	75 1b		 jne	 SHORT $LN14@DeleteNode

; 365  : 			m_pHead = NULL;

  00183	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00186	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 366  : 			pCur    = NULL;

  0018d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pCur$[ebp], 0

; 367  : 			m_pTail = NULL;

  00194	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00197	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN14@DeleteNode:

; 368  : 		}
; 369  : 		m_Count--;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a3	83 e9 01	 sub	 ecx, 1
  001a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a9	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@DeleteNode:

; 370  : 	}
; 371  : 	LeaveCriticalSection(&m_CriticalSection);

  001ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	83 c0 14	 add	 eax, 20			; 00000014H
  001b1	50		 push	 eax
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 372  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z ENDP		; WZQueue::DeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z
_TEXT	SEGMENT
_bRet$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_pCur$ = 8						; size = 4
_pObject$ = 12						; size = 4
_nOfs$ = 16						; size = 4
_nSize$ = 20						; size = 4
_sentbytes$ = 24					; size = 4
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z PROC		; WZQueue::Pop, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 c4 b0	 add	 esp, -80		; ffffffb0H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 	BOOL bRet=FALSE;

  00033	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 278  : 
; 279  : 	if( pCur )

  0003a	83 7d 08 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  0003e	0f 84 93 00 00
	00		 je	 $LN10@Pop

; 280  : 	{
; 281  : 		__try

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 282  : 		{
; 283  : 			EnterCriticalSection(&m_CriticalSection);

  0004b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 c0 14	 add	 eax, 20			; 00000014H
  00051	50		 push	 eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 284  : 			pCur->nOfs += nOfs;

  00058	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0005b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005e	03 4d 10	 add	 ecx, DWORD PTR _nOfs$[ebp]
  00061	8b 55 08	 mov	 edx, DWORD PTR _pCur$[ebp]
  00064	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 285  : 			if( pCur->nSize-nOfs )

  00067	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0006a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006d	2b 4d 10	 sub	 ecx, DWORD PTR _nOfs$[ebp]
  00070	74 49		 je	 SHORT $LN3@Pop

; 286  : 			{
; 287  : 				memcpy(pObject, pCur->pObject+pCur->nOfs, pCur->nSize-pCur->nOfs);

  00072	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  00078	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0007b	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0007e	52		 push	 edx
  0007f	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  00082	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00085	8b 55 08	 mov	 edx, DWORD PTR _pCur$[ebp]
  00088	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  0008b	51		 push	 ecx
  0008c	8b 45 0c	 mov	 eax, DWORD PTR _pObject$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _memcpy
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 288  : 				*nSize = pCur->nSize-pCur->nOfs;

  00098	8b 45 08	 mov	 eax, DWORD PTR _pCur$[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  0009e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000a1	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  000a4	8b 45 14	 mov	 eax, DWORD PTR _nSize$[ebp]
  000a7	89 10		 mov	 DWORD PTR [eax], edx

; 289  : 				*sentbytes = pCur->nOfs;

  000a9	8b 45 18	 mov	 eax, DWORD PTR _sentbytes$[ebp]
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _pCur$[ebp]
  000af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b2	89 10		 mov	 DWORD PTR [eax], edx

; 290  : 				bRet = TRUE;

  000b4	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN3@Pop:

; 291  : 				__leave;
; 292  : 			}
; 293  : 		}

  000bb	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000c2	e8 02 00 00 00	 call	 $LN9@Pop
  000c7	eb 0e		 jmp	 SHORT $LN10@Pop
$LN7@Pop:
$LN12@Pop:
$LN9@Pop:

; 294  : 		__finally
; 295  : 		{
; 296  : 			LeaveCriticalSection(&m_CriticalSection);

  000c9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	83 c0 14	 add	 eax, 20			; 00000014H
  000cf	50		 push	 eax
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN8@Pop:
$LN11@Pop:
  000d6	c3		 ret	 0
$LN10@Pop:

; 297  : 		}
; 298  : 	}
; 299  : 	return bRet;

  000d7	8b 45 e0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 300  : }

  000da	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 14 00	 ret	 20			; 00000014H
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z ENDP		; WZQueue::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z PROC	; WZQueue::GetCurData, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 262  : 	if( m_pCur )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	74 62		 je	 SHORT $LN2@GetCurData

; 263  : 	{		
; 264  : 		if( m_pCur->bSending == 1 ) return FALSE;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001b	83 79 10 01	 cmp	 DWORD PTR [ecx+16], 1
  0001f	75 04		 jne	 SHORT $LN3@GetCurData
  00021	33 c0		 xor	 eax, eax
  00023	eb 54		 jmp	 SHORT $LN1@GetCurData
$LN3@GetCurData:

; 265  : 
; 266  : 		memcpy(pObject, m_pCur->pObject, m_pCur->nSize);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002e	52		 push	 edx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _pObject$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memcpy
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 		*pSize = m_pCur->nSize;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _pSize$[ebp]
  0004e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00051	89 02		 mov	 DWORD PTR [edx], eax

; 268  : 		*headcode =m_pCur->headcode;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00059	8b 55 10	 mov	 edx, DWORD PTR _headcode$[ebp]
  0005c	8a 41 18	 mov	 al, BYTE PTR [ecx+24]
  0005f	88 02		 mov	 BYTE PTR [edx], al

; 269  : 		*uindex = m_pCur->uindex;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00067	8b 55 14	 mov	 edx, DWORD PTR _uindex$[ebp]
  0006a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0006d	89 02		 mov	 DWORD PTR [edx], eax

; 270  : 		return m_pCur;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00075	eb 02		 jmp	 SHORT $LN1@GetCurData
$LN2@GetCurData:

; 271  : 	}
; 272  : 	return NULL;

  00077	33 c0		 xor	 eax, eax
$LN1@GetCurData:

; 273  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 10 00	 ret	 16			; 00000010H
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ENDP	; WZQueue::GetCurData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?NextQ@WZQueue@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextQ@WZQueue@@QAEHXZ PROC				; WZQueue::NextQ, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 	if( m_pCur )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	74 3c		 je	 SHORT $LN2@NextQ

; 248  : 	{
; 249  : 		if( m_pCur->pDownLink != NULL )

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0001f	74 30		 je	 SHORT $LN2@NextQ

; 250  : 		{
; 251  : 			EnterCriticalSection(&m_CriticalSection);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c0 14	 add	 eax, 20			; 00000014H
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 252  : 			m_pCur = m_pCur->pDownLink;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 253  : 			LeaveCriticalSection(&m_CriticalSection);

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c0 14	 add	 eax, 20			; 00000014H
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 254  : 			return TRUE;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	eb 02		 jmp	 SHORT $LN1@NextQ
$LN2@NextQ:

; 255  : 		}
; 256  : 	}
; 257  : 	return FALSE;

  00051	33 c0		 xor	 eax, eax
$LN1@NextQ:

; 258  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?NextQ@WZQueue@@QAEHXZ ENDP				; WZQueue::NextQ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?StartQ@WZQueue@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartQ@WZQueue@@QAEHXZ PROC				; WZQueue::StartQ, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	if( m_pHead )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	74 2d		 je	 SHORT $LN2@StartQ

; 236  : 	{
; 237  : 		EnterCriticalSection(&m_CriticalSection);

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 c0 14	 add	 eax, 20			; 00000014H
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 238  : 		m_pCur = m_pHead;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002b	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 239  : 		LeaveCriticalSection(&m_CriticalSection);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 c0 14	 add	 eax, 20			; 00000014H
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 240  : 		return TRUE;

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	eb 02		 jmp	 SHORT $LN1@StartQ
$LN2@StartQ:

; 241  : 	}
; 242  : 	return FALSE;

  00042	33 c0		 xor	 eax, eax
$LN1@StartQ:

; 243  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?StartQ@WZQueue@@QAEHXZ ENDP				; WZQueue::StartQ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?Free@WZQueue@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@WZQueue@@QAEXXZ PROC				; WZQueue::Free, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	//DeleteAllNodes();
; 36   : 	//DeleteCriticalSection(&m_CriticalSection);
; 37   : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Free@WZQueue@@QAEXXZ ENDP				; WZQueue::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?Init@WZQueue@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@WZQueue@@QAEXXZ PROC				; WZQueue::Init, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	/*m_Max_Node = nMaxNode;
; 21   : 	m_pHead    = m_pTail = NULL;
; 22   : 	m_Count    = 0;
; 23   : 
; 24   : 	BOOL bSuccess =	InitializeCriticalSectionAndSpinCount(&m_CriticalSection, SPIN_COUNT);
; 25   : 	if(!bSuccess)
; 26   : 	{
; 27   : 		if( GetLastError() == STATUS_NO_MEMORY )
; 28   : 			InitializeCriticalSection(&m_CriticalSection);
; 29   : 	}
; 30   : 	*/
; 31   : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Init@WZQueue@@QAEXXZ ENDP				; WZQueue::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z PROC		; WZQueue::GetFromQueue, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 	ListNode*	pNode = NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNode$[ebp], 0

; 198  : 
; 199  : 	//ASSERT( pObject );
; 200  : 	
; 201  : 	pNode = GetHeadNode();

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  0001b	89 45 f8	 mov	 DWORD PTR _pNode$[ebp], eax

; 202  : 	if(pNode)

  0001e	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  00022	0f 84 85 00 00
	00		 je	 $LN2@GetFromQue

; 203  : 	{
; 204  : 		EnterCriticalSection(&m_CriticalSection);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 14	 add	 eax, 20			; 00000014H
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 205  : 		memcpy(pObject, pNode->pObject, pNode->nSize);

  00035	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	51		 push	 ecx
  0003c	8b 55 f8	 mov	 edx, DWORD PTR _pNode$[ebp]
  0003f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _memcpy
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 		*pSize = pNode->nSize;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _pSize$[ebp]
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  00055	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00058	89 10		 mov	 DWORD PTR [eax], edx

; 207  : 		*headcode =pNode->headcode;

  0005a	8b 45 10	 mov	 eax, DWORD PTR _headcode$[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  00060	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  00063	88 10		 mov	 BYTE PTR [eax], dl

; 208  : 		*uindex = pNode->uindex;

  00065	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0006b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0006e	89 10		 mov	 DWORD PTR [eax], edx

; 209  : 		
; 210  : 		HeapFree(GetProcessHeap(), 0, pNode->pObject);

  00070	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00073	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00076	51		 push	 ecx
  00077	6a 00		 push	 0
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 211  : 		HeapFree(GetProcessHeap(), 0, pNode);

  00086	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00089	50		 push	 eax
  0008a	6a 00		 push	 0
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00092	50		 push	 eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 212  : 		LeaveCriticalSection(&m_CriticalSection);

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	83 c0 14	 add	 eax, 20			; 00000014H
  0009f	50		 push	 eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 213  : 		return TRUE;

  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	eb 02		 jmp	 SHORT $LN1@GetFromQue
$LN2@GetFromQue:

; 214  : 	}
; 215  : 
; 216  : 	return FALSE;

  000ad	33 c0		 xor	 eax, eax
$LN1@GetFromQue:

; 217  : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z ENDP		; WZQueue::GetFromQueue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PBEIEH@Z
_TEXT	SEGMENT
_pMsg$1 = -16						; size = 4
_pNewNode$ = -12					; size = 4
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PBEIEH@Z PROC	; WZQueue::AddToQueueList, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 	BOOL bRet = FALSE;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 156  : 
; 157  : 	//ASSERT( pObject );
; 158  : 
; 159  : 	if( nSize < 1 || nSize > 65536 ) 

  00013	83 7d 0c 01	 cmp	 DWORD PTR _nSize$[ebp], 1
  00017	72 09		 jb	 SHORT $LN3@AddToQueue
  00019	81 7d 0c 00 00
	01 00		 cmp	 DWORD PTR _nSize$[ebp], 65536 ; 00010000H
  00020	76 07		 jbe	 SHORT $LN2@AddToQueue
$LN3@AddToQueue:

; 160  : 	{
; 161  : 		return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 f7 00 00 00	 jmp	 $LN1@AddToQueue
$LN2@AddToQueue:

; 162  : 	}
; 163  : 	EnterCriticalSection(&m_CriticalSection);

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c0 14	 add	 eax, 20			; 00000014H
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 164  : 
; 165  : 	ListNode* pNewNode = (ListNode*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(ListNode));

  00036	6a 20		 push	 32			; 00000020H
  00038	6a 08		 push	 8
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00047	89 45 f4	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 166  : 	
; 167  : 	if( pNewNode )

  0004a	83 7d f4 00	 cmp	 DWORD PTR _pNewNode$[ebp], 0
  0004e	0f 84 a9 00 00
	00		 je	 $LN4@AddToQueue

; 168  : 	{
; 169  : 		BYTE* pMsg = (BYTE*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  00054	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00057	50		 push	 eax
  00058	6a 08		 push	 8
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00067	89 45 f0	 mov	 DWORD PTR _pMsg$1[ebp], eax

; 170  : 		if( pMsg )

  0006a	83 7d f0 00	 cmp	 DWORD PTR _pMsg$1[ebp], 0
  0006e	74 65		 je	 SHORT $LN6@AddToQueue

; 171  : 		{
; 172  : 			memcpy(pMsg, pObject, nSize);

  00070	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 f0	 mov	 edx, DWORD PTR _pMsg$1[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _memcpy
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  : 
; 174  : 			pNewNode->pObject	= pMsg;

  00084	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _pMsg$1[ebp]
  0008a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 175  : 			pNewNode->nSize		= nSize;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00093	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 176  : 			pNewNode->headcode	= headcode;

  00096	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00099	8a 4d 10	 mov	 cl, BYTE PTR _headcode$[ebp]
  0009c	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 177  : 			pNewNode->uindex	= uindex;

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000a2	8b 4d 14	 mov	 ecx, DWORD PTR _uindex$[ebp]
  000a5	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 178  : 			pNewNode->bSending	= 0;

  000a8	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000ab	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 179  : 			pNewNode->nOfs		= 0;

  000b2	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000b5	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 180  : 			if( AddTail(pNewNode) ) bRet = TRUE;

  000bc	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail
  000c8	85 c0		 test	 eax, eax
  000ca	74 07		 je	 SHORT $LN8@AddToQueue
  000cc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN8@AddToQueue:

; 181  : 		}

  000d3	eb 26		 jmp	 SHORT $LN7@AddToQueue
$LN6@AddToQueue:

; 182  : 		else
; 183  : 		{
; 184  : 			HeapFree(GetProcessHeap(), 0, pMsg);

  000d5	8b 45 f0	 mov	 eax, DWORD PTR _pMsg$1[ebp]
  000d8	50		 push	 eax
  000d9	6a 00		 push	 0
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  000e1	50		 push	 eax
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 185  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000eb	50		 push	 eax
  000ec	6a 00		 push	 0
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN7@AddToQueue:

; 186  : 		}
; 187  : 	}

  000fb	eb 13		 jmp	 SHORT $LN5@AddToQueue
$LN4@AddToQueue:

; 188  : 	else
; 189  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  000fd	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00100	50		 push	 eax
  00101	6a 00		 push	 0
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00109	50		 push	 eax
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN5@AddToQueue:

; 190  : 	
; 191  : 	LeaveCriticalSection(&m_CriticalSection);

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	83 c0 14	 add	 eax, 20			; 00000014H
  00116	50		 push	 eax
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 192  : 	return pNewNode;

  0011d	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
$LN1@AddToQueue:

; 193  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 10 00	 ret	 16			; 00000010H
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PBEIEH@Z ENDP	; WZQueue::AddToQueueList
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?AddToQueue@WZQueue@@QAEHPBEIEH@Z
_TEXT	SEGMENT
_pMsg$1 = -16						; size = 4
_pNewNode$ = -12					; size = 4
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
_pObject$ = 8						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueue@WZQueue@@QAEHPBEIEH@Z PROC			; WZQueue::AddToQueue, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	BOOL bRet = FALSE;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 113  : 
; 114  : 	//ASSERT( pObject );
; 115  : 
; 116  : 	EnterCriticalSection(&m_CriticalSection);

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 117  : 	if( nSize < 1 || nSize > 65536 ) 

  00020	83 7d 0c 01	 cmp	 DWORD PTR _nSize$[ebp], 1
  00024	72 09		 jb	 SHORT $LN3@AddToQueue
  00026	81 7d 0c 00 00
	01 00		 cmp	 DWORD PTR _nSize$[ebp], 65536 ; 00010000H
  0002d	76 14		 jbe	 SHORT $LN2@AddToQueue
$LN3@AddToQueue:

; 118  : 	{
; 119  : 		LeaveCriticalSection(&m_CriticalSection);

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c0 14	 add	 eax, 20			; 00000014H
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 120  : 		return FALSE;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 ea 00 00 00	 jmp	 $LN1@AddToQueue
$LN2@AddToQueue:

; 121  : 	}
; 122  : 
; 123  : 	ListNode* pNewNode = (ListNode*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(ListNode));

  00043	6a 20		 push	 32			; 00000020H
  00045	6a 08		 push	 8
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00054	89 45 f4	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 124  : 	
; 125  : 	if( pNewNode )

  00057	83 7d f4 00	 cmp	 DWORD PTR _pNewNode$[ebp], 0
  0005b	0f 84 a9 00 00
	00		 je	 $LN4@AddToQueue

; 126  : 	{
; 127  : 		BYTE* pMsg = (BYTE*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  00061	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00064	50		 push	 eax
  00065	6a 08		 push	 8
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00074	89 45 f0	 mov	 DWORD PTR _pMsg$1[ebp], eax

; 128  : 		if( pMsg )

  00077	83 7d f0 00	 cmp	 DWORD PTR _pMsg$1[ebp], 0
  0007b	74 65		 je	 SHORT $LN6@AddToQueue

; 129  : 		{
; 130  : 			memcpy(pMsg, pObject, nSize);

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 f0	 mov	 edx, DWORD PTR _pMsg$1[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _memcpy
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : 			pNewNode->pObject	= pMsg;

  00091	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00094	8b 4d f0	 mov	 ecx, DWORD PTR _pMsg$1[ebp]
  00097	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 133  : 			pNewNode->nSize		= nSize;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  000a0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 134  : 			pNewNode->headcode	= headcode;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000a6	8a 4d 10	 mov	 cl, BYTE PTR _headcode$[ebp]
  000a9	88 48 18	 mov	 BYTE PTR [eax+24], cl

; 135  : 			pNewNode->uindex	= uindex;

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000af	8b 4d 14	 mov	 ecx, DWORD PTR _uindex$[ebp]
  000b2	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 136  : 			pNewNode->bSending	= 0;

  000b5	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000b8	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 137  : 			pNewNode->nOfs		= 0;

  000bf	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000c2	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 138  : 			if( AddTail(pNewNode) ) bRet = TRUE;

  000c9	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000cc	50		 push	 eax
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail
  000d5	85 c0		 test	 eax, eax
  000d7	74 07		 je	 SHORT $LN8@AddToQueue
  000d9	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN8@AddToQueue:

; 139  : 		}

  000e0	eb 26		 jmp	 SHORT $LN7@AddToQueue
$LN6@AddToQueue:

; 140  : 		else
; 141  : 		{
; 142  : 			HeapFree(GetProcessHeap(), 0, pMsg);

  000e2	8b 45 f0	 mov	 eax, DWORD PTR _pMsg$1[ebp]
  000e5	50		 push	 eax
  000e6	6a 00		 push	 0
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  000ee	50		 push	 eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 143  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  000f8	50		 push	 eax
  000f9	6a 00		 push	 0
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00101	50		 push	 eax
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN7@AddToQueue:

; 144  : 		}
; 145  : 	}

  00108	eb 13		 jmp	 SHORT $LN5@AddToQueue
$LN4@AddToQueue:

; 146  : 	else
; 147  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  0010a	8b 45 f4	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  0010d	50		 push	 eax
  0010e	6a 00		 push	 0
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00116	50		 push	 eax
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN5@AddToQueue:

; 148  : 	
; 149  : 	LeaveCriticalSection(&m_CriticalSection);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00120	83 c0 14	 add	 eax, 20			; 00000014H
  00123	50		 push	 eax
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 150  : 	return bRet;

  0012a	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
$LN1@AddToQueue:

; 151  : }

  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 10 00	 ret	 16			; 00000010H
?AddToQueue@WZQueue@@QAEHPBEIEH@Z ENDP			; WZQueue::AddToQueue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?GetCount@WZQueue@@QAEIXZ
_TEXT	SEGMENT
_nNum$ = -8						; size = 4
_this$ = -4						; size = 4
?GetCount@WZQueue@@QAEIXZ PROC				; WZQueue::GetCount, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	EnterCriticalSection(&m_CriticalSection);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 49   : 	DWORD nNum = m_Count;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 4d f8	 mov	 DWORD PTR _nNum$[ebp], ecx

; 50   : 	LeaveCriticalSection(&m_CriticalSection);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c0 14	 add	 eax, 20			; 00000014H
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 51   : 
; 52   : 	return nNum;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _nNum$[ebp]

; 53   : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?GetCount@WZQueue@@QAEIXZ ENDP				; WZQueue::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ??1WZQueue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1WZQueue@@QAE@XZ PROC					; WZQueue::~WZQueue, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1WZQueue@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	DeleteAllNodes();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?DeleteAllNodes@WZQueue@@AAEXXZ ; WZQueue::DeleteAllNodes

; 43   : 	DeleteCriticalSection(&m_CriticalSection);

  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c0 14	 add	 eax, 20			; 00000014H
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 44   : }

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1WZQueue@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1WZQueue@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1WZQueue@@QAE@XZ ENDP					; WZQueue::~WZQueue
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ??0WZQueue@@QAE@I@Z
_TEXT	SEGMENT
_bSuccess$ = -8						; size = 4
_this$ = -4						; size = 4
_nMaxNode$ = 8						; size = 4
??0WZQueue@@QAE@I@Z PROC				; WZQueue::WZQueue, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6    : 	m_Max_Node = nMaxNode;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _nMaxNode$[ebp]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 7    : 	m_pHead    = m_pTail = NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 8    : 	m_Count    = 0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 9    : 
; 10   : 	BOOL bSuccess =	InitializeCriticalSectionAndSpinCount(&m_CriticalSection, SPIN_COUNT);

  00032	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c0 14	 add	 eax, 20			; 00000014H
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
  00044	89 45 f8	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 11   : 	if(!bSuccess)

  00047	83 7d f8 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  0004b	75 1a		 jne	 SHORT $LN1@WZQueue

; 12   : 	{
; 13   : 		if( GetLastError() == STATUS_NO_MEMORY )

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00053	3d 17 00 00 c0	 cmp	 eax, -1073741801	; c0000017H
  00058	75 0d		 jne	 SHORT $LN1@WZQueue

; 14   : 			InitializeCriticalSection(&m_CriticalSection);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 c0 14	 add	 eax, 20			; 00000014H
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
$LN1@WZQueue:

; 15   : 	}
; 16   : }

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
??0WZQueue@@QAE@I@Z ENDP				; WZQueue::WZQueue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\WzQueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
