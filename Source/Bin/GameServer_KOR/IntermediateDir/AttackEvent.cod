; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?Active@CAttackEvent@@QAEXXZ			; CAttackEvent::Active
PUBLIC	?Run@CAttackEvent@@QAEXXZ			; CAttackEvent::Run
PUBLIC	?End@CAttackEvent@@QAEXXZ			; CAttackEvent::End
PUBLIC	?Start@CAttackEvent@@QAEXXZ			; CAttackEvent::Start
PUBLIC	?Init@CAttackEvent@@QAEXXZ			; CAttackEvent::Init
PUBLIC	??0CAttackEvent@@QAE@XZ				; CAttackEvent::CAttackEvent
PUBLIC	??1CAttackEvent@@UAE@XZ				; CAttackEvent::~CAttackEvent
PUBLIC	?SetMenualStart@CAttackEvent@@QAEXH@Z		; CAttackEvent::SetMenualStart
PUBLIC	?Start_Menual@CAttackEvent@@QAEXXZ		; CAttackEvent::Start_Menual
PUBLIC	?End_Menual@CAttackEvent@@QAEXXZ		; CAttackEvent::End_Menual
PUBLIC	??_GCAttackEvent@@UAEPAXI@Z			; CAttackEvent::`scalar deleting destructor'
PUBLIC	??_7CAttackEvent@@6B@				; CAttackEvent::`vftable'
PUBLIC	??_C@_0BE@LGGALIOG@Attack?5Event?5Start?5@	; `string'
PUBLIC	??_C@_0BB@BAPIBADD@Attack?5Event?5End@		; `string'
PUBLIC	??_C@_0BF@MGCOAHKA@Attack?5Event?5Restart@	; `string'
PUBLIC	??_C@_0BH@PHJBIBLO@event?5?$CFd?5?$CFd?5?$CFd?5create?5@ ; `string'
PUBLIC	??_C@_0CN@HDIFLHJI@?$KB?$NL?$KB?$NM?$FLEvent?5Management?$FN?5?$FLStart?$FN?5@ ; `string'
PUBLIC	??_R4CAttackEvent@@6B@				; CAttackEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAttackEvent@@@8			; CAttackEvent `RTTI Type Descriptor'
PUBLIC	??_R3CAttackEvent@@8				; CAttackEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAttackEvent@@8				; CAttackEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAttackEvent@@8			; CAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_rand:PROC
EXTRN	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z:PROC ; CMonsterSetBase::GetBoxPosition
EXTRN	??_ECAttackEvent@@UAEPAXI@Z:PROC		; CAttackEvent::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAVOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gAttackEventRegenTime@@3KA:DWORD		; gAttackEventRegenTime
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_R1A@?0A@EA@CAttackEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAttackEvent@@8 DD FLAT:??_R0?AVCAttackEvent@@@8 ; CAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2CAttackEvent@@8
rdata$r	SEGMENT
??_R2CAttackEvent@@8 DD FLAT:??_R1A@?0A@EA@CAttackEvent@@8 ; CAttackEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CAttackEvent@@8
rdata$r	SEGMENT
??_R3CAttackEvent@@8 DD 00H				; CAttackEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAttackEvent@@@8
data$r	SEGMENT
??_R0?AVCAttackEvent@@@8 DD FLAT:??_7type_info@@6B@	; CAttackEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAttackEvent@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAttackEvent@@6B@
rdata$r	SEGMENT
??_R4CAttackEvent@@6B@ DD 00H				; CAttackEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAttackEvent@@@8
	DD	FLAT:??_R3CAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CN@HDIFLHJI@?$KB?$NL?$KB?$NM?$FLEvent?5Management?$FN?5?$FLStart?$FN?5@
CONST	SEGMENT
??_C@_0CN@HDIFLHJI@?$KB?$NL?$KB?$NM?$FLEvent?5Management?$FN?5?$FLStart?$FN?5@ DB 0a1H
	DB	0dbH, 0a1H, 0dcH, '[Event Management] [Start] Attack Event!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PHJBIBLO@event?5?$CFd?5?$CFd?5?$CFd?5create?5@
CONST	SEGMENT
??_C@_0BH@PHJBIBLO@event?5?$CFd?5?$CFd?5?$CFd?5create?5@ DB 'event %d %d '
	DB	'%d create ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGCOAHKA@Attack?5Event?5Restart@
CONST	SEGMENT
??_C@_0BF@MGCOAHKA@Attack?5Event?5Restart@ DB 'Attack Event Restart', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BAPIBADD@Attack?5Event?5End@
CONST	SEGMENT
??_C@_0BB@BAPIBADD@Attack?5Event?5End@ DB 'Attack Event End', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LGGALIOG@Attack?5Event?5Start?5@
CONST	SEGMENT
??_C@_0BE@LGGALIOG@Attack?5Event?5Start?5@ DB 'Attack Event Start ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CAttackEvent@@6B@
CONST	SEGMENT
??_7CAttackEvent@@6B@ DD FLAT:??_R4CAttackEvent@@6B@	; CAttackEvent::`vftable'
	DD	FLAT:??_ECAttackEvent@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCAttackEvent@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCAttackEvent@@UAEPAXI@Z PROC			; CAttackEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CAttackEvent@@UAE@XZ	; CAttackEvent::~CAttackEvent
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 2c		 push	 44			; 0000002cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCAttackEvent@@UAEPAXI@Z ENDP			; CAttackEvent::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?End_Menual@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?End_Menual@CAttackEvent@@QAEXXZ PROC			; CAttackEvent::End_Menual, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  : 	SetMenualStart(FALSE);

  0000c	6a 00		 push	 0
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?SetMenualStart@CAttackEvent@@QAEXH@Z ; CAttackEvent::SetMenualStart

; 213  : 
; 214  : 	End();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?End@CAttackEvent@@QAEXXZ ; CAttackEvent::End

; 215  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?End_Menual@CAttackEvent@@QAEXXZ ENDP			; CAttackEvent::End_Menual
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?Start_Menual@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Start_Menual@CAttackEvent@@QAEXXZ PROC			; CAttackEvent::Start_Menual, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 200  : 	SetMenualStart(TRUE);

  0000c	6a 01		 push	 1
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?SetMenualStart@CAttackEvent@@QAEXH@Z ; CAttackEvent::SetMenualStart

; 201  : 
; 202  : 	LogAddTD("¡Û¡Ü[Event Management] [Start] Attack Event!");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@HDIFLHJI@?$KB?$NL?$KB?$NM?$FLEvent?5Management?$FN?5?$FLStart?$FN?5@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00021	83 c4 04	 add	 esp, 4

; 203  : 
; 204  : 	EventState = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 205  : 	Start();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?Start@CAttackEvent@@QAEXXZ ; CAttackEvent::Start

; 206  : 	Active();

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?Active@CAttackEvent@@QAEXXZ ; CAttackEvent::Active

; 207  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?Start_Menual@CAttackEvent@@QAEXXZ ENDP			; CAttackEvent::Start_Menual
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.h
;	COMDAT ?SetMenualStart@CAttackEvent@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bMenualStart$ = 8					; size = 4
?SetMenualStart@CAttackEvent@@QAEXH@Z PROC		; CAttackEvent::SetMenualStart, COMDAT
; _this$ = ecx

; 39   : 	void SetMenualStart (BOOL bMenualStart)	{	m_bMenualStart = bMenualStart;	}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _bMenualStart$[ebp]
  00012	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetMenualStart@CAttackEvent@@QAEXH@Z ENDP		; CAttackEvent::SetMenualStart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ??1CAttackEvent@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAttackEvent@@UAE@XZ PROC				; CAttackEvent::~CAttackEvent, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAttackEvent@@6B@

; 32   : 
; 33   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CAttackEvent@@UAE@XZ ENDP				; CAttackEvent::~CAttackEvent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ??0CAttackEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAttackEvent@@QAE@XZ PROC				; CAttackEvent::CAttackEvent, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAttackEvent@@6B@

; 23   : 	Init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@CAttackEvent@@QAEXXZ ; CAttackEvent::Init

; 24   : 	
; 25   : #ifdef FOR_THAILAND	
; 26   : 	Start();
; 27   : #endif
; 28   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CAttackEvent@@QAE@XZ ENDP				; CAttackEvent::CAttackEvent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?Init@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CAttackEvent@@QAEXXZ PROC				; CAttackEvent::Init, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	EventState = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 39   : 	EventStartTime = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 40   : 	m_MapNumber = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 41   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?Init@CAttackEvent@@QAEXXZ ENDP				; CAttackEvent::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?Start@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Start@CAttackEvent@@QAEXXZ PROC			; CAttackEvent::Start, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	EventState = 1;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 46   : 	EventStartTime = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 47   : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?Start@CAttackEvent@@QAEXXZ ENDP			; CAttackEvent::Start
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?End@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?End@CAttackEvent@@QAEXXZ PROC				; CAttackEvent::End, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 
; 52   : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?End@CAttackEvent@@QAEXXZ ENDP				; CAttackEvent::End
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?Run@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Run@CAttackEvent@@QAEXXZ PROC				; CAttackEvent::Run, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 
; 57   : #ifdef EVENT_MANAGEMENT_20040711
; 58   : 	if (m_bMenualStart)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00013	74 05		 je	 SHORT $LN2@Run

; 59   : 		return;

  00015	e9 fb 00 00 00	 jmp	 $LN1@Run
$LN2@Run:

; 60   : #endif
; 61   : 	
; 62   : 	return;

  0001a	e9 f6 00 00 00	 jmp	 $LN1@Run

; 63   : 	if( !EventState ) return;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00026	85 c9		 test	 ecx, ecx
  00028	75 05		 jne	 SHORT $LN3@Run
  0002a	e9 e6 00 00 00	 jmp	 $LN1@Run
$LN3@Run:

; 64   : 
; 65   : 	if( EventState == 1 )

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00036	83 f9 01	 cmp	 ecx, 1
  00039	75 46		 jne	 SHORT $LN4@Run

; 66   : 	{
; 67   : 		if( (GetTickCount()-EventStartTime) > 3000 )

  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00047	3d b8 0b 00 00	 cmp	 eax, 3000		; 00000bb8H
  0004c	76 2e		 jbe	 SHORT $LN6@Run

; 68   : 		{
; 69   : 			EventState = 2;				// ½À°Ý ÀÌº¥Æ® ¹ß»ý

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	c6 40 04 02	 mov	 BYTE PTR [eax+4], 2

; 70   : 			//GCMapEventStateSend(m_MapNumber, 1, 1);
; 71   : 			Active();

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?Active@CAttackEvent@@QAEXXZ ; CAttackEvent::Active

; 72   : 			EventStartTime = GetTickCount();

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 73   : 			LogAdd("Attack Event Start ");

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LGGALIOG@Attack?5Event?5Start?5@
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00074	83 c4 04	 add	 esp, 4

; 74   : 			return;

  00077	e9 99 00 00 00	 jmp	 $LN1@Run
$LN6@Run:

; 75   : 		}
; 76   : 	}

  0007c	e9 94 00 00 00	 jmp	 $LN1@Run
$LN4@Run:

; 77   : 	else if( EventState == 2 )

  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00084	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00088	83 f9 02	 cmp	 ecx, 2
  0008b	75 45		 jne	 SHORT $LN7@Run

; 78   : 	{
; 79   : 
; 80   : #if TESTSERVER == 0 
; 81   : 		if( (GetTickCount()-EventStartTime) > ((1000*60)*gAttackEventRegenTime) )

  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00099	69 15 00 00 00
	00 60 ea 00 00	 imul	 edx, DWORD PTR ?gAttackEventRegenTime@@3KA, 60000 ; gAttackEventRegenTime
  000a3	3b c2		 cmp	 eax, edx
  000a5	76 29		 jbe	 SHORT $LN9@Run

; 82   : #else
; 83   : 		if( (GetTickCount()-EventStartTime) > ((1000*60)*1000) )
; 84   : #endif	
; 85   : 		{
; 86   : 			End();

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?End@CAttackEvent@@QAEXXZ ; CAttackEvent::End

; 87   : 			EventState = 3;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	c6 40 04 03	 mov	 BYTE PTR [eax+4], 3

; 88   : 			EventStartTime = GetTickCount();

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 89   : 			LogAdd("Attack Event End");

  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BAPIBADD@Attack?5Event?5End@
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000cd	83 c4 04	 add	 esp, 4
$LN9@Run:

; 90   : 		}
; 91   : 	}

  000d0	eb 43		 jmp	 SHORT $LN1@Run
$LN7@Run:

; 92   : 	else if( EventState == 3 )

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  000d9	83 f9 03	 cmp	 ecx, 3
  000dc	75 37		 jne	 SHORT $LN1@Run

; 93   : 	{
; 94   : 		
; 95   : 		if( (GetTickCount()-EventStartTime) > ((1000*60)*gAttackEventRegenTime) )

  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  000ea	69 15 00 00 00
	00 60 ea 00 00	 imul	 edx, DWORD PTR ?gAttackEventRegenTime@@3KA, 60000 ; gAttackEventRegenTime
  000f4	3b c2		 cmp	 eax, edx
  000f6	76 1d		 jbe	 SHORT $LN1@Run

; 96   : 		{
; 97   : 			EventState = 0;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 98   : 			Start();

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?Start@CAttackEvent@@QAEXXZ ; CAttackEvent::Start

; 99   : 			LogAdd("Attack Event Restart");

  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MGCOAHKA@Attack?5Event?5Restart@
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00112	83 c4 04	 add	 esp, 4
$LN1@Run:

; 100  : 		}
; 101  : 	}
; 102  : }

  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
?Run@CAttackEvent@@QAEXXZ ENDP				; CAttackEvent::Run
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?Active@CAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
?Active@CAttackEvent@@QAEXXZ PROC			; CAttackEvent::Active, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 
; 108  : #if TESTSERVER == 1
; 109  : //	return;
; 110  : #endif
; 111  : 	int n;
; 112  : 	
; 113  : 	for( n=0; n<MAX_MONSTER; n++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@Active
$LN2@Active:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN4@Active:
  0001e	81 7d f8 a8 16
	00 00		 cmp	 DWORD PTR _n$[ebp], 5800 ; 000016a8H
  00025	0f 8d 0c 06 00
	00		 jge	 $LN1@Active

; 114  : 	{		
; 115  : 		if( gObj[n].Class == 53 || 

  0002b	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00038	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  00040	83 fa 35	 cmp	 edx, 53			; 00000035H
  00043	74 1e		 je	 SHORT $LN15@Active
  00045	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00052	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  0005a	83 fa 36	 cmp	 edx, 54			; 00000036H
  0005d	0f 85 bf 02 00
	00		 jne	 $LN13@Active
$LN15@Active:

; 116  : 			gObj[n].Class == 54 )
; 117  : 		{
; 118  : 			gObj[n].Live	= 1;

  00063	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00070	c6 44 01 66 01	 mov	 BYTE PTR [ecx+eax+102], 1

; 119  : 			
; 120  : 			if( gObj[n].Class == 53 )

  00075	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00082	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  0008a	83 fa 35	 cmp	 edx, 53			; 00000035H
  0008d	0f 85 ea 00 00
	00		 jne	 $LN16@Active

; 121  : 			{
; 122  : 				m_MapNumber = 2;				

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	c6 40 0c 02	 mov	 BYTE PTR [eax+12], 2

; 123  : 
; 124  : 				gObj[n].MapNumber = m_MapNumber;

  0009a	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000ad	88 94 01 09 01
	00 00		 mov	 BYTE PTR [ecx+eax+265], dl
$LN5@Active:

; 125  : 				
; 126  : 				while(!gMSetBase.GetBoxPosition(m_MapNumber, 10, 10, 240, 240, gObj[n].X,gObj[n].Y)){}

  000b4	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  000c1	8d 94 01 06 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+262]
  000c8	52		 push	 edx
  000c9	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  000d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  000d6	8d 94 01 04 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+260]
  000dd	52		 push	 edx
  000de	68 f0 00 00 00	 push	 240			; 000000f0H
  000e3	68 f0 00 00 00	 push	 240			; 000000f0H
  000e8	6a 0a		 push	 10			; 0000000aH
  000ea	6a 0a		 push	 10			; 0000000aH
  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  000f3	51		 push	 ecx
  000f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  000f9	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
  000fe	85 c0		 test	 eax, eax
  00100	75 02		 jne	 SHORT $LN6@Active
  00102	eb b0		 jmp	 SHORT $LN5@Active
$LN6@Active:

; 127  : 
; 128  : 				m_BossMap53  = gObj[n].MapNumber;

  00104	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00111	0f b6 94 01 09
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+265]
  00119	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 129  : 				m_BossMapX53 = gObj[n].X;

  0011f	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00126	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0012c	0f bf 94 01 04
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+260]
  00134	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00137	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 130  : 				m_BossMapY53 = gObj[n].Y;

  0013a	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00147	0f bf 94 01 06
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+262]
  0014f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00152	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 131  : 				LogAdd("event %d %d %d create ", m_BossMap53, m_BossMapX53, m_BossMapY53);

  00155	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0015b	51		 push	 ecx
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00162	50		 push	 eax
  00163	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00166	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00169	52		 push	 edx
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PHJBIBLO@event?5?$CFd?5?$CFd?5?$CFd?5create?5@
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00175	83 c4 10	 add	 esp, 16			; 00000010H

; 132  : 			}

  00178	e9 90 00 00 00	 jmp	 $LN17@Active
$LN16@Active:

; 133  : 			else
; 134  : 			{
; 135  : 				m_MapNumber = m_BossMap53;

  0017d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  00186	88 50 0c	 mov	 BYTE PTR [eax+12], dl

; 136  : 				gObj[n].MapNumber = m_MapNumber;

  00189	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00196	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00199	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  0019c	88 94 01 09 01
	00 00		 mov	 BYTE PTR [ecx+eax+265], dl
$LN7@Active:

; 137  : 
; 138  : 				while(!gMSetBase.GetBoxPosition(m_MapNumber, m_BossMapX53-4, m_BossMapY53-4, m_BossMapX53+4, m_BossMapY53+4, gObj[n].X,gObj[n].Y)){}

  001a3	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  001aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  001b0	8d 94 01 06 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+262]
  001b7	52		 push	 edx
  001b8	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  001bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  001c5	8d 94 01 04 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+260]
  001cc	52		 push	 edx
  001cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001d3	83 c1 04	 add	 ecx, 4
  001d6	51		 push	 ecx
  001d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001da	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001dd	83 c0 04	 add	 eax, 4
  001e0	50		 push	 eax
  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001e7	83 ea 04	 sub	 edx, 4
  001ea	52		 push	 edx
  001eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ee	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001f1	83 e9 04	 sub	 ecx, 4
  001f4	51		 push	 ecx
  001f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f8	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  001fc	50		 push	 eax
  001fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  00202	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
  00207	85 c0		 test	 eax, eax
  00209	75 02		 jne	 SHORT $LN17@Active
  0020b	eb 96		 jmp	 SHORT $LN7@Active
$LN17@Active:

; 139  : 			}
; 140  : 			
; 141  : 			gObj[n].TX = gObj[n].X;

  0020d	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00214	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  0021b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00221	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00227	66 8b 84 06 04
	01 00 00	 mov	 ax, WORD PTR [esi+eax+260]
  0022f	66 89 84 0a 20
	01 00 00	 mov	 WORD PTR [edx+ecx+288], ax

; 142  : 			gObj[n].TY = gObj[n].Y;

  00237	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0023e	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  00245	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0024b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00251	66 8b 84 06 06
	01 00 00	 mov	 ax, WORD PTR [esi+eax+262]
  00259	66 89 84 0a 22
	01 00 00	 mov	 WORD PTR [edx+ecx+290], ax

; 143  : 			gObj[n].MTX = gObj[n].X;

  00261	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00268	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  0026f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00275	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0027b	66 8b 84 06 04
	01 00 00	 mov	 ax, WORD PTR [esi+eax+260]
  00283	66 89 84 0a 24
	01 00 00	 mov	 WORD PTR [edx+ecx+292], ax

; 144  : 			gObj[n].MTY = gObj[n].Y;

  0028b	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00292	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0029f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  002a5	66 8b 84 06 06
	01 00 00	 mov	 ax, WORD PTR [esi+eax+262]
  002ad	66 89 84 0a 26
	01 00 00	 mov	 WORD PTR [edx+ecx+294], ax

; 145  : 			gObj[n].StartX = (BYTE)gObj[n].X;

  002b5	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  002bc	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  002c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  002c9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  002cf	8a 84 06 04 01
	00 00		 mov	 al, BYTE PTR [esi+eax+260]
  002d6	88 84 0a 1a 01
	00 00		 mov	 BYTE PTR [edx+ecx+282], al

; 146  : 			gObj[n].StartY = (BYTE)gObj[n].Y;

  002dd	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  002e4	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  002eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  002f1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  002f7	8a 84 06 06 01
	00 00		 mov	 al, BYTE PTR [esi+eax+262]
  002fe	88 84 0a 1b 01
	00 00		 mov	 BYTE PTR [edx+ecx+283], al

; 147  : 
; 148  : 			gObj[n].m_State	= OBJST_CREATE;	

  00305	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0030c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00312	c7 84 01 b8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+440], 1

; 149  : 			
; 150  : 		}

  0031d	e9 10 03 00 00	 jmp	 $LN14@Active
$LN13@Active:

; 151  : 		else if( gObj[n].Class == 55 || 

  00322	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00329	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0032f	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  00337	83 fa 37	 cmp	 edx, 55			; 00000037H
  0033a	74 1e		 je	 SHORT $LN19@Active
  0033c	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00343	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00349	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  00351	83 fa 38	 cmp	 edx, 56			; 00000038H
  00354	0f 85 d8 02 00
	00		 jne	 $LN14@Active
$LN19@Active:

; 152  : 			gObj[n].Class == 56 )
; 153  : 		{
; 154  : 			gObj[n].Live	= 1;

  0035a	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00361	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00367	c6 44 01 66 01	 mov	 BYTE PTR [ecx+eax+102], 1

; 155  : 			if( gObj[n].Class == 55 )

  0036c	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00373	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00379	0f b7 94 01 9c
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax+156]
  00381	83 fa 37	 cmp	 edx, 55			; 00000037H
  00384	0f 85 08 01 00
	00		 jne	 $LN20@Active

; 156  : 			{
; 157  : 				if( rand()%2 == 0 )

  0038a	e8 00 00 00 00	 call	 _rand
  0038f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00394	79 05		 jns	 SHORT $LN25@Active
  00396	48		 dec	 eax
  00397	83 c8 fe	 or	 eax, -2			; fffffffeH
  0039a	40		 inc	 eax
$LN25@Active:
  0039b	85 c0		 test	 eax, eax
  0039d	75 09		 jne	 SHORT $LN22@Active

; 158  : 				{
; 159  : 					m_MapNumber = 0;

  0039f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003a2	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 160  : 				}

  003a6	eb 07		 jmp	 SHORT $LN23@Active
$LN22@Active:

; 161  : 				else m_MapNumber = 3;

  003a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	c6 40 0c 03	 mov	 BYTE PTR [eax+12], 3
$LN23@Active:

; 162  : 				
; 163  : 				gObj[n].MapNumber = m_MapNumber;			

  003af	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  003b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  003bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003bf	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  003c2	88 94 01 09 01
	00 00		 mov	 BYTE PTR [ecx+eax+265], dl
$LN9@Active:

; 164  : 
; 165  : 				while(!gMSetBase.GetBoxPosition(m_MapNumber, 10, 10, 240, 240, gObj[n].X,gObj[n].Y)){}

  003c9	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  003d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  003d6	8d 94 01 06 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+262]
  003dd	52		 push	 edx
  003de	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  003e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  003eb	8d 94 01 04 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+260]
  003f2	52		 push	 edx
  003f3	68 f0 00 00 00	 push	 240			; 000000f0H
  003f8	68 f0 00 00 00	 push	 240			; 000000f0H
  003fd	6a 0a		 push	 10			; 0000000aH
  003ff	6a 0a		 push	 10			; 0000000aH
  00401	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00404	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00408	51		 push	 ecx
  00409	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  0040e	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
  00413	85 c0		 test	 eax, eax
  00415	75 02		 jne	 SHORT $LN10@Active
  00417	eb b0		 jmp	 SHORT $LN9@Active
$LN10@Active:

; 166  : 				//gMSetBase.GetBoxPosition(m_MapNumber, 215, 167, 216, 168, gObj[n].X,gObj[n].Y);
; 167  : 
; 168  : 				m_BossMap55  = gObj[n].MapNumber;

  00419	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00420	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00426	0f b6 94 01 09
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+265]
  0042e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00431	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 169  : 				m_BossMapX55 = gObj[n].X;

  00434	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0043b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00441	0f bf 94 01 04
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+260]
  00449	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0044c	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 170  : 				m_BossMapY55 = gObj[n].Y;

  0044f	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00456	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0045c	0f bf 94 01 06
	01 00 00	 movsx	 edx, WORD PTR [ecx+eax+262]
  00464	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00467	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 171  : 				LogAdd("event %d %d %d create ", m_BossMap55, m_BossMapX55, m_BossMapY55);

  0046a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0046d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00470	51		 push	 ecx
  00471	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00474	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00477	50		 push	 eax
  00478	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0047e	52		 push	 edx
  0047f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PHJBIBLO@event?5?$CFd?5?$CFd?5?$CFd?5create?5@
  00484	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0048a	83 c4 10	 add	 esp, 16			; 00000010H

; 172  : 			}

  0048d	e9 90 00 00 00	 jmp	 $LN21@Active
$LN20@Active:

; 173  : 			else
; 174  : 			{
; 175  : 				m_MapNumber = m_BossMap55;

  00492	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00495	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00498	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  0049b	88 50 0c	 mov	 BYTE PTR [eax+12], dl

; 176  : 				gObj[n].MapNumber = m_MapNumber;

  0049e	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  004a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  004ab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004ae	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  004b1	88 94 01 09 01
	00 00		 mov	 BYTE PTR [ecx+eax+265], dl
$LN11@Active:

; 177  : 
; 178  : 				while(!gMSetBase.GetBoxPosition(m_MapNumber, m_BossMapX55-4, m_BossMapY55-4, m_BossMapX55+4, m_BossMapY55+4, gObj[n].X,gObj[n].Y)){}

  004b8	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  004bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  004c5	8d 94 01 06 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+262]
  004cc	52		 push	 edx
  004cd	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  004d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  004da	8d 94 01 04 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+260]
  004e1	52		 push	 edx
  004e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004e5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004e8	83 c1 04	 add	 ecx, 4
  004eb	51		 push	 ecx
  004ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004f2	83 c0 04	 add	 eax, 4
  004f5	50		 push	 eax
  004f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f9	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004fc	83 ea 04	 sub	 edx, 4
  004ff	52		 push	 edx
  00500	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00503	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00506	83 e9 04	 sub	 ecx, 4
  00509	51		 push	 ecx
  0050a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0050d	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00511	50		 push	 eax
  00512	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  00517	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAF0@Z ; CMonsterSetBase::GetBoxPosition
  0051c	85 c0		 test	 eax, eax
  0051e	75 02		 jne	 SHORT $LN21@Active
  00520	eb 96		 jmp	 SHORT $LN11@Active
$LN21@Active:

; 179  : 
; 180  : 			}
; 181  : 			
; 182  : 			gObj[n].TX = gObj[n].X;

  00522	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00529	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  00530	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00536	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0053c	66 8b 84 06 04
	01 00 00	 mov	 ax, WORD PTR [esi+eax+260]
  00544	66 89 84 0a 20
	01 00 00	 mov	 WORD PTR [edx+ecx+288], ax

; 183  : 			gObj[n].TY = gObj[n].Y;

  0054c	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00553	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  0055a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00560	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00566	66 8b 84 06 06
	01 00 00	 mov	 ax, WORD PTR [esi+eax+262]
  0056e	66 89 84 0a 22
	01 00 00	 mov	 WORD PTR [edx+ecx+290], ax

; 184  : 			gObj[n].MTX = gObj[n].X;

  00576	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  0057d	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  00584	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0058a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00590	66 8b 84 06 04
	01 00 00	 mov	 ax, WORD PTR [esi+eax+260]
  00598	66 89 84 0a 24
	01 00 00	 mov	 WORD PTR [edx+ecx+292], ax

; 185  : 			gObj[n].MTY = gObj[n].Y;

  005a0	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  005a7	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  005ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  005b4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  005ba	66 8b 84 06 06
	01 00 00	 mov	 ax, WORD PTR [esi+eax+262]
  005c2	66 89 84 0a 26
	01 00 00	 mov	 WORD PTR [edx+ecx+294], ax

; 186  : 			gObj[n].StartX = (BYTE)gObj[n].X;

  005ca	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  005d1	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  005d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  005de	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  005e4	8a 84 06 04 01
	00 00		 mov	 al, BYTE PTR [esi+eax+260]
  005eb	88 84 0a 1a 01
	00 00		 mov	 BYTE PTR [edx+ecx+282], al

; 187  : 			gObj[n].StartY = (BYTE)gObj[n].Y;

  005f2	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  005f9	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _n$[ebp], 7072
  00600	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00606	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0060c	8a 84 06 06 01
	00 00		 mov	 al, BYTE PTR [esi+eax+262]
  00613	88 84 0a 1b 01
	00 00		 mov	 BYTE PTR [edx+ecx+283], al

; 188  : 
; 189  : 			gObj[n].m_State	= OBJST_CREATE;					

  0061a	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _n$[ebp], 7072
  00621	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00627	c7 84 01 b8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+440], 1
$LN14@Active:

; 190  : 		}	
; 191  : 	}

  00632	e9 de f9 ff ff	 jmp	 $LN2@Active
$LN1@Active:

; 192  : }

  00637	5f		 pop	 edi
  00638	5e		 pop	 esi
  00639	5b		 pop	 ebx
  0063a	8b e5		 mov	 esp, ebp
  0063c	5d		 pop	 ebp
  0063d	c3		 ret	 0
?Active@CAttackEvent@@QAEXXZ ENDP			; CAttackEvent::Active
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\AttackEvent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
