; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CGate@@QAE@XZ				; CGate::CGate
PUBLIC	??1CGate@@UAE@XZ				; CGate::~CGate
PUBLIC	?Init@CGate@@QAEXXZ				; CGate::Init
PUBLIC	?Load@CGate@@QAEXPAD@Z				; CGate::Load
PUBLIC	?IsGate@CGate@@QAEHH@Z				; CGate::IsGate
PUBLIC	?GetGate@CGate@@QAEHHAAF0AAE10@Z		; CGate::GetGate
PUBLIC	?GetLevel@CGate@@QAEHH@Z			; CGate::GetLevel
PUBLIC	?IsInGate@CGate@@QAEHHH@Z			; CGate::IsInGate
PUBLIC	??_GCGate@@UAEPAXI@Z				; CGate::`scalar deleting destructor'
PUBLIC	??_7CGate@@6B@					; CGate::`vftable'
PUBLIC	?gGateC@@3VCGate@@A				; gGateC
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5erro@ ; `string'
PUBLIC	??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load@ ; `string'
PUBLIC	?__LINE__Var@?0??IsGate@CGate@@QAEHH@Z@4JA	; `CGate::IsGate'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@ ; `string'
PUBLIC	?__LINE__Var@?0??GetLevel@CGate@@QAEHH@Z@4JA	; `CGate::GetLevel'::`1'::__LINE__Var
PUBLIC	??_C@_0EI@JGEMLLJL@?0?5?$FLError?5GateNumber?$FN?0?5Account?5?$FL@ ; `string'
PUBLIC	??_R4CGate@@6B@					; CGate::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGate@@@8				; CGate `RTTI Type Descriptor'
PUBLIC	??_R3CGate@@8					; CGate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGate@@8					; CGate::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGate@@8				; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	__imp_?Get@CMsg@@QAEPADH@Z:PROC
EXTRN	??_ECGate@@UAEPAXI@Z:PROC			; CGate::`vector deleting destructor'
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD_TempLog@@3P6AXPADZZA:DWORD		; LogAddTD_TempLog
EXTRN	?gObj@@3PAVOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?MapC@@3PAVMapClass@@A:DWORD			; MapC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
?gGateC@@3VCGate@@A DB 0a04H DUP (?)			; gGateC
_BSS	ENDS
CRT$XCU	SEGMENT
?gGateC$initializer$@@3P6AXXZA DD FLAT:??__EgGateC@@YAXXZ ; gGateC$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CGate@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGate@@8 DD FLAT:??_R0?AVCGate@@@8	; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_R2CGate@@8
rdata$r	SEGMENT
??_R2CGate@@8 DD FLAT:??_R1A@?0A@EA@CGate@@8		; CGate::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGate@@8
rdata$r	SEGMENT
??_R3CGate@@8 DD 00H					; CGate::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGate@@@8
data$r	SEGMENT
??_R0?AVCGate@@@8 DD FLAT:??_7type_info@@6B@		; CGate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGate@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGate@@6B@
rdata$r	SEGMENT
??_R4CGate@@6B@ DD 00H					; CGate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGate@@@8
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EI@JGEMLLJL@?0?5?$FLError?5GateNumber?$FN?0?5Account?5?$FL@
CONST	SEGMENT
??_C@_0EI@JGEMLLJL@?0?5?$FLError?5GateNumber?$FN?0?5Account?5?$FL@ DB ', '
	DB	'[Error GateNumber], Account [%s], IP [%s], Name [%s], GateNum'
	DB	'ber [%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetLevel@CGate@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetLevel@CGate@@QAEHH@Z@4JA DD 0e5H	; `CGate::GetLevel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
CONST	SEGMENT
??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@ DB 'C:\Mu Onl'
	DB	'ine\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??IsGate@CGate@@QAEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??IsGate@CGate@@QAEHH@Z@4JA DD 0acH	; `CGate::IsGate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load@
CONST	SEGMENT
??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load@ DB '[%s]'
	DB	' Gate information data load complete.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5erro@
CONST	SEGMENT
??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5erro@ DB '[%s]'
	DB	' gate information load error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CGate@@6B@
CONST	SEGMENT
??_7CGate@@6B@ DD FLAT:??_R4CGate@@6B@			; CGate::`vftable'
	DD	FLAT:??_ECGate@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FgGateC@@YAXXZ
text$yd	SEGMENT
??__FgGateC@@YAXXZ PROC					; `dynamic atexit destructor for 'gGateC'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  0000e	e8 00 00 00 00	 call	 ??1CGate@@UAE@XZ	; CGate::~CGate
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgGateC@@YAXXZ ENDP					; `dynamic atexit destructor for 'gGateC''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ??__EgGateC@@YAXXZ
text$di	SEGMENT
??__EgGateC@@YAXXZ PROC					; `dynamic initializer for 'gGateC'', COMDAT

; 38   : CGate	gGateC;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  0000e	e8 00 00 00 00	 call	 ??0CGate@@QAE@XZ	; CGate::CGate
  00013	68 00 00 00 00	 push	 OFFSET ??__FgGateC@@YAXXZ ; `dynamic atexit destructor for 'gGateC''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgGateC@@YAXXZ ENDP					; `dynamic initializer for 'gGateC''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCGate@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGate@@UAEPAXI@Z PROC				; CGate::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CGate@@UAE@XZ	; CGate::~CGate
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 04 0a 00 00	 push	 2564			; 00000a04H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCGate@@UAEPAXI@Z ENDP				; CGate::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?IsInGate@CGate@@QAEHHH@Z
_TEXT	SEGMENT
_level$ = -12						; size = 4
_lpObj$ = -8						; size = 4
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_GateNumber$ = 12					; size = 4
?IsInGate@CGate@@QAEHHH@Z PROC				; CGate::IsInGate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  : 	LPOBJECTSTRUCT lpObj;
; 242  : 	lpObj = (LPOBJECTSTRUCT)&gObj[aIndex];

  0000c	69 45 08 a0 1b
	00 00		 imul	 eax, DWORD PTR _aIndex$[ebp], 7072
  00013	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00019	89 45 f8	 mov	 DWORD PTR _lpObj$[ebp], eax

; 243  : 
; 244  : 	if( !IsGate(GateNumber) )

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00028	85 c0		 test	 eax, eax
  0002a	75 2e		 jne	 SHORT $LN2@IsInGate

; 245  : 	{
; 246  : #ifdef MODIFY_CONNNECT_HACK_ATTACK_20090409
; 247  : 		// 맵이동시 오류 난 유저
; 248  : 		LogAddTD_TempLog(", [Error GateNumber], Account [%s], IP [%s], Name [%s], GateNumber [%d]", 

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00033	83 c1 73	 add	 ecx, 115		; 00000073H
  00036	51		 push	 ecx
  00037	8b 55 f8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0003a	83 c2 18	 add	 edx, 24			; 00000018H
  0003d	52		 push	 edx
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00041	83 c0 68	 add	 eax, 104		; 00000068H
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@JGEMLLJL@?0?5?$FLError?5GateNumber?$FN?0?5Account?5?$FL@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD_TempLog@@3P6AXPADZZA ; LogAddTD_TempLog
  00050	83 c4 14	 add	 esp, 20			; 00000014H

; 249  : 			lpObj->AccountID, lpObj->Ip_addr,lpObj->Name, GateNumber);
; 250  : #endif
; 251  : 		return FALSE;

  00053	33 c0		 xor	 eax, eax
  00055	e9 fd 00 00 00	 jmp	 $LN1@IsInGate
$LN2@IsInGate:

; 252  : 	}
; 253  : 	
; 254  : 	int level = m_Level[GateNumber];

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	03 45 0c	 add	 eax, DWORD PTR _GateNumber$[ebp]
  00060	0f b6 88 04 09
	00 00		 movzx	 ecx, BYTE PTR [eax+2308]
  00067	89 4d f4	 mov	 DWORD PTR _level$[ebp], ecx

; 255  : 
; 256  : #ifdef DARKLORD_WORK
; 257  : #ifdef UPDATE_NEWMAP_SWAMP_OF_CALMNESS_20080108	// 평온의 늪은 마검사, 다크로드라도 Movereq.txt 파을에 따라 입장
; 258  : 	if( GateNumber != 273 )
; 259  : #endif	// UPDATE_NEWMAP_SWAMP_OF_CALMNESS_20080108	
; 260  : 	if (lpObj->Class == CLASS_DARKLORD||lpObj->Class == CLASS_MAGUMSA) 

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0006d	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00074	83 f9 04	 cmp	 ecx, 4
  00077	74 0f		 je	 SHORT $LN4@IsInGate
  00079	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0007c	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00083	83 f9 03	 cmp	 ecx, 3
  00086	75 16		 jne	 SHORT $LN3@IsInGate
$LN4@IsInGate:

; 261  : #else				
; 262  : 	if( lpObj->Class == CLASS_MAGUMSA )
; 263  : #endif
; 264  : 	{
; 265  : 		if( level > 0 )

  00088	83 7d f4 00	 cmp	 DWORD PTR _level$[ebp], 0
  0008c	7e 10		 jle	 SHORT $LN3@IsInGate

; 266  : 		{
; 267  : 			level = ((level/3)*2);

  0008e	8b 45 f4	 mov	 eax, DWORD PTR _level$[ebp]
  00091	99		 cdq
  00092	b9 03 00 00 00	 mov	 ecx, 3
  00097	f7 f9		 idiv	 ecx
  00099	d1 e0		 shl	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _level$[ebp], eax
$LN3@IsInGate:

; 268  : 		}
; 269  : 	}
; 270  : 	
; 271  : #ifdef AUTH_GAMESERVER_CHECKKEY
; 272  : 	if( szAuthKey[15] != AUTH_CHECK_15 )
; 273  : 		DestroyGIocp();
; 274  : #endif
; 275  : 
; 276  : 	if( lpObj->Level < level )

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000a1	0f bf 88 a0 00
	00 00		 movsx	 ecx, WORD PTR [eax+160]
  000a8	3b 4d f4	 cmp	 ecx, DWORD PTR _level$[ebp]
  000ab	7d 07		 jge	 SHORT $LN6@IsInGate

; 277  : 	{
; 278  : 		return FALSE;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 a3 00 00 00	 jmp	 $LN1@IsInGate
$LN6@IsInGate:

; 279  : 	}
; 280  : 
; 281  : 	if( lpObj->MapNumber != m_MapNumber[GateNumber]	 )

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000b7	0f b6 88 09 01
	00 00		 movzx	 ecx, BYTE PTR [eax+265]
  000be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  000c4	0f b6 82 04 02
	00 00		 movzx	 eax, BYTE PTR [edx+516]
  000cb	3b c8		 cmp	 ecx, eax
  000cd	74 07		 je	 SHORT $LN7@IsInGate

; 282  : 	{
; 283  : 		return FALSE;

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 81 00 00 00	 jmp	 $LN1@IsInGate
$LN7@IsInGate:

; 284  : 	}
; 285  : 
; 286  : 	if( lpObj->X < m_Sx[GateNumber]-5 || lpObj->X > m_Ex[GateNumber]+5 ||
; 287  : 		lpObj->Y < m_Sy[GateNumber]-5 || lpObj->Y > m_Ey[GateNumber]+5 )

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000d9	0f bf 88 04 01
	00 00		 movsx	 ecx, WORD PTR [eax+260]
  000e0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e3	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  000e6	0f b6 82 04 03
	00 00		 movzx	 eax, BYTE PTR [edx+772]
  000ed	83 e8 05	 sub	 eax, 5
  000f0	3b c8		 cmp	 ecx, eax
  000f2	7c 5a		 jl	 SHORT $LN9@IsInGate
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000f7	0f bf 88 04 01
	00 00		 movsx	 ecx, WORD PTR [eax+260]
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00101	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00104	0f b6 82 04 05
	00 00		 movzx	 eax, BYTE PTR [edx+1284]
  0010b	83 c0 05	 add	 eax, 5
  0010e	3b c8		 cmp	 ecx, eax
  00110	7f 3c		 jg	 SHORT $LN9@IsInGate
  00112	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00115	0f bf 88 06 01
	00 00		 movsx	 ecx, WORD PTR [eax+262]
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00122	0f b6 82 04 04
	00 00		 movzx	 eax, BYTE PTR [edx+1028]
  00129	83 e8 05	 sub	 eax, 5
  0012c	3b c8		 cmp	 ecx, eax
  0012e	7c 1e		 jl	 SHORT $LN9@IsInGate
  00130	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00133	0f bf 88 06 01
	00 00		 movsx	 ecx, WORD PTR [eax+262]
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	03 55 0c	 add	 edx, DWORD PTR _GateNumber$[ebp]
  00140	0f b6 82 04 06
	00 00		 movzx	 eax, BYTE PTR [edx+1540]
  00147	83 c0 05	 add	 eax, 5
  0014a	3b c8		 cmp	 ecx, eax
  0014c	7e 04		 jle	 SHORT $LN8@IsInGate
$LN9@IsInGate:

; 288  : 	{
; 289  : 		return FALSE;

  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN1@IsInGate
$LN8@IsInGate:

; 290  : 	}
; 291  : 
; 292  : 	return TRUE;

  00152	b8 01 00 00 00	 mov	 eax, 1
$LN1@IsInGate:

; 293  : }

  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 08 00	 ret	 8
?IsInGate@CGate@@QAEHHH@Z ENDP				; CGate::IsInGate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?GetLevel@CGate@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_GateNumber$ = 8					; size = 4
?GetLevel@CGate@@QAEHH@Z PROC				; CGate::GetLevel, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 230  : 	if( GateNumber < 0 || GateNumber > MAX_GATE-1 ) 

  0000c	83 7d 08 00	 cmp	 DWORD PTR _GateNumber$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN3@GetLevel
  00012	81 7d 08 ff 00
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 255 ; 000000ffH
  00019	7e 31		 jle	 SHORT $LN2@GetLevel
$LN3@GetLevel:

; 231  : 	{
; 232  : 		LogAdd(lMsg.Get(451),GateNumber, __FILE__, __LINE__);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetLevel@CGate@@QAEHH@Z@4JA
  00020	83 c0 03	 add	 eax, 3
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _GateNumber$[ebp]
  0002c	51		 push	 ecx
  0002d	68 c3 01 00 00	 push	 451			; 000001c3H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 233  : 		return -1;

  00047	83 c8 ff	 or	 eax, -1
  0004a	eb 0d		 jmp	 SHORT $LN1@GetLevel
$LN2@GetLevel:

; 234  : 	}
; 235  : 		
; 236  : 	return m_Level[GateNumber];

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	03 45 08	 add	 eax, DWORD PTR _GateNumber$[ebp]
  00052	0f b6 80 04 09
	00 00		 movzx	 eax, BYTE PTR [eax+2308]
$LN1@GetLevel:

; 237  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?GetLevel@CGate@@QAEHH@Z ENDP				; CGate::GetLevel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?GetGate@CGate@@QAEHHAAF0AAE10@Z
_TEXT	SEGMENT
tv75 = -92						; size = 4
_attr$ = -21						; size = 1
_loopcount$ = -20					; size = 4
_ty$ = -16						; size = 4
_tx$ = -12						; size = 4
_gt$ = -8						; size = 4
_this$ = -4						; size = 4
_mgt$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_MapNumber$ = 20					; size = 4
_dir$ = 24						; size = 4
_Level$ = 28						; size = 4
?GetGate@CGate@@QAEHHAAF0AAE10@Z PROC			; CGate::GetGate, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  : 	if( IsGate(mgt) == FALSE ) return -1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _mgt$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00018	85 c0		 test	 eax, eax
  0001a	75 08		 jne	 SHORT $LN4@GetGate
  0001c	83 c8 ff	 or	 eax, -1
  0001f	e9 9d 01 00 00	 jmp	 $LN1@GetGate
$LN4@GetGate:

; 189  : 
; 190  : 	int gt = m_TargetGate[mgt];

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	03 45 08	 add	 eax, DWORD PTR _mgt$[ebp]
  0002a	0f b6 88 04 07
	00 00		 movzx	 ecx, BYTE PTR [eax+1796]
  00031	89 4d f8	 mov	 DWORD PTR _gt$[ebp], ecx

; 191  : 
; 192  : 	if( gt == 0 ) gt = mgt;

  00034	83 7d f8 00	 cmp	 DWORD PTR _gt$[ebp], 0
  00038	75 06		 jne	 SHORT $LN5@GetGate
  0003a	8b 45 08	 mov	 eax, DWORD PTR _mgt$[ebp]
  0003d	89 45 f8	 mov	 DWORD PTR _gt$[ebp], eax
$LN5@GetGate:

; 193  : 	int tx, ty;
; 194  : 	int loopcount=10;

  00040	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 10 ; 0000000aH
$LN2@GetGate:

; 195  : 	BYTE attr;
; 196  : 
; 197  : 	while( loopcount-- )

  00047	8b 45 ec	 mov	 eax, DWORD PTR _loopcount$[ebp]
  0004a	89 45 a4	 mov	 DWORD PTR tv75[ebp], eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _loopcount$[ebp]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d ec	 mov	 DWORD PTR _loopcount$[ebp], ecx
  00056	83 7d a4 00	 cmp	 DWORD PTR tv75[ebp], 0
  0005a	0f 84 14 01 00
	00		 je	 $LN3@GetGate

; 198  : 	{
; 199  : 		if( (m_Ex[gt]-m_Sx[gt]) > 0 )

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00066	0f b6 88 04 05
	00 00		 movzx	 ecx, BYTE PTR [eax+1284]
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  00073	0f b6 82 04 03
	00 00		 movzx	 eax, BYTE PTR [edx+772]
  0007a	2b c8		 sub	 ecx, eax
  0007c	85 c9		 test	 ecx, ecx
  0007e	7e 38		 jle	 SHORT $LN6@GetGate

; 200  : 		{
; 201  : 			tx = m_Sx[gt]+(rand()%((m_Ex[gt]-m_Sx[gt])));

  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00086	0f b6 b0 04 03
	00 00		 movzx	 esi, BYTE PTR [eax+772]
  0008d	e8 00 00 00 00	 call	 _rand
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	03 4d f8	 add	 ecx, DWORD PTR _gt$[ebp]
  00098	0f b6 89 04 05
	00 00		 movzx	 ecx, BYTE PTR [ecx+1284]
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  000a5	0f b6 92 04 03
	00 00		 movzx	 edx, BYTE PTR [edx+772]
  000ac	2b ca		 sub	 ecx, edx
  000ae	99		 cdq
  000af	f7 f9		 idiv	 ecx
  000b1	03 f2		 add	 esi, edx
  000b3	89 75 f4	 mov	 DWORD PTR _tx$[ebp], esi

; 202  : 		}

  000b6	eb 10		 jmp	 SHORT $LN7@GetGate
$LN6@GetGate:

; 203  : 		else tx = m_Sx[gt];

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  000be	0f b6 88 04 03
	00 00		 movzx	 ecx, BYTE PTR [eax+772]
  000c5	89 4d f4	 mov	 DWORD PTR _tx$[ebp], ecx
$LN7@GetGate:

; 204  : 
; 205  : 		if( (m_Ey[gt]-m_Sy[gt]) > 0 )

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  000ce	0f b6 88 04 06
	00 00		 movzx	 ecx, BYTE PTR [eax+1540]
  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  000db	0f b6 82 04 04
	00 00		 movzx	 eax, BYTE PTR [edx+1028]
  000e2	2b c8		 sub	 ecx, eax
  000e4	85 c9		 test	 ecx, ecx
  000e6	7e 38		 jle	 SHORT $LN8@GetGate

; 206  : 		{
; 207  : 			ty = m_Sy[gt]+(rand()%((m_Ey[gt]-m_Sy[gt])));

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  000ee	0f b6 b0 04 04
	00 00		 movzx	 esi, BYTE PTR [eax+1028]
  000f5	e8 00 00 00 00	 call	 _rand
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	03 4d f8	 add	 ecx, DWORD PTR _gt$[ebp]
  00100	0f b6 89 04 06
	00 00		 movzx	 ecx, BYTE PTR [ecx+1540]
  00107	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010a	03 55 f8	 add	 edx, DWORD PTR _gt$[ebp]
  0010d	0f b6 92 04 04
	00 00		 movzx	 edx, BYTE PTR [edx+1028]
  00114	2b ca		 sub	 ecx, edx
  00116	99		 cdq
  00117	f7 f9		 idiv	 ecx
  00119	03 f2		 add	 esi, edx
  0011b	89 75 f0	 mov	 DWORD PTR _ty$[ebp], esi

; 208  : 		}

  0011e	eb 10		 jmp	 SHORT $LN9@GetGate
$LN8@GetGate:

; 209  : 		else ty = m_Sy[gt];

  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  00126	0f b6 88 04 04
	00 00		 movzx	 ecx, BYTE PTR [eax+1028]
  0012d	89 4d f0	 mov	 DWORD PTR _ty$[ebp], ecx
$LN9@GetGate:

; 210  : 
; 211  : 		attr = MapC[MapNumber].GetAttr(tx, ty);

  00130	8b 45 f0	 mov	 eax, DWORD PTR _ty$[ebp]
  00133	50		 push	 eax
  00134	8b 4d f4	 mov	 ecx, DWORD PTR _tx$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 14	 mov	 edx, DWORD PTR _MapNumber$[ebp]
  0013b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0013e	69 c8 8c 04 05
	00		 imul	 ecx, eax, 328844
  00144	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A ; MapC
  0014a	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  0014f	88 45 eb	 mov	 BYTE PTR _attr$[ebp], al

; 212  : 		if( ((attr&MAP_ATTR_BLOCK) != MAP_ATTR_BLOCK) && 
; 213  : 			((attr&MAP_ATTR_STAND) != MAP_ATTR_STAND) &&

  00152	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  00156	83 e0 04	 and	 eax, 4
  00159	75 14		 jne	 SHORT $LN10@GetGate
  0015b	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  0015f	83 e0 02	 and	 eax, 2
  00162	75 0b		 jne	 SHORT $LN10@GetGate
  00164	0f b6 45 eb	 movzx	 eax, BYTE PTR _attr$[ebp]
  00168	83 e0 08	 and	 eax, 8
  0016b	75 02		 jne	 SHORT $LN10@GetGate

; 214  : 			((attr&MAP_ATTR_HOLLOW) != MAP_ATTR_HOLLOW)) 
; 215  : 		{			
; 216  : 			break;

  0016d	eb 05		 jmp	 SHORT $LN3@GetGate
$LN10@GetGate:

; 217  : 		}
; 218  : 	}

  0016f	e9 d3 fe ff ff	 jmp	 $LN2@GetGate
$LN3@GetGate:

; 219  : 	x			= tx;

  00174	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00177	66 8b 4d f4	 mov	 cx, WORD PTR _tx$[ebp]
  0017b	66 89 08	 mov	 WORD PTR [eax], cx

; 220  : 	y			= ty;

  0017e	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00181	66 8b 4d f0	 mov	 cx, WORD PTR _ty$[ebp]
  00185	66 89 08	 mov	 WORD PTR [eax], cx

; 221  : 	MapNumber	= m_MapNumber[gt];

  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  0018e	8b 4d 14	 mov	 ecx, DWORD PTR _MapNumber$[ebp]
  00191	8a 90 04 02 00
	00		 mov	 dl, BYTE PTR [eax+516]
  00197	88 11		 mov	 BYTE PTR [ecx], dl

; 222  : 	dir			= m_Dir[gt];

  00199	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  0019f	8b 4d 18	 mov	 ecx, DWORD PTR _dir$[ebp]
  001a2	8a 90 04 08 00
	00		 mov	 dl, BYTE PTR [eax+2052]
  001a8	88 11		 mov	 BYTE PTR [ecx], dl

; 223  : 	Level		= m_Level[gt];

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	03 45 f8	 add	 eax, DWORD PTR _gt$[ebp]
  001b0	66 0f b6 88 04
	09 00 00	 movzx	 cx, BYTE PTR [eax+2308]
  001b8	8b 55 1c	 mov	 edx, DWORD PTR _Level$[ebp]
  001bb	66 89 0a	 mov	 WORD PTR [edx], cx

; 224  : 	return gt;

  001be	8b 45 f8	 mov	 eax, DWORD PTR _gt$[ebp]
$LN1@GetGate:

; 225  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 18 00	 ret	 24			; 00000018H
?GetGate@CGate@@QAEHHAAF0AAE10@Z ENDP			; CGate::GetGate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?IsGate@CGate@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_GateNumber$ = 8					; size = 4
?IsGate@CGate@@QAEHH@Z PROC				; CGate::IsGate, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 	if( GateNumber < 0 || GateNumber > MAX_GATE-1 ) 

  0000c	83 7d 08 00	 cmp	 DWORD PTR _GateNumber$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN3@IsGate
  00012	81 7d 08 ff 00
	00 00		 cmp	 DWORD PTR _GateNumber$[ebp], 255 ; 000000ffH
  00019	7e 30		 jle	 SHORT $LN2@IsGate
$LN3@IsGate:

; 174  : 	{
; 175  : 		LogAdd(lMsg.Get(451),GateNumber, __FILE__, __LINE__);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??IsGate@CGate@@QAEHH@Z@4JA
  00020	83 c0 03	 add	 eax, 3
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _GateNumber$[ebp]
  0002c	51		 push	 ecx
  0002d	68 c3 01 00 00	 push	 451			; 000001c3H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 176  : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	eb 43		 jmp	 SHORT $LN1@IsGate
$LN2@IsGate:

; 177  : 	}
; 178  : 
; 179  : 	if( m_This[GateNumber] == 0xFF ) {

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	03 45 08	 add	 eax, DWORD PTR _GateNumber$[ebp]
  00051	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00055	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0005b	75 2c		 jne	 SHORT $LN4@IsGate

; 180  : 		LogAdd(lMsg.Get(452),__FILE__, __LINE__);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??IsGate@CGate@@QAEHH@Z@4JA
  00062	83 c0 08	 add	 eax, 8
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@PDPOMDGE@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  0006b	68 c4 01 00 00	 push	 452			; 000001c4H
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 		return FALSE;

  00085	33 c0		 xor	 eax, eax
  00087	eb 05		 jmp	 SHORT $LN1@IsGate
$LN4@IsGate:

; 182  : 	}
; 183  : 	return TRUE;

  00089	b8 01 00 00 00	 mov	 eax, 1
$LN1@IsGate:

; 184  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?IsGate@CGate@@QAEHH@Z ENDP				; CGate::IsGate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?Load@CGate@@QAEXPAD@Z
_TEXT	SEGMENT
_number$ = -12						; size = 4
_Token$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CGate@@QAEXPAD@Z PROC				; CGate::Load, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@CGate@@QAEXXZ	; CGate::Init

; 103  : 
; 104  : 	if((SMDFile=fopen(filename,"r")) == NULL)	

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00019	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, 0
  00031	75 17		 jne	 SHORT $LN4@Load

; 105  : 	{
; 106  : 		LogAdd("[%s] gate information load error", filename);

  00033	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5erro@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00042	83 c4 08	 add	 esp, 8

; 107  : 		return ;

  00045	e9 62 01 00 00	 jmp	 $LN1@Load
$LN4@Load:

; 108  : 	}
; 109  : 	SMDToken Token;
; 110  : 
; 111  : 	int number;
; 112  : 
; 113  : 	while( true )

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 35 01 00
	00		 je	 $LN3@Load

; 114  : 	{
; 115  : 		Token = (*GetToken)();

  00057	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0005c	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax

; 116  : 		if(Token == END) break;

  0005f	83 7d f8 02	 cmp	 DWORD PTR _Token$[ebp], 2
  00063	75 05		 jne	 SHORT $LN5@Load
  00065	e9 22 01 00 00	 jmp	 $LN3@Load
$LN5@Load:

; 117  : 		if(Token == NUMBER)

  0006a	83 7d f8 01	 cmp	 DWORD PTR _Token$[ebp], 1
  0006e	0f 85 13 01 00
	00		 jne	 $LN6@Load

; 118  : 		{
; 119  : 			number = (int)TokenNumber;

  00074	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0007c	89 45 f4	 mov	 DWORD PTR _number$[ebp], eax

; 120  : 			m_This[number] = number;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	03 45 f4	 add	 eax, DWORD PTR _number$[ebp]
  00085	8a 4d f4	 mov	 cl, BYTE PTR _number$[ebp]
  00088	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 121  : 			Token = (*GetToken)(); m_Flag[number]		= (int)TokenNumber;

  0008b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00090	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  00093	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  000a1	88 81 04 01 00
	00		 mov	 BYTE PTR [ecx+260], al

; 122  : 			Token = (*GetToken)(); m_MapNumber[number]	= (int)TokenNumber;

  000a7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000ac	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  000af	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  000bd	88 81 04 02 00
	00		 mov	 BYTE PTR [ecx+516], al

; 123  : 			Token = (*GetToken)(); m_Sx[number]			= (int)TokenNumber;

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000c8	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  000cb	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  000d9	88 81 04 03 00
	00		 mov	 BYTE PTR [ecx+772], al

; 124  : 			Token = (*GetToken)(); m_Sy[number]			= (int)TokenNumber;

  000df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000e4	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  000e7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  000f5	88 81 04 04 00
	00		 mov	 BYTE PTR [ecx+1028], al

; 125  : 			Token = (*GetToken)(); m_Ex[number]			= (int)TokenNumber;

  000fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00100	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  00103	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00111	88 81 04 05 00
	00		 mov	 BYTE PTR [ecx+1284], al

; 126  : 			Token = (*GetToken)(); m_Ey[number]			= (int)TokenNumber;

  00117	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0011c	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  0011f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  0012d	88 81 04 06 00
	00		 mov	 BYTE PTR [ecx+1540], al

; 127  : 			Token = (*GetToken)(); m_TargetGate[number] = (int)TokenNumber;

  00133	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00138	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  0013b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00149	88 81 04 07 00
	00		 mov	 BYTE PTR [ecx+1796], al

; 128  : 			Token = (*GetToken)(); m_Dir[number]		= (int)TokenNumber;

  0014f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00154	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  00157	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00165	88 81 04 08 00
	00		 mov	 BYTE PTR [ecx+2052], al

; 129  : 			Token = (*GetToken)(); m_Level[number]		= (int)TokenNumber;

  0016b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00170	89 45 f8	 mov	 DWORD PTR _Token$[ebp], eax
  00173	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	03 4d f4	 add	 ecx, DWORD PTR _number$[ebp]
  00181	88 81 04 09 00
	00		 mov	 BYTE PTR [ecx+2308], al
$LN6@Load:

; 130  : 		}
; 131  : 	}

  00187	e9 be fe ff ff	 jmp	 $LN4@Load
$LN3@Load:

; 132  : 	fclose(SMDFile);

  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _fclose
  00197	83 c4 04	 add	 esp, 4

; 133  : 	LogAdd("[%s] Gate information data load complete.", filename);

  0019a	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0019d	50		 push	 eax
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load@
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001a9	83 c4 08	 add	 esp, 8
$LN1@Load:

; 134  : }

  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	5b		 pop	 ebx
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 04 00	 ret	 4
?Load@CGate@@QAEXPAD@Z ENDP				; CGate::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?Init@CGate@@QAEXXZ
_TEXT	SEGMENT
_n$1 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CGate@@QAEXXZ PROC				; CGate::Init, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	for( int n=0; n<MAX_GATE; n++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@Init
$LN2@Init:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _n$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _n$1[ebp], eax
$LN4@Init:
  0001e	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _n$1[ebp], 256 ; 00000100H
  00025	7d 19		 jge	 SHORT $LN1@Init

; 53   : 	{
; 54   : 		m_This[n] = 0xFF;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	03 45 f8	 add	 eax, DWORD PTR _n$1[ebp]
  0002d	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH

; 55   : 		m_Level[n] = 0;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	03 45 f8	 add	 eax, DWORD PTR _n$1[ebp]
  00037	c6 80 04 09 00
	00 00		 mov	 BYTE PTR [eax+2308], 0

; 56   : 	}

  0003e	eb d5		 jmp	 SHORT $LN2@Init
$LN1@Init:

; 57   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?Init@CGate@@QAEXXZ ENDP				; CGate::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ??1CGate@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CGate@@UAE@XZ PROC					; CGate::~CGate, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGate@@6B@

; 47   : 
; 48   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CGate@@UAE@XZ ENDP					; CGate::~CGate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ??0CGate@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGate@@QAE@XZ PROC					; CGate::CGate, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGate@@6B@

; 42   : 	
; 43   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CGate@@QAE@XZ ENDP					; CGate::CGate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\Include\Readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
tv93 = -184						; size = 4
$T1 = -180						; size = 4
_TempString$ = -112					; size = 100
_p$ = -12						; size = 4
_ch$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 26   : 	unsigned char ch;
; 27   : 	TokenString[0] = '\0';

  00016	b8 01 00 00 00	 mov	 eax, 1
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	89 8d 4c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00024	83 bd 4c ff ff
	ff 64		 cmp	 DWORD PTR $T1[ebp], 100	; 00000064H
  0002b	73 02		 jae	 SHORT $LN31@GetToken
  0002d	eb 05		 jmp	 SHORT $LN32@GetToken
$LN31@GetToken:
  0002f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN32@GetToken:
  00034	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0003a	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA[edx], 0
$LN4@GetToken:

; 28   : 	do
; 29   : 	{
; 30   : 		if ( (ch =(unsigned char) fgetc(SMDFile)) == (BYTE)EOF) return END;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _fgetc
  0004c	83 c4 04	 add	 esp, 4
  0004f	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00052	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00056	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0005c	75 0a		 jne	 SHORT $LN15@GetToken
  0005e	b8 02 00 00 00	 mov	 eax, 2
  00063	e9 d9 02 00 00	 jmp	 $LN7@GetToken
$LN15@GetToken:

; 31   : 		if (ch=='/' && (ch =(unsigned char) fgetc(SMDFile) )=='/')	

  00068	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  0006c	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0006f	75 56		 jne	 SHORT $LN17@GetToken
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _fgetc
  0007c	83 c4 04	 add	 esp, 4
  0007f	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  00082	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00086	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  00089	75 3c		 jne	 SHORT $LN17@GetToken
$LN5@GetToken:

; 32   : 		{
; 33   : 			while((ch != '\n') && (ch != (BYTE)EOF)) {			// 2003.09.02 H.J.I 수정

  0008b	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  0008f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00092	74 1e		 je	 SHORT $LN6@GetToken
  00094	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  00098	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0009d	74 13		 je	 SHORT $LN6@GetToken

; 34   : 				ch = (unsigned char) fgetc( SMDFile);

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _fgetc
  000aa	83 c4 04	 add	 esp, 4
  000ad	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al

; 35   : 			}

  000b0	eb d9		 jmp	 SHORT $LN5@GetToken
$LN6@GetToken:

; 36   : 
; 37   : 			if (ch == (BYTE)EOF)

  000b2	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  000b6	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000bb	75 0a		 jne	 SHORT $LN17@GetToken

; 38   : 				return END;

  000bd	b8 02 00 00 00	 mov	 eax, 2
  000c2	e9 7a 02 00 00	 jmp	 $LN7@GetToken
$LN17@GetToken:

; 39   : 		}
; 40   : 	} while(  isspace(ch) );

  000c7	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _isspace
  000d1	83 c4 04	 add	 esp, 4
  000d4	85 c0		 test	 eax, eax
  000d6	0f 85 65 ff ff
	ff		 jne	 $LN4@GetToken

; 41   : 	
; 42   : 	char *p, TempString[100];
; 43   : 	switch(ch)

  000dc	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  000e0	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  000e6	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  000ec	83 e9 22	 sub	 ecx, 34			; 00000022H
  000ef	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  000f5	83 bd 48 ff ff
	ff 5b		 cmp	 DWORD PTR tv93[ebp], 91	; 0000005bH
  000fc	0f 87 86 01 00
	00		 ja	 $LN27@GetToken
  00102	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv93[ebp]
  00108	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN33@GetToken[edx]
  0010f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@GetToken[eax*4]
$LN18@GetToken:

; 44   : 	{	
; 45   : 	case '#':
; 46   : 		return CurrentToken = COMMAND;

  00116	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00125	e9 17 02 00 00	 jmp	 $LN7@GetToken
$LN19@GetToken:

; 47   : 	case ';':
; 48   : 		return CurrentToken = SEMICOLON;

  0012a	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00139	e9 03 02 00 00	 jmp	 $LN7@GetToken
$LN20@GetToken:

; 49   : 	case ',':
; 50   : 		return CurrentToken = COMMA;

  0013e	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  0014d	e9 ef 01 00 00	 jmp	 $LN7@GetToken
$LN21@GetToken:

; 51   : 	case '{':
; 52   : 		return CurrentToken = LP;

  00152	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00161	e9 db 01 00 00	 jmp	 $LN7@GetToken
$LN22@GetToken:

; 53   : 	case '}':
; 54   : 		return CurrentToken = RP;

  00166	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00175	e9 c7 01 00 00	 jmp	 $LN7@GetToken
$LN23@GetToken:

; 55   : 	case '0':	case '1':	case '2':	case '3':	case '4':
; 56   : 	case '5':	case '6':	case '7':	case '8':	case '9':
; 57   : 	case '.':	case '-':
; 58   : 		ungetc(ch,SMDFile);

  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0017f	50		 push	 eax
  00180	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 _ungetc
  0018a	83 c4 08	 add	 esp, 8

; 59   : 		p = TempString;

  0018d	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  00190	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN9@GetToken:

; 60   : 		while ( (  (ch = getc(SMDFile) ) !=(BYTE)EOF) && (ch=='.' || isdigit(ch) || ch=='-') )

  00193	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _getc
  0019e	83 c4 04	 add	 esp, 4
  001a1	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  001a4	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  001a8	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  001ae	74 36		 je	 SHORT $LN10@GetToken
  001b0	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  001b4	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001b7	74 1a		 je	 SHORT $LN24@GetToken
  001b9	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _isdigit
  001c3	83 c4 04	 add	 esp, 4
  001c6	85 c0		 test	 eax, eax
  001c8	75 09		 jne	 SHORT $LN24@GetToken
  001ca	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  001ce	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  001d1	75 13		 jne	 SHORT $LN10@GetToken
$LN24@GetToken:

; 61   : 			*p++ = ch;

  001d3	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  001d6	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  001d9	88 08		 mov	 BYTE PTR [eax], cl
  001db	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  001de	83 c2 01	 add	 edx, 1
  001e1	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  001e4	eb ad		 jmp	 SHORT $LN9@GetToken
$LN10@GetToken:

; 62   : 		*p = 0;

  001e6	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  001e9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 63   : 		TokenNumber = (float)atof(TempString);

  001ec	8d 45 90	 lea	 eax, DWORD PTR _TempString$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _atof
  001f5	83 c4 04	 add	 esp, 4
  001f8	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA

; 64   : 		//			sscanf(TempString," %f ",&TokenNumber);
; 65   : 		return CurrentToken = NUMBER;

  001fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  0020d	e9 2f 01 00 00	 jmp	 $LN7@GetToken
$LN25@GetToken:

; 66   : 	case '"':
; 67   : 		p = TokenString;

  00212	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET ?TokenString@@3PADA
$LN11@GetToken:

; 68   : 		while ( (  (ch = getc(SMDFile) ) !=(BYTE)EOF) && (ch!='"'))// || isalnum(ch)) )

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 _getc
  00224	83 c4 04	 add	 esp, 4
  00227	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  0022a	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  0022e	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00234	74 1c		 je	 SHORT $LN12@GetToken
  00236	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  0023a	83 f8 22	 cmp	 eax, 34			; 00000022H
  0023d	74 13		 je	 SHORT $LN12@GetToken

; 69   : 			*p++ = ch;

  0023f	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00242	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  00245	88 08		 mov	 BYTE PTR [eax], cl
  00247	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0024a	83 c2 01	 add	 edx, 1
  0024d	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00250	eb c7		 jmp	 SHORT $LN11@GetToken
$LN12@GetToken:

; 70   : 		if (ch!='"')

  00252	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  00256	83 f8 22	 cmp	 eax, 34			; 00000022H
  00259	74 13		 je	 SHORT $LN26@GetToken

; 71   : 			ungetc(ch,SMDFile);

  0025b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00260	50		 push	 eax
  00261	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00265	51		 push	 ecx
  00266	e8 00 00 00 00	 call	 _ungetc
  0026b	83 c4 08	 add	 esp, 8
$LN26@GetToken:

; 72   : 		*p = 0;

  0026e	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00271	c6 00 00	 mov	 BYTE PTR [eax], 0

; 73   : 		return CurrentToken = NAME;

  00274	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00283	e9 b9 00 00 00	 jmp	 $LN7@GetToken
$LN27@GetToken:

; 74   : 	default:
; 75   : 		if (isalpha(ch))	

  00288	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _isalpha
  00292	83 c4 04	 add	 esp, 4
  00295	85 c0		 test	 eax, eax
  00297	0f 84 95 00 00
	00		 je	 $LN28@GetToken

; 76   : 		{
; 77   : 			p = TokenString;

  0029d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET ?TokenString@@3PADA

; 78   : 			*p++ = ch;

  002a4	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  002a7	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  002aa	88 08		 mov	 BYTE PTR [eax], cl
  002ac	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  002af	83 c2 01	 add	 edx, 1
  002b2	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
$LN13@GetToken:

; 79   : 			while ( (  (ch = getc(SMDFile) ) !=(BYTE)EOF) && (ch=='.' || ch=='_' || isalnum(ch)) )

  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 _getc
  002c0	83 c4 04	 add	 esp, 4
  002c3	88 45 fb	 mov	 BYTE PTR _ch$[ebp], al
  002c6	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  002ca	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  002d0	74 36		 je	 SHORT $LN14@GetToken
  002d2	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  002d6	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  002d9	74 1a		 je	 SHORT $LN29@GetToken
  002db	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  002df	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  002e2	74 11		 je	 SHORT $LN29@GetToken
  002e4	0f b6 45 fb	 movzx	 eax, BYTE PTR _ch$[ebp]
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 _isalnum
  002ee	83 c4 04	 add	 esp, 4
  002f1	85 c0		 test	 eax, eax
  002f3	74 13		 je	 SHORT $LN14@GetToken
$LN29@GetToken:

; 80   : 				*p++ = ch;

  002f5	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  002f8	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  002fb	88 08		 mov	 BYTE PTR [eax], cl
  002fd	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  00300	83 c2 01	 add	 edx, 1
  00303	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
  00306	eb ad		 jmp	 SHORT $LN13@GetToken
$LN14@GetToken:

; 81   : 			ungetc(ch,SMDFile);

  00308	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0030d	50		 push	 eax
  0030e	0f b6 4d fb	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00312	51		 push	 ecx
  00313	e8 00 00 00 00	 call	 _ungetc
  00318	83 c4 08	 add	 esp, 8

; 82   : 			*p = 0;

  0031b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  0031e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 83   : 			return CurrentToken = NAME;

  00321	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0032b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
  00330	eb 0f		 jmp	 SHORT $LN7@GetToken
$LN28@GetToken:

; 84   : 		}
; 85   : 		return CurrentToken = SMD_ERROR;

  00332	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CurrentToken@@3W4SMDToken@@A
$LN7@GetToken:

; 86   : 	}
; 87   : }

  00341	5f		 pop	 edi
  00342	5e		 pop	 esi
  00343	5b		 pop	 ebx
  00344	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00347	33 cd		 xor	 ecx, ebp
  00349	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034e	8b e5		 mov	 esp, ebp
  00350	5d		 pop	 ebp
  00351	c3		 ret	 0
  00352	66 90		 npad	 2
$LN34@GetToken:
  00354	00 00 00 00	 DD	 $LN25@GetToken
  00358	00 00 00 00	 DD	 $LN18@GetToken
  0035c	00 00 00 00	 DD	 $LN20@GetToken
  00360	00 00 00 00	 DD	 $LN23@GetToken
  00364	00 00 00 00	 DD	 $LN19@GetToken
  00368	00 00 00 00	 DD	 $LN21@GetToken
  0036c	00 00 00 00	 DD	 $LN22@GetToken
  00370	00 00 00 00	 DD	 $LN27@GetToken
$LN33@GetToken:
  00374	00		 DB	 0
  00375	01		 DB	 1
  00376	07		 DB	 7
  00377	07		 DB	 7
  00378	07		 DB	 7
  00379	07		 DB	 7
  0037a	07		 DB	 7
  0037b	07		 DB	 7
  0037c	07		 DB	 7
  0037d	07		 DB	 7
  0037e	02		 DB	 2
  0037f	03		 DB	 3
  00380	03		 DB	 3
  00381	07		 DB	 7
  00382	03		 DB	 3
  00383	03		 DB	 3
  00384	03		 DB	 3
  00385	03		 DB	 3
  00386	03		 DB	 3
  00387	03		 DB	 3
  00388	03		 DB	 3
  00389	03		 DB	 3
  0038a	03		 DB	 3
  0038b	03		 DB	 3
  0038c	07		 DB	 7
  0038d	04		 DB	 4
  0038e	07		 DB	 7
  0038f	07		 DB	 7
  00390	07		 DB	 7
  00391	07		 DB	 7
  00392	07		 DB	 7
  00393	07		 DB	 7
  00394	07		 DB	 7
  00395	07		 DB	 7
  00396	07		 DB	 7
  00397	07		 DB	 7
  00398	07		 DB	 7
  00399	07		 DB	 7
  0039a	07		 DB	 7
  0039b	07		 DB	 7
  0039c	07		 DB	 7
  0039d	07		 DB	 7
  0039e	07		 DB	 7
  0039f	07		 DB	 7
  003a0	07		 DB	 7
  003a1	07		 DB	 7
  003a2	07		 DB	 7
  003a3	07		 DB	 7
  003a4	07		 DB	 7
  003a5	07		 DB	 7
  003a6	07		 DB	 7
  003a7	07		 DB	 7
  003a8	07		 DB	 7
  003a9	07		 DB	 7
  003aa	07		 DB	 7
  003ab	07		 DB	 7
  003ac	07		 DB	 7
  003ad	07		 DB	 7
  003ae	07		 DB	 7
  003af	07		 DB	 7
  003b0	07		 DB	 7
  003b1	07		 DB	 7
  003b2	07		 DB	 7
  003b3	07		 DB	 7
  003b4	07		 DB	 7
  003b5	07		 DB	 7
  003b6	07		 DB	 7
  003b7	07		 DB	 7
  003b8	07		 DB	 7
  003b9	07		 DB	 7
  003ba	07		 DB	 7
  003bb	07		 DB	 7
  003bc	07		 DB	 7
  003bd	07		 DB	 7
  003be	07		 DB	 7
  003bf	07		 DB	 7
  003c0	07		 DB	 7
  003c1	07		 DB	 7
  003c2	07		 DB	 7
  003c3	07		 DB	 7
  003c4	07		 DB	 7
  003c5	07		 DB	 7
  003c6	07		 DB	 7
  003c7	07		 DB	 7
  003c8	07		 DB	 7
  003c9	07		 DB	 7
  003ca	07		 DB	 7
  003cb	07		 DB	 7
  003cc	07		 DB	 7
  003cd	05		 DB	 5
  003ce	07		 DB	 7
  003cf	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Gate.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
