; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?PreviousExceptionFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA ; PreviousExceptionFilter
_BSS	SEGMENT
?PreviousExceptionFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA DD 01H DUP (?) ; PreviousExceptionFilter
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsnprintf
PUBLIC	__snprintf
PUBLIC	?Begin@CMiniDump@@SAHXZ				; CMiniDump::Begin
PUBLIC	?End@CMiniDump@@SAHXZ				; CMiniDump::End
PUBLIC	?UnHandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; UnHandledExceptionFilter
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0M@IBNEFJCG@DBGHELP?4DLL@			; `string'
PUBLIC	??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@		; `string'
PUBLIC	??_C@_0BH@FKOPIDPE@?$CFu?9?$CFu?9?$CFu_?$CFuh?$CFum?$CFus?4dmp@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__SetErrorMode@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0BH@FKOPIDPE@?$CFu?9?$CFu?9?$CFu_?$CFuh?$CFum?$CFus?4dmp@
CONST	SEGMENT
??_C@_0BH@FKOPIDPE@?$CFu?9?$CFu?9?$CFu_?$CFuh?$CFum?$CFus?4dmp@ DB '%u-%u'
	DB	'-%u_%uh%um%us.dmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
CONST	SEGMENT
??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@ DB 'MiniDumpWriteDump', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBNEFJCG@DBGHELP?4DLL@
CONST	SEGMENT
??_C@_0M@IBNEFJCG@DBGHELP?4DLL@ DB 'DBGHELP.DLL', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
;	COMDAT ?UnHandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
$T1 = -376						; size = 4
_Success$2 = -308					; size = 4
_MiniDumpExceptionInfo$3 = -304				; size = 12
_FileHandle$4 = -292					; size = 4
_SystemTime$5 = -288					; size = 16
_DumpPath$6 = -272					; size = 260
_Dump$7 = -12						; size = 4
_DllHandle$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_exceptionInfo$ = 8					; size = 4
?UnHandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC ; UnHandledExceptionFilter, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 19   : 	HMODULE	DllHandle		= NULL;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DllHandle$[ebp], 0

; 20   : 	
; 21   : 	// Windows 2000 이전에는 따로 DBGHELP를 배포해서 설정해 주어야 한다.
; 22   : 	DllHandle				= LoadLibrary(_T("DBGHELP.DLL"));

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IBNEFJCG@DBGHELP?4DLL@
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00028	89 45 f8	 mov	 DWORD PTR _DllHandle$[ebp], eax

; 23   : 	
; 24   : 	if (DllHandle)

  0002b	83 7d f8 00	 cmp	 DWORD PTR _DllHandle$[ebp], 0
  0002f	0f 84 5c 01 00
	00		 je	 $LN2@UnHandledE

; 25   : 	{
; 26   : 		MINIDUMPWRITEDUMP Dump = (MINIDUMPWRITEDUMP) GetProcAddress(DllHandle, "MiniDumpWriteDump");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _DllHandle$[ebp]
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00044	89 45 f4	 mov	 DWORD PTR _Dump$7[ebp], eax

; 27   : 		
; 28   : 		if (Dump)

  00047	83 7d f4 00	 cmp	 DWORD PTR _Dump$7[ebp], 0
  0004b	0f 84 40 01 00
	00		 je	 $LN2@UnHandledE

; 29   : 		{
; 30   : 			TCHAR		DumpPath[MAX_PATH] = {0,};

  00051	68 04 01 00 00	 push	 260			; 00000104H
  00056	6a 00		 push	 0
  00058	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _DumpPath$6[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memset
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 			SYSTEMTIME	SystemTime;
; 32   : 			
; 33   : 			GetLocalTime(&SystemTime);

  00067	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _SystemTime$5[ebp]
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 34   : 			
; 35   : 			_sntprintf(DumpPath, MAX_PATH, _T("%u-%u-%u_%uh%um%us.dmp"),

  00074	0f b7 85 ec fe
	ff ff		 movzx	 eax, WORD PTR _SystemTime$5[ebp+12]
  0007b	50		 push	 eax
  0007c	0f b7 8d ea fe
	ff ff		 movzx	 ecx, WORD PTR _SystemTime$5[ebp+10]
  00083	51		 push	 ecx
  00084	0f b7 95 e8 fe
	ff ff		 movzx	 edx, WORD PTR _SystemTime$5[ebp+8]
  0008b	52		 push	 edx
  0008c	0f b7 85 e6 fe
	ff ff		 movzx	 eax, WORD PTR _SystemTime$5[ebp+6]
  00093	50		 push	 eax
  00094	0f b7 8d e2 fe
	ff ff		 movzx	 ecx, WORD PTR _SystemTime$5[ebp+2]
  0009b	51		 push	 ecx
  0009c	0f b7 95 e0 fe
	ff ff		 movzx	 edx, WORD PTR _SystemTime$5[ebp]
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FKOPIDPE@?$CFu?9?$CFu?9?$CFu_?$CFuh?$CFum?$CFus?4dmp@
  000a9	68 04 01 00 00	 push	 260			; 00000104H
  000ae	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _DumpPath$6[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 __snprintf
  000ba	83 c4 24	 add	 esp, 36			; 00000024H

; 36   : 				SystemTime.wYear,
; 37   : 				SystemTime.wMonth,
; 38   : 				SystemTime.wDay,
; 39   : 				SystemTime.wHour,
; 40   : 				SystemTime.wMinute,
; 41   : 				SystemTime.wSecond);
; 42   : 
; 43   : 			DumpPath[MAX_PATH-1] = '\0';

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	69 c8 03 01 00
	00		 imul	 ecx, eax, 259
  000c8	89 8d 88 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  000ce	81 bd 88 fe ff
	ff 04 01 00 00	 cmp	 DWORD PTR $T1[ebp], 260	; 00000104H
  000d8	73 02		 jae	 SHORT $LN7@UnHandledE
  000da	eb 05		 jmp	 SHORT $LN8@UnHandledE
$LN7@UnHandledE:
  000dc	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN8@UnHandledE:
  000e1	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  000e7	c6 84 15 f0 fe
	ff ff 00	 mov	 BYTE PTR _DumpPath$6[ebp+edx], 0

; 44   : 			
; 45   : 			HANDLE FileHandle = CreateFile(

  000ef	6a 00		 push	 0
  000f1	68 80 00 00 00	 push	 128			; 00000080H
  000f6	6a 02		 push	 2
  000f8	6a 00		 push	 0
  000fa	6a 02		 push	 2
  000fc	68 00 00 00 40	 push	 1073741824		; 40000000H
  00101	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _DumpPath$6[ebp]
  00107	50		 push	 eax
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0010e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _FileHandle$4[ebp], eax

; 46   : 				DumpPath, 
; 47   : 				GENERIC_WRITE, 
; 48   : 				FILE_SHARE_WRITE, 
; 49   : 				NULL, CREATE_ALWAYS, 
; 50   : 				FILE_ATTRIBUTE_NORMAL, 
; 51   : 				NULL);
; 52   : 			
; 53   : 			if (FileHandle != INVALID_HANDLE_VALUE)

  00114	83 bd dc fe ff
	ff ff		 cmp	 DWORD PTR _FileHandle$4[ebp], -1
  0011b	74 67		 je	 SHORT $LN4@UnHandledE

; 54   : 			{
; 55   : 				_MINIDUMP_EXCEPTION_INFORMATION MiniDumpExceptionInfo;
; 56   : 				
; 57   : 				MiniDumpExceptionInfo.ThreadId			= GetCurrentThreadId();

  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  00123	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _MiniDumpExceptionInfo$3[ebp], eax

; 58   : 				MiniDumpExceptionInfo.ExceptionPointers	= exceptionInfo;

  00129	8b 45 08	 mov	 eax, DWORD PTR _exceptionInfo$[ebp]
  0012c	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _MiniDumpExceptionInfo$3[ebp+4], eax

; 59   : 				MiniDumpExceptionInfo.ClientPointers	= NULL;

  00132	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _MiniDumpExceptionInfo$3[ebp+8], 0

; 60   : 				
; 61   : 				BOOL Success = Dump(

  0013c	6a 00		 push	 0
  0013e	6a 00		 push	 0
  00140	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _MiniDumpExceptionInfo$3[ebp]
  00146	50		 push	 eax
  00147	6a 26		 push	 38			; 00000026H
  00149	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _FileHandle$4[ebp]
  0014f	51		 push	 ecx
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00156	50		 push	 eax
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  0015d	50		 push	 eax
  0015e	ff 55 f4	 call	 DWORD PTR _Dump$7[ebp]
  00161	89 85 cc fe ff
	ff		 mov	 DWORD PTR _Success$2[ebp], eax

; 62   : 					GetCurrentProcess(), 
; 63   : 					GetCurrentProcessId(), 
; 64   : 					FileHandle, 
; 65   : 					(MINIDUMP_TYPE)(MiniDumpNormal | MiniDumpWithHandleData 
; 66   : 					| MiniDumpWithUnloadedModules | MiniDumpWithFullMemory 
; 67   : 					),
; 68   : 					&MiniDumpExceptionInfo, 
; 69   : 					NULL, 
; 70   : 					NULL);
; 71   : 				
; 72   : 				if (Success)

  00167	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _Success$2[ebp], 0
  0016e	74 14		 je	 SHORT $LN4@UnHandledE

; 73   : 				{
; 74   : 					CloseHandle(FileHandle);

  00170	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _FileHandle$4[ebp]
  00176	50		 push	 eax
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 75   : 					
; 76   : 					return EXCEPTION_EXECUTE_HANDLER;

  0017d	b8 01 00 00 00	 mov	 eax, 1
  00182	eb 0f		 jmp	 SHORT $LN6@UnHandledE
$LN4@UnHandledE:

; 77   : 				}
; 78   : 			}
; 79   : 			
; 80   : 			CloseHandle(FileHandle);

  00184	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _FileHandle$4[ebp]
  0018a	50		 push	 eax
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@UnHandledE:

; 81   : 		}
; 82   : 	}
; 83   : 	
; 84   : 	return EXCEPTION_CONTINUE_SEARCH;

  00191	33 c0		 xor	 eax, eax
$LN6@UnHandledE:

; 85   : }

  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 04 00	 ret	 4
?UnHandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP ; UnHandledExceptionFilter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
;	COMDAT ?End@CMiniDump@@SAHXZ
_TEXT	SEGMENT
?End@CMiniDump@@SAHXZ PROC				; CMiniDump::End, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	SetUnhandledExceptionFilter(PreviousExceptionFilter);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PreviousExceptionFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA ; PreviousExceptionFilter
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 99   : 	
; 100  : 	return true;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 101  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?End@CMiniDump@@SAHXZ ENDP				; CMiniDump::End
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
;	COMDAT ?Begin@CMiniDump@@SAHXZ
_TEXT	SEGMENT
?Begin@CMiniDump@@SAHXZ PROC				; CMiniDump::Begin, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : 	SetErrorMode(SEM_FAILCRITICALERRORS);

  00009	6a 01		 push	 1
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetErrorMode@4

; 90   : 	
; 91   : 	PreviousExceptionFilter = SetUnhandledExceptionFilter(UnHandledExceptionFilter);

  00011	68 00 00 00 00	 push	 OFFSET ?UnHandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; UnHandledExceptionFilter
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4
  0001c	a3 00 00 00 00	 mov	 DWORD PTR ?PreviousExceptionFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA, eax ; PreviousExceptionFilter

; 92   : 	
; 93   : 	return true;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 94   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?Begin@CMiniDump@@SAHXZ ENDP				; CMiniDump::Begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __vsnprintf
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1975 :         __crt_va_end(_ArgList);

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1976 :         return _Result;

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1977 :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1409 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1410 :         #pragma warning(push)
; 1411 :         #pragma warning(disable: 4996) // Deprecation
; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1413 :         #pragma warning(pop)
; 1414 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MiniDump.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
