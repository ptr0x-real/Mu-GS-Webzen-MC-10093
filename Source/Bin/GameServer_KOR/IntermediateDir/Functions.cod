; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?func@@3VFunctions@@A				; func
_BSS	SEGMENT
?func@@3VFunctions@@A DB 01H DUP (?)			; func
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	_vsprintf
PUBLIC	?VerificarGM@Functions@@QAE_NH@Z		; Functions::VerificarGM
PUBLIC	?Get_PlayerIndex@Functions@@QAEHPAD@Z		; Functions::Get_PlayerIndex
PUBLIC	?HookgObjAttack@Functions@@SAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z ; Functions::HookgObjAttack
PUBLIC	?gObjCloseSetEx@Functions@@SAXHH@Z		; Functions::gObjCloseSetEx
PUBLIC	?OutWhiteMSG@Functions@@QAAXHPBDZZ		; Functions::OutWhiteMSG
PUBLIC	?GreenChatSend@Functions@@QAEXPBDPADK@Z		; Functions::GreenChatSend
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObjAttack@@YAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z:PROC ; gObjAttack
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	?gObj@@3PAVOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?SbPlayer@@3PAUSobrePlayer@@A:BYTE		; SbPlayer
EXTRN	?gs_cmd@@3VCHAT_COMMANDS@@A:BYTE		; gs_cmd
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?GreenChatSend@Functions@@QAEXPBDPADK@Z
_TEXT	SEGMENT
$T1 = -340						; size = 4
_i$2 = -272						; size = 4
_Len$ = -265						; size = 1
_Buffer$ = -264						; size = 255
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Nome$ = 8						; size = 4
_Mensagem$ = 12						; size = 4
_aIndex$ = 16						; size = 4
?GreenChatSend@Functions@@QAEXPBDPADK@Z PROC		; Functions::GreenChatSend, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	BYTE Buffer[0xFF] = {0};

  00019	68 ff 00 00 00	 push	 255			; 000000ffH
  0001e	6a 00		 push	 0
  00020	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 	BYTE Len=strlen(Mensagem);

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _Mensagem$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _strlen
  00038	83 c4 04	 add	 esp, 4
  0003b	88 85 f7 fe ff
	ff		 mov	 BYTE PTR _Len$[ebp], al

; 67   : 	Buffer[0] = 0xC1;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	6b c8 00	 imul	 ecx, eax, 0
  00049	c6 84 0d f8 fe
	ff ff c1	 mov	 BYTE PTR _Buffer$[ebp+ecx], 193 ; 000000c1H

; 68   : 	Buffer[1] = Len + 15;

  00051	0f b6 85 f7 fe
	ff ff		 movzx	 eax, BYTE PTR _Len$[ebp]
  00058	83 c0 0f	 add	 eax, 15			; 0000000fH
  0005b	b9 01 00 00 00	 mov	 ecx, 1
  00060	c1 e1 00	 shl	 ecx, 0
  00063	88 84 0d f8 fe
	ff ff		 mov	 BYTE PTR _Buffer$[ebp+ecx], al

; 69   : 	Buffer[2] = 0x00;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	d1 e0		 shl	 eax, 1
  00071	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00077	81 bd ac fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR $T1[ebp], 255	; 000000ffH
  00081	73 02		 jae	 SHORT $LN7@GreenChatS
  00083	eb 05		 jmp	 SHORT $LN8@GreenChatS
$LN7@GreenChatS:
  00085	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN8@GreenChatS:
  0008a	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00090	c6 84 0d f8 fe
	ff ff 00	 mov	 BYTE PTR _Buffer$[ebp+ecx], 0

; 70   : 	Buffer[13] = 0x40;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	6b c8 0d	 imul	 ecx, eax, 13
  000a0	c6 84 0d f8 fe
	ff ff 40	 mov	 BYTE PTR _Buffer$[ebp+ecx], 64 ; 00000040H

; 71   : 	strncpy((char*)&Buffer[3],Nome,10);

  000a8	6a 0a		 push	 10			; 0000000aH
  000aa	8b 45 08	 mov	 eax, DWORD PTR _Nome$[ebp]
  000ad	50		 push	 eax
  000ae	b9 01 00 00 00	 mov	 ecx, 1
  000b3	6b d1 03	 imul	 edx, ecx, 3
  000b6	8d 84 15 f8 fe
	ff ff		 lea	 eax, DWORD PTR _Buffer$[ebp+edx]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _strncpy
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : 	strncpy((char*)&Buffer[14],Mensagem,Len);

  000c6	0f b6 85 f7 fe
	ff ff		 movzx	 eax, BYTE PTR _Len$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _Mensagem$[ebp]
  000d1	51		 push	 ecx
  000d2	ba 01 00 00 00	 mov	 edx, 1
  000d7	6b c2 0e	 imul	 eax, edx, 14
  000da	8d 8c 05 f8 fe
	ff ff		 lea	 ecx, DWORD PTR _Buffer$[ebp+eax]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 _strncpy
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 73   : 
; 74   : 	for (int i = OBJ_STARTUSERINDEX; i < MAX_OBJECT; ++i)

  000ea	c7 85 f0 fe ff
	ff 00 19 00 00	 mov	 DWORD PTR _i$2[ebp], 6400 ; 00001900H
  000f4	eb 0f		 jmp	 SHORT $LN4@GreenChatS
$LN2@GreenChatS:
  000f6	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  000fc	83 c0 01	 add	 eax, 1
  000ff	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$2[ebp], eax
$LN4@GreenChatS:
  00105	81 bd f0 fe ff
	ff e8 1c 00 00	 cmp	 DWORD PTR _i$2[ebp], 7400 ; 00001ce8H
  0010f	7d 40		 jge	 SHORT $LN6@GreenChatS

; 75   : 	{
; 76   : 		if (gObj[i].Connected == PLAYER_PLAYING)

  00111	69 85 f0 fe ff
	ff a0 1b 00 00	 imul	 eax, DWORD PTR _i$2[ebp], 7072
  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00121	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00126	75 27		 jne	 SHORT $LN5@GreenChatS

; 77   : 		{
; 78   : 			DataSend(i, (unsigned char*)Buffer, Buffer[1]);

  00128	b8 01 00 00 00	 mov	 eax, 1
  0012d	c1 e0 00	 shl	 eax, 0
  00130	0f b6 8c 05 f8
	fe ff ff	 movzx	 ecx, BYTE PTR _Buffer$[ebp+eax]
  00138	51		 push	 ecx
  00139	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _Buffer$[ebp]
  0013f	52		 push	 edx
  00140	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@GreenChatS:

; 79   : 		}
; 80   : 	} 

  0014f	eb a5		 jmp	 SHORT $LN2@GreenChatS
$LN6@GreenChatS:

; 81   : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00157	33 cd		 xor	 ecx, ebp
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 0c 00	 ret	 12			; 0000000cH
?GreenChatSend@Functions@@QAEXPBDPADK@Z ENDP		; Functions::GreenChatSend
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?OutWhiteMSG@Functions@@QAAXHPBDZZ
_TEXT	SEGMENT
_Len$ = -1040						; size = 4
_Packet$ = -1036					; size = 4
_pArguments$ = -1032					; size = 4
_Message$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_Format$ = 16						; size = 4
?OutWhiteMSG@Functions@@QAAXHPBDZZ PROC			; Functions::OutWhiteMSG, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 04 00
	00		 sub	 esp, 1236		; 000004d4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 84   : 		char Message[1024];
; 85   : 	va_list pArguments;
; 86   : 	va_start(pArguments, Format);

  00016	8d 45 14	 lea	 eax, DWORD PTR _Format$[ebp+4]
  00019	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _pArguments$[ebp], eax

; 87   : 	vsprintf(Message, Format, pArguments);

  0001f	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _pArguments$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR _Format$[ebp]
  00029	51		 push	 ecx
  0002a	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _Message$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _vsprintf
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : 	va_end(pArguments);

  00039	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pArguments$[ebp], 0

; 89   : 	BYTE *Packet;
; 90   : 	Packet = (BYTE*) malloc(200);

  00043	68 c8 00 00 00	 push	 200			; 000000c8H
  00048	e8 00 00 00 00	 call	 _malloc
  0004d	83 c4 04	 add	 esp, 4
  00050	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _Packet$[ebp], eax

; 91   : 	memset(Packet, 0x00, 200);

  00056	68 c8 00 00 00	 push	 200			; 000000c8H
  0005b	6a 00		 push	 0
  0005d	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 	*Packet = 0xC1;

  0006c	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  00072	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H

; 93   : 	*(Packet+2) = 0x00;

  00075	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  0007b	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 94   : 	memcpy((Packet+13), Message, strlen(Message));

  0007f	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _strlen
  0008b	83 c4 04	 add	 esp, 4
  0008e	50		 push	 eax
  0008f	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _Message$[ebp]
  00095	51		 push	 ecx
  00096	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _Packet$[ebp]
  0009c	83 c2 0d	 add	 edx, 13			; 0000000dH
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 _memcpy
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 95   : 	int Len = (strlen(Message) + 0x13);

  000a8	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _Message$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _strlen
  000b4	83 c4 04	 add	 esp, 4
  000b7	83 c0 13	 add	 eax, 19			; 00000013H
  000ba	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _Len$[ebp], eax

; 96   : 	*(Packet+1) = Len;

  000c0	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  000c6	8a 8d f0 fb ff
	ff		 mov	 cl, BYTE PTR _Len$[ebp]
  000cc	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 97   : 	DataSend(aIndex, Packet, Len);

  000cf	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _Len$[ebp]
  000d5	50		 push	 eax
  000d6	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _Packet$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 	free (Packet);

  000e9	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _Packet$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _free
  000f5	83 c4 04	 add	 esp, 4

; 99   : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?OutWhiteMSG@Functions@@QAAXHPBDZZ ENDP			; Functions::OutWhiteMSG
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?gObjCloseSetEx@Functions@@SAXHH@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_aIndex$ = 8						; size = 4
_flag$ = 12						; size = 4
?gObjCloseSetEx@Functions@@SAXHH@Z PROC			; Functions::gObjCloseSetEx, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 146  : 	switch(flag)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _flag$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00013	74 02		 je	 SHORT $LN4@gObjCloseS
  00015	eb 33		 jmp	 SHORT $LN2@gObjCloseS
$LN4@gObjCloseS:

; 147  : 	{
; 148  : 		 case 1: 
; 149  : 		  {
; 150  : 			 /* if(Mata[aIndex].EnterMataMata == true)
; 151  : 			  {
; 152  : 				   Mata[aIndex].EnterMataMata = false;
; 153  : 			  }*/
; 154  : 
; 155  : 			  if(SbPlayer[aIndex].inSobreEvent == 1)

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	0f b6 0c 45 00
	00 00 00	 movzx	 ecx, BYTE PTR ?SbPlayer@@3PAUSobrePlayer@@A[eax*2]
  00022	83 f9 01	 cmp	 ecx, 1
  00025	75 23		 jne	 SHORT $LN2@gObjCloseS

; 156  : 			  {
; 157  : 				  gs_cmd.Contplayer--;

  00027	a1 64 07 00 00	 mov	 eax, DWORD PTR ?gs_cmd@@3VCHAT_COMMANDS@@A+1892
  0002c	83 e8 01	 sub	 eax, 1
  0002f	a3 64 07 00 00	 mov	 DWORD PTR ?gs_cmd@@3VCHAT_COMMANDS@@A+1892, eax

; 158  : 				  SbPlayer[aIndex].inSobreEvent = 0;

  00034	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00037	c6 04 45 00 00
	00 00 00	 mov	 BYTE PTR ?SbPlayer@@3PAUSobrePlayer@@A[eax*2], 0

; 159  : 				  SbPlayer[aIndex].pWaiting = false;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00042	c6 04 45 01 00
	00 00 00	 mov	 BYTE PTR ?SbPlayer@@3PAUSobrePlayer@@A[eax*2+1], 0
$LN2@gObjCloseS:

; 160  : 			  }
; 161  : 		  }
; 162  : 		  break;
; 163  : 	}
; 164  : 	gObjCloseSet(aIndex, flag);  

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _flag$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  00057	83 c4 08	 add	 esp, 8

; 165  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?gObjCloseSetEx@Functions@@SAXHH@Z ENDP			; Functions::gObjCloseSetEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?HookgObjAttack@Functions@@SAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_magicsend$ = 20					; size = 4
_MSBFlag$ = 24						; size = 1
_AttackDamage$ = 28					; size = 4
_bCombo$ = 32						; size = 4
?HookgObjAttack@Functions@@SAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z PROC ; Functions::HookgObjAttack, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 129  : 	if(lpTargetObj->Authority > 1)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0000c	83 b8 a4 01 00
	00 01		 cmp	 DWORD PTR [eax+420], 1
  00013	76 04		 jbe	 SHORT $LN2@HookgObjAt

; 130  : 	{
; 131  : 		return FALSE;

  00015	33 c0		 xor	 eax, eax
  00017	eb 44		 jmp	 SHORT $LN1@HookgObjAt
$LN2@HookgObjAt:

; 132  : 	}
; 133  : 
; 134  : 	if(lpTargetObj->MapNumber == 1 && gs_cmd.Sobreblock == 1)

  00019	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  0001c	0f b6 88 09 01
	00 00		 movzx	 ecx, BYTE PTR [eax+265]
  00023	83 f9 01	 cmp	 ecx, 1
  00026	75 10		 jne	 SHORT $LN3@HookgObjAt
  00028	0f b6 05 69 07
	00 00		 movzx	 eax, BYTE PTR ?gs_cmd@@3VCHAT_COMMANDS@@A+1897
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 04		 jne	 SHORT $LN3@HookgObjAt

; 135  : 	{
; 136  : 		return FALSE;

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN1@HookgObjAt
$LN3@HookgObjAt:

; 137  : 	}
; 138  : 				
; 139  : 	return gObjAttack(lpObj, lpTargetObj, lpMagic, magicsend, MSBFlag, AttackDamage, bCombo);

  00038	8b 45 20	 mov	 eax, DWORD PTR _bCombo$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0003f	51		 push	 ecx
  00040	0f b6 55 18	 movzx	 edx, BYTE PTR _MSBFlag$[ebp]
  00044	52		 push	 edx
  00045	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  00050	52		 push	 edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?gObjAttack@@YAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z ; gObjAttack
  0005a	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@HookgObjAt:

; 140  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?HookgObjAttack@Functions@@SAHPAVOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z ENDP ; Functions::HookgObjAttack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?Get_PlayerIndex@Functions@@QAEHPAD@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_Name$ = 8						; size = 4
?Get_PlayerIndex@Functions@@QAEHPAD@Z PROC		; Functions::Get_PlayerIndex, COMDAT
; _this$ = ecx

; 102  : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	for(int i=OBJECT_MIN;i<MAX_OBJECT;i++)

  0000c	c7 45 f8 00 19
	00 00		 mov	 DWORD PTR _i$1[ebp], 6400 ; 00001900H
  00013	eb 09		 jmp	 SHORT $LN4@Get_Player
$LN2@Get_Player:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Get_Player:
  0001e	81 7d f8 e8 1c
	00 00		 cmp	 DWORD PTR _i$1[ebp], 7400 ; 00001ce8H
  00025	7d 3d		 jge	 SHORT $LN3@Get_Player

; 104  : 	{     
; 105  : 
; 106  : 		if (gObj[i].Connected > 2)

  00027	69 45 f8 a0 1b
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 7072
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00034	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  00039	7e 27		 jle	 SHORT $LN5@Get_Player

; 107  : 		{
; 108  : 			if (!strcmp(gObj[i].Name, Name))

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Name$[ebp]
  0003e	50		 push	 eax
  0003f	69 4d f8 a0 1b
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 7072
  00046	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  0004c	8d 44 0a 73	 lea	 eax, DWORD PTR [edx+ecx+115]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _strcmp
  00056	83 c4 08	 add	 esp, 8
  00059	85 c0		 test	 eax, eax
  0005b	75 05		 jne	 SHORT $LN5@Get_Player

; 109  : 			{
; 110  : 				return i;

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00060	eb 05		 jmp	 SHORT $LN1@Get_Player
$LN5@Get_Player:

; 111  : 			}
; 112  : 		}
; 113  : 	}

  00062	eb b1		 jmp	 SHORT $LN2@Get_Player
$LN3@Get_Player:

; 114  : 	return -1;

  00064	83 c8 ff	 or	 eax, -1
$LN1@Get_Player:

; 115  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?Get_PlayerIndex@Functions@@QAEHPAD@Z ENDP		; Functions::Get_PlayerIndex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?VerificarGM@Functions@@QAE_NH@Z
_TEXT	SEGMENT
_x$ = -5						; size = 1
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?VerificarGM@Functions@@QAE_NH@Z PROC			; Functions::VerificarGM, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	unsigned char x = gObj[aIndex].Authority;

  0000c	69 45 08 a0 1b
	00 00		 imul	 eax, DWORD PTR _aIndex$[ebp], 7072
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAVOBJECTSTRUCT@@A ; gObj
  00019	8a 94 01 a4 01
	00 00		 mov	 dl, BYTE PTR [ecx+eax+420]
  00020	88 55 fb	 mov	 BYTE PTR _x$[ebp], dl

; 121  : 	if(x == 8 || x == 10 || x == 24 || x == 32)

  00023	0f b6 45 fb	 movzx	 eax, BYTE PTR _x$[ebp]
  00027	83 f8 08	 cmp	 eax, 8
  0002a	74 1b		 je	 SHORT $LN4@VerificarG
  0002c	0f b6 45 fb	 movzx	 eax, BYTE PTR _x$[ebp]
  00030	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00033	74 12		 je	 SHORT $LN4@VerificarG
  00035	0f b6 45 fb	 movzx	 eax, BYTE PTR _x$[ebp]
  00039	83 f8 18	 cmp	 eax, 24			; 00000018H
  0003c	74 09		 je	 SHORT $LN4@VerificarG
  0003e	0f b6 45 fb	 movzx	 eax, BYTE PTR _x$[ebp]
  00042	83 f8 20	 cmp	 eax, 32			; 00000020H
  00045	75 06		 jne	 SHORT $LN2@VerificarG
$LN4@VerificarG:

; 122  : 		return TRUE;

  00047	b0 01		 mov	 al, 1
  00049	eb 04		 jmp	 SHORT $LN1@VerificarG
  0004b	eb 02		 jmp	 SHORT $LN1@VerificarG
$LN2@VerificarG:

; 123  : 	else
; 124  : 		return FALSE;

  0004d	32 c0		 xor	 al, al
$LN1@VerificarG:

; 125  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?VerificarGM@Functions@@QAE_NH@Z ENDP			; Functions::VerificarGM
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	6a ff		 push	 -1
  00015	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 __vsnprintf_l
  0001e	83 c4 14	 add	 esp, 20			; 00000014H

; 1481 :         #pragma warning(pop)
; 1482 :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\Functions.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
