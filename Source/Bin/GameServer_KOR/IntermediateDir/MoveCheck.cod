; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CMoveCheck@@QAE@XZ				; CMoveCheck::CMoveCheck
PUBLIC	??1CMoveCheck@@UAE@XZ				; CMoveCheck::~CMoveCheck
PUBLIC	?Init@CMoveCheck@@QAEXXZ			; CMoveCheck::Init
PUBLIC	?Insert@CMoveCheck@@QAEHHH@Z			; CMoveCheck::Insert
PUBLIC	?Check@CMoveCheck@@QAEHXZ			; CMoveCheck::Check
PUBLIC	??_GCMoveCheck@@UAEPAXI@Z			; CMoveCheck::`scalar deleting destructor'
PUBLIC	??_7CMoveCheck@@6B@				; CMoveCheck::`vftable'
PUBLIC	??_R4CMoveCheck@@6B@				; CMoveCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCheck@@@8				; CMoveCheck `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCheck@@8				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCheck@@8				; CMoveCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCheck@@8			; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECMoveCheck@@UAEPAXI@Z:PROC			; CMoveCheck::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMoveCheck@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCheck@@8 DD FLAT:??_R0?AVCMoveCheck@@@8 ; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCheck@@8
rdata$r	SEGMENT
??_R2CMoveCheck@@8 DD FLAT:??_R1A@?0A@EA@CMoveCheck@@8	; CMoveCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCheck@@8
rdata$r	SEGMENT
??_R3CMoveCheck@@8 DD 00H				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCheck@@@8
data$r	SEGMENT
??_R0?AVCMoveCheck@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCheck@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMoveCheck@@6B@
rdata$r	SEGMENT
??_R4CMoveCheck@@6B@ DD 00H				; CMoveCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCheck@@@8
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCheck@@6B@
CONST	SEGMENT
??_7CMoveCheck@@6B@ DD FLAT:??_R4CMoveCheck@@6B@	; CMoveCheck::`vftable'
	DD	FLAT:??_ECMoveCheck@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMoveCheck@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMoveCheck@@UAEPAXI@Z PROC				; CMoveCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMoveCheck@@UAE@XZ	; CMoveCheck::~CMoveCheck
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 3c		 push	 60			; 0000003cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCMoveCheck@@UAEPAXI@Z ENDP				; CMoveCheck::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ?Check@CMoveCheck@@QAEHXZ
_TEXT	SEGMENT
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?Check@CMoveCheck@@QAEHXZ PROC				; CMoveCheck::Check, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	int x, y;
; 73   : 	for( y=0; y<MAX_MOVECHECK; y++)

  0000c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@Check
$LN2@Check:
  00015	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN4@Check:
  0001e	83 7d f4 05	 cmp	 DWORD PTR _y$[ebp], 5
  00022	7d 36		 jge	 SHORT $LN3@Check

; 74   : 	{
; 75   : 		for( x=0; x<MAX_MOVECHECK; x++)

  00024	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN7@Check
$LN5@Check:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN7@Check:
  00036	83 7d f8 05	 cmp	 DWORD PTR _x$[ebp], 5
  0003a	7d 1c		 jge	 SHORT $LN6@Check

; 76   : 		{
; 77   : 			if( m_PosX[y] != m_PosX[x] )

  0003c	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00045	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00048	8b 44 81 08	 mov	 eax, DWORD PTR [ecx+eax*4+8]
  0004c	3b 44 96 08	 cmp	 eax, DWORD PTR [esi+edx*4+8]
  00050	74 04		 je	 SHORT $LN14@Check

; 78   : 			{
; 79   : 				return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	eb 57		 jmp	 SHORT $LN1@Check
$LN14@Check:

; 80   : 			}
; 81   : 		}

  00056	eb d5		 jmp	 SHORT $LN5@Check
$LN6@Check:

; 82   : 	}

  00058	eb bb		 jmp	 SHORT $LN2@Check
$LN3@Check:

; 83   : 	for(  y=0; y<MAX_MOVECHECK; y++)

  0005a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN10@Check
$LN8@Check:
  00063	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN10@Check:
  0006c	83 7d f4 05	 cmp	 DWORD PTR _y$[ebp], 5
  00070	7d 36		 jge	 SHORT $LN9@Check

; 84   : 	{
; 85   : 		for( x=0; x<MAX_MOVECHECK; x++)

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00079	eb 09		 jmp	 SHORT $LN13@Check
$LN11@Check:
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN13@Check:
  00084	83 7d f8 05	 cmp	 DWORD PTR _x$[ebp], 5
  00088	7d 1c		 jge	 SHORT $LN12@Check

; 86   : 		{
; 87   : 			if( m_PosY[y] != m_PosY[x] )

  0008a	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00093	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00096	8b 44 81 1c	 mov	 eax, DWORD PTR [ecx+eax*4+28]
  0009a	3b 44 96 1c	 cmp	 eax, DWORD PTR [esi+edx*4+28]
  0009e	74 04		 je	 SHORT $LN15@Check

; 88   : 			{
; 89   : 				return FALSE;

  000a0	33 c0		 xor	 eax, eax
  000a2	eb 09		 jmp	 SHORT $LN1@Check
$LN15@Check:

; 90   : 			}
; 91   : 		}

  000a4	eb d5		 jmp	 SHORT $LN11@Check
$LN12@Check:

; 92   : 	}

  000a6	eb bb		 jmp	 SHORT $LN8@Check
$LN9@Check:

; 93   : 	return TRUE;

  000a8	b8 01 00 00 00	 mov	 eax, 1
$LN1@Check:

; 94   : }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?Check@CMoveCheck@@QAEHXZ ENDP				; CMoveCheck::Check
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ?Insert@CMoveCheck@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Insert@CMoveCheck@@QAEHHH@Z PROC			; CMoveCheck::Insert, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	if( m_TmpPosX != x || m_TmpPosY != y )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00012	3b 4d 08	 cmp	 ecx, DWORD PTR _x$[ebp]
  00015	75 0b		 jne	 SHORT $LN3@Insert
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0001d	3b 4d 0c	 cmp	 ecx, DWORD PTR _y$[ebp]
  00020	74 11		 je	 SHORT $LN2@Insert
$LN3@Insert:

; 40   : 	{
; 41   : 		// 이전과 같지 않다면..
; 42   : 		m_PosCount = 0;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 43   : 		return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 78		 jmp	 SHORT $LN1@Insert
$LN2@Insert:

; 44   : 	}
; 45   : 	
; 46   : 	m_TmpPosX = x;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00039	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 47   : 	m_TmpPosX = y;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00042	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 48   : 	//LogAddL("고정 위치 %d %d", x, y);
; 49   : 
; 50   : 	if( GetTickCount()-m_Time < 1000 )

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00051	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00056	73 0c		 jae	 SHORT $LN4@Insert

; 51   : 	{
; 52   : 		m_Time = GetTickCount();

  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN4@Insert:

; 53   : 		// 시간이 안되었고 이전 위치랑 다르면 
; 54   : 		
; 55   : 	}
; 56   : 	m_PosX[m_PosCount] = x;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00070	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 57   : 	m_PosY[m_PosCount] = y;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00080	89 44 8a 1c	 mov	 DWORD PTR [edx+ecx*4+28], eax

; 58   : 	m_PosCount++;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0008a	83 c1 01	 add	 ecx, 1
  0008d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00090	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 59   : 	if( m_PosCount > MAX_MOVECHECK-1 )

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	83 78 30 04	 cmp	 DWORD PTR [eax+48], 4
  0009a	7e 0a		 jle	 SHORT $LN5@Insert

; 60   : 		m_PosCount = 0;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$LN5@Insert:

; 61   : 
; 62   : 
; 63   : 
; 64   : 	//LogAddL("고정 위치 등록(%d) %d %d", m_PosCount, x, y);
; 65   : 	
; 66   : 	return TRUE;

  000a6	b8 01 00 00 00	 mov	 eax, 1
$LN1@Insert:

; 67   : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 08 00	 ret	 8
?Insert@CMoveCheck@@QAEHHH@Z ENDP			; CMoveCheck::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ?Init@CMoveCheck@@QAEXXZ
_TEXT	SEGMENT
_n$1 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMoveCheck@@QAEXXZ PROC				; CMoveCheck::Init, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	m_Time = GetTickCount();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 26   : 	
; 27   : 	for( int n=0; n<MAX_MOVECHECK; n++)

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$1[ebp], 0
  0001f	eb 09		 jmp	 SHORT $LN4@Init
$LN2@Init:
  00021	8b 45 f8	 mov	 eax, DWORD PTR _n$1[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 f8	 mov	 DWORD PTR _n$1[ebp], eax
$LN4@Init:
  0002a	83 7d f8 05	 cmp	 DWORD PTR _n$1[ebp], 5
  0002e	7d 1c		 jge	 SHORT $LN3@Init

; 28   : 	{
; 29   : 		m_PosX[n] = n;

  00030	8b 45 f8	 mov	 eax, DWORD PTR _n$1[ebp]
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 55 f8	 mov	 edx, DWORD PTR _n$1[ebp]
  00039	89 54 81 08	 mov	 DWORD PTR [ecx+eax*4+8], edx

; 30   : 		m_PosY[n] = n;

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _n$1[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 f8	 mov	 edx, DWORD PTR _n$1[ebp]
  00046	89 54 81 1c	 mov	 DWORD PTR [ecx+eax*4+28], edx

; 31   : 	}

  0004a	eb d5		 jmp	 SHORT $LN2@Init
$LN3@Init:

; 32   : 	m_PosCount = 0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 33   : 	m_TmpPosX  = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 34   : 	m_TmpPosY  = 0;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 35   : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?Init@CMoveCheck@@QAEXXZ ENDP				; CMoveCheck::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ??1CMoveCheck@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMoveCheck@@UAE@XZ PROC				; CMoveCheck::~CMoveCheck, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCheck@@6B@

; 20   : 
; 21   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CMoveCheck@@UAE@XZ ENDP				; CMoveCheck::~CMoveCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ??0CMoveCheck@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMoveCheck@@QAE@XZ PROC				; CMoveCheck::CMoveCheck, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCheck@@6B@

; 15   : 
; 16   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CMoveCheck@@QAE@XZ ENDP				; CMoveCheck::CMoveCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MoveCheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
