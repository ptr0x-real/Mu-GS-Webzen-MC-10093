; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CLargeRand@@QAE@XZ				; CLargeRand::CLargeRand
PUBLIC	??1CLargeRand@@UAE@XZ				; CLargeRand::~CLargeRand
PUBLIC	?seedMT@CLargeRand@@QAEXK@Z			; CLargeRand::seedMT
PUBLIC	?reloadMT@CLargeRand@@QAEKXZ			; CLargeRand::reloadMT
PUBLIC	?randomMT@CLargeRand@@QAEKXZ			; CLargeRand::randomMT
PUBLIC	??_GCLargeRand@@UAEPAXI@Z			; CLargeRand::`scalar deleting destructor'
PUBLIC	?GetLargeRand@@YAKXZ				; GetLargeRand
PUBLIC	??_7CLargeRand@@6B@				; CLargeRand::`vftable'
PUBLIC	?g_LargLand@@3VCLargeRand@@A			; g_LargLand
PUBLIC	??_R4CLargeRand@@6B@				; CLargeRand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLargeRand@@@8				; CLargeRand `RTTI Type Descriptor'
PUBLIC	??_R3CLargeRand@@8				; CLargeRand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLargeRand@@8				; CLargeRand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLargeRand@@8			; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??_ECLargeRand@@UAEPAXI@Z:PROC			; CLargeRand::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
?g_LargLand@@3VCLargeRand@@A DB 09d0H DUP (?)		; g_LargLand
_BSS	ENDS
CRT$XCU	SEGMENT
?g_LargLand$initializer$@@3P6AXXZA DD FLAT:??__Eg_LargLand@@YAXXZ ; g_LargLand$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CLargeRand@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLargeRand@@8 DD FLAT:??_R0?AVCLargeRand@@@8 ; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R2CLargeRand@@8
rdata$r	SEGMENT
??_R2CLargeRand@@8 DD FLAT:??_R1A@?0A@EA@CLargeRand@@8	; CLargeRand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLargeRand@@8
rdata$r	SEGMENT
??_R3CLargeRand@@8 DD 00H				; CLargeRand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLargeRand@@@8
data$r	SEGMENT
??_R0?AVCLargeRand@@@8 DD FLAT:??_7type_info@@6B@	; CLargeRand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLargeRand@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLargeRand@@6B@
rdata$r	SEGMENT
??_R4CLargeRand@@6B@ DD 00H				; CLargeRand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLargeRand@@@8
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_7CLargeRand@@6B@
CONST	SEGMENT
??_7CLargeRand@@6B@ DD FLAT:??_R4CLargeRand@@6B@	; CLargeRand::`vftable'
	DD	FLAT:??_ECLargeRand@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fg_LargLand@@YAXXZ
text$yd	SEGMENT
??__Fg_LargLand@@YAXXZ PROC				; `dynamic atexit destructor for 'g_LargLand'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Fg_LargLand@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_LargLand''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ??__Eg_LargLand@@YAXXZ
text$di	SEGMENT
??__Eg_LargLand@@YAXXZ PROC				; `dynamic initializer for 'g_LargLand'', COMDAT

; 8    : class CLargeRand	g_LargLand;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ??0CLargeRand@@QAE@XZ	; CLargeRand::CLargeRand
  00013	68 00 00 00 00	 push	 OFFSET ??__Fg_LargLand@@YAXXZ ; `dynamic atexit destructor for 'g_LargLand''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__Eg_LargLand@@YAXXZ ENDP				; `dynamic initializer for 'g_LargLand''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ?GetLargeRand@@YAKXZ
_TEXT	SEGMENT
?GetLargeRand@@YAKXZ PROC				; GetLargeRand, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12   : 	return (g_LargLand.randomMT());

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000e	e8 00 00 00 00	 call	 ?randomMT@CLargeRand@@QAEKXZ ; CLargeRand::randomMT

; 13   : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetLargeRand@@YAKXZ ENDP				; GetLargeRand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCLargeRand@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLargeRand@@UAEPAXI@Z PROC				; CLargeRand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 d0 09 00 00	 push	 2512			; 000009d0H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCLargeRand@@UAEPAXI@Z ENDP				; CLargeRand::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.h
;	COMDAT ?randomMT@CLargeRand@@QAEKXZ
_TEXT	SEGMENT
tv66 = -76						; size = 4
_y$ = -8						; size = 4
_this$ = -4						; size = 4
?randomMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::randomMT, COMDAT
; _this$ = ecx

; 91   : 					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 						uint32 y;
; 93   : 
; 94   : 						if(--left < 0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 cc 09 00
	00		 mov	 ecx, DWORD PTR [eax+2508]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b4	 mov	 DWORD PTR tv66[ebp], ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 b4	 mov	 eax, DWORD PTR tv66[ebp]
  00021	89 82 cc 09 00
	00		 mov	 DWORD PTR [edx+2508], eax
  00027	83 7d b4 00	 cmp	 DWORD PTR tv66[ebp], 0
  0002b	7d 0a		 jge	 SHORT $LN2@randomMT

; 95   : 							return(reloadMT());

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?reloadMT@CLargeRand@@QAEKXZ ; CLargeRand::reloadMT
  00035	eb 5a		 jmp	 SHORT $LN1@randomMT
$LN2@randomMT:

; 96   : 
; 97   : 						y  = *next++;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 88 c8 09 00
	00		 mov	 ecx, DWORD PTR [eax+2504]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	89 55 f8	 mov	 DWORD PTR _y$[ebp], edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 88 c8 09 00
	00		 mov	 ecx, DWORD PTR [eax+2504]
  0004e	83 c1 04	 add	 ecx, 4
  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	89 8a c8 09 00
	00		 mov	 DWORD PTR [edx+2504], ecx

; 98   : 						y ^= (y >> 11);

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0005d	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00060	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00063	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 99   : 						y ^= (y <<  7) & 0x9D2C5680U;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00069	c1 e0 07	 shl	 eax, 7
  0006c	25 80 56 2c 9d	 and	 eax, -1658038656	; 9d2c5680H
  00071	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00074	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 100  : 						y ^= (y << 15) & 0xEFC60000U;

  00077	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0007a	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  0007d	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  00082	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
  00085	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 101  : 
; 102  : 						return(y ^ (y >> 18));

  00088	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0008b	c1 e8 12	 shr	 eax, 18			; 00000012H
  0008e	33 45 f8	 xor	 eax, DWORD PTR _y$[ebp]
$LN1@randomMT:

; 103  : 					}

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?randomMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::randomMT
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ?reloadMT@CLargeRand@@QAEKXZ
_TEXT	SEGMENT
tv154 = -96						; size = 4
tv142 = -96						; size = 4
tv95 = -96						; size = 4
_j$ = -28						; size = 4
_s1$ = -24						; size = 4
_s0$ = -20						; size = 4
_pM$ = -16						; size = 4
_p2$ = -12						; size = 4
_p0$ = -8						; size = 4
_this$ = -4						; size = 4
?reloadMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::reloadMT, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	register uint32 *p0=state, *p2=state+2, *pM=state+M, s0, s1;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	05 38 06 00 00	 add	 eax, 1592		; 00000638H
  00026	89 45 f0	 mov	 DWORD PTR _pM$[ebp], eax

; 92   : 	register int    j;
; 93   : 
; 94   : 	if(left < -1)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 b8 cc 09 00
	00 ff		 cmp	 DWORD PTR [eax+2508], -1
  00033	7d 0d		 jge	 SHORT $LN8@reloadMT

; 95   : 		seedMT(4357U);

  00035	68 05 11 00 00	 push	 4357			; 00001105H
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?seedMT@CLargeRand@@QAEXK@Z ; CLargeRand::seedMT
$LN8@reloadMT:

; 96   : 
; 97   : 	left=N-1, next=state+1;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 80 cc 09 00
	00 6f 02 00 00	 mov	 DWORD PTR [eax+2508], 623 ; 0000026fH
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 08	 add	 ecx, 8
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	89 8a c8 09 00
	00		 mov	 DWORD PTR [edx+2504], ecx

; 98   : 
; 99   : 	for(s0=state[0], s1=state[1], j=N-M+1; --j; s0=s1, s1=*p2++)

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	6b c8 00	 imul	 ecx, eax, 0
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0006d	89 45 ec	 mov	 DWORD PTR _s0$[ebp], eax
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	c1 e1 00	 shl	 ecx, 0
  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0007f	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax
  00082	c7 45 e4 e4 00
	00 00		 mov	 DWORD PTR _j$[ebp], 228	; 000000e4H
  00089	eb 17		 jmp	 SHORT $LN4@reloadMT
$LN2@reloadMT:
  0008b	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  0008e	89 45 ec	 mov	 DWORD PTR _s0$[ebp], eax
  00091	8b 4d f4	 mov	 ecx, DWORD PTR _p2$[ebp]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	89 55 e8	 mov	 DWORD PTR _s1$[ebp], edx
  00099	8b 45 f4	 mov	 eax, DWORD PTR _p2$[ebp]
  0009c	83 c0 04	 add	 eax, 4
  0009f	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax
$LN4@reloadMT:
  000a2	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  000a5	83 e8 01	 sub	 eax, 1
  000a8	89 45 e4	 mov	 DWORD PTR _j$[ebp], eax
  000ab	74 4f		 je	 SHORT $LN3@reloadMT

; 100  : 		*p0++ = *pM++ ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);

  000ad	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  000b0	83 e0 01	 and	 eax, 1
  000b3	74 09		 je	 SHORT $LN10@reloadMT
  000b5	c7 45 a0 df b0
	08 99		 mov	 DWORD PTR tv95[ebp], -1727483681 ; 9908b0dfH
  000bc	eb 07		 jmp	 SHORT $LN11@reloadMT
$LN10@reloadMT:
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN11@reloadMT:
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _s0$[ebp]
  000c8	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  000ce	8b 55 e8	 mov	 edx, DWORD PTR _s1$[ebp]
  000d1	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  000d7	0b ca		 or	 ecx, edx
  000d9	d1 e9		 shr	 ecx, 1
  000db	8b 45 f0	 mov	 eax, DWORD PTR _pM$[ebp]
  000de	33 08		 xor	 ecx, DWORD PTR [eax]
  000e0	33 4d a0	 xor	 ecx, DWORD PTR tv95[ebp]
  000e3	8b 55 f8	 mov	 edx, DWORD PTR _p0$[ebp]
  000e6	89 0a		 mov	 DWORD PTR [edx], ecx
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _p0$[ebp]
  000eb	83 c0 04	 add	 eax, 4
  000ee	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax
  000f1	8b 4d f0	 mov	 ecx, DWORD PTR _pM$[ebp]
  000f4	83 c1 04	 add	 ecx, 4
  000f7	89 4d f0	 mov	 DWORD PTR _pM$[ebp], ecx
  000fa	eb 8f		 jmp	 SHORT $LN2@reloadMT
$LN3@reloadMT:

; 101  : 
; 102  : 	for(pM=state, j=M; --j; s0=s1, s1=*p2++)

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	83 c0 04	 add	 eax, 4
  00102	89 45 f0	 mov	 DWORD PTR _pM$[ebp], eax
  00105	c7 45 e4 8d 01
	00 00		 mov	 DWORD PTR _j$[ebp], 397	; 0000018dH
  0010c	eb 17		 jmp	 SHORT $LN7@reloadMT
$LN5@reloadMT:
  0010e	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  00111	89 45 ec	 mov	 DWORD PTR _s0$[ebp], eax
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _p2$[ebp]
  00117	8b 11		 mov	 edx, DWORD PTR [ecx]
  00119	89 55 e8	 mov	 DWORD PTR _s1$[ebp], edx
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _p2$[ebp]
  0011f	83 c0 04	 add	 eax, 4
  00122	89 45 f4	 mov	 DWORD PTR _p2$[ebp], eax
$LN7@reloadMT:
  00125	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  00128	83 e8 01	 sub	 eax, 1
  0012b	89 45 e4	 mov	 DWORD PTR _j$[ebp], eax
  0012e	74 4f		 je	 SHORT $LN6@reloadMT

; 103  : 		*p0++ = *pM++ ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);

  00130	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  00133	83 e0 01	 and	 eax, 1
  00136	74 09		 je	 SHORT $LN12@reloadMT
  00138	c7 45 a0 df b0
	08 99		 mov	 DWORD PTR tv142[ebp], -1727483681 ; 9908b0dfH
  0013f	eb 07		 jmp	 SHORT $LN13@reloadMT
$LN12@reloadMT:
  00141	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN13@reloadMT:
  00148	8b 4d ec	 mov	 ecx, DWORD PTR _s0$[ebp]
  0014b	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00151	8b 55 e8	 mov	 edx, DWORD PTR _s1$[ebp]
  00154	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0015a	0b ca		 or	 ecx, edx
  0015c	d1 e9		 shr	 ecx, 1
  0015e	8b 45 f0	 mov	 eax, DWORD PTR _pM$[ebp]
  00161	33 08		 xor	 ecx, DWORD PTR [eax]
  00163	33 4d a0	 xor	 ecx, DWORD PTR tv142[ebp]
  00166	8b 55 f8	 mov	 edx, DWORD PTR _p0$[ebp]
  00169	89 0a		 mov	 DWORD PTR [edx], ecx
  0016b	8b 45 f8	 mov	 eax, DWORD PTR _p0$[ebp]
  0016e	83 c0 04	 add	 eax, 4
  00171	89 45 f8	 mov	 DWORD PTR _p0$[ebp], eax
  00174	8b 4d f0	 mov	 ecx, DWORD PTR _pM$[ebp]
  00177	83 c1 04	 add	 ecx, 4
  0017a	89 4d f0	 mov	 DWORD PTR _pM$[ebp], ecx
  0017d	eb 8f		 jmp	 SHORT $LN5@reloadMT
$LN6@reloadMT:

; 104  : 
; 105  : 	s1=state[0], *p0 = *pM ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);

  0017f	b8 04 00 00 00	 mov	 eax, 4
  00184	6b c8 00	 imul	 ecx, eax, 0
  00187	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0018a	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0018e	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax
  00191	8b 4d e8	 mov	 ecx, DWORD PTR _s1$[ebp]
  00194	83 e1 01	 and	 ecx, 1
  00197	74 09		 je	 SHORT $LN14@reloadMT
  00199	c7 45 a0 df b0
	08 99		 mov	 DWORD PTR tv154[ebp], -1727483681 ; 9908b0dfH
  001a0	eb 07		 jmp	 SHORT $LN15@reloadMT
$LN14@reloadMT:
  001a2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN15@reloadMT:
  001a9	8b 55 ec	 mov	 edx, DWORD PTR _s0$[ebp]
  001ac	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  001b2	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001b5	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  001ba	0b d0		 or	 edx, eax
  001bc	d1 ea		 shr	 edx, 1
  001be	8b 4d f0	 mov	 ecx, DWORD PTR _pM$[ebp]
  001c1	33 11		 xor	 edx, DWORD PTR [ecx]
  001c3	33 55 a0	 xor	 edx, DWORD PTR tv154[ebp]
  001c6	8b 45 f8	 mov	 eax, DWORD PTR _p0$[ebp]
  001c9	89 10		 mov	 DWORD PTR [eax], edx

; 106  : 	s1 ^= (s1 >> 11);

  001cb	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001ce	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  001d1	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  001d4	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 107  : 	s1 ^= (s1 <<  7) & 0x9D2C5680U;

  001d7	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001da	c1 e0 07	 shl	 eax, 7
  001dd	25 80 56 2c 9d	 and	 eax, -1658038656	; 9d2c5680H
  001e2	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  001e5	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 108  : 	s1 ^= (s1 << 15) & 0xEFC60000U;

  001e8	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001eb	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  001ee	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  001f3	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]
  001f6	89 45 e8	 mov	 DWORD PTR _s1$[ebp], eax

; 109  : 
; 110  : 	return(s1 ^ (s1 >> 18));

  001f9	8b 45 e8	 mov	 eax, DWORD PTR _s1$[ebp]
  001fc	c1 e8 12	 shr	 eax, 18			; 00000012H
  001ff	33 45 e8	 xor	 eax, DWORD PTR _s1$[ebp]

; 111  : }

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
?reloadMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::reloadMT
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ?seedMT@CLargeRand@@QAEXK@Z
_TEXT	SEGMENT
_j$ = -16						; size = 4
_s$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
_seed$ = 8						; size = 4
?seedMT@CLargeRand@@QAEXK@Z PROC			; CLargeRand::seedMT, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	//
; 36   : 	// We initialize state[0..(N-1)] via the generator
; 37   : 	//
; 38   : 	//   x_new = (69069 * x_old) mod 2^32
; 39   : 	//
; 40   : 	// from Line 15 of Table 1, p. 106, Sec. 3.3.4 of Knuth's
; 41   : 	// _The Art of Computer Programming_, Volume 2, 3rd ed.
; 42   : 	//
; 43   : 	// Notes (SJC): I do not know what the initial state requirements
; 44   : 	// of the Mersenne Twister are, but it seems this seeding generator
; 45   : 	// could be better.  It achieves the maximum period for its modulus
; 46   : 	// (2^30) iff x_initial is odd (p. 20-21, Sec. 3.2.1.2, Knuth); if
; 47   : 	// x_initial can be even, you have sequences like 0, 0, 0, ...;
; 48   : 	// 2^31, 2^31, 2^31, ...; 2^30, 2^30, 2^30, ...; 2^29, 2^29 + 2^31,
; 49   : 	// 2^29, 2^29 + 2^31, ..., etc. so I force seed to be odd below.
; 50   : 	//
; 51   : 	// Even if x_initial is odd, if x_initial is 1 mod 4 then
; 52   : 	//
; 53   : 	//   the          lowest bit of x is always 1,
; 54   : 	//   the  next-to-lowest bit of x is always 0,
; 55   : 	//   the 2nd-from-lowest bit of x alternates      ... 0 1 0 1 0 1 0 1 ... ,
; 56   : 	//   the 3rd-from-lowest bit of x 4-cycles        ... 0 1 1 0 0 1 1 0 ... ,
; 57   : 	//   the 4th-from-lowest bit of x has the 8-cycle ... 0 0 0 1 1 1 1 0 ... ,
; 58   : 	//    ...
; 59   : 	//
; 60   : 	// and if x_initial is 3 mod 4 then
; 61   : 	//
; 62   : 	//   the          lowest bit of x is always 1,
; 63   : 	//   the  next-to-lowest bit of x is always 1,
; 64   : 	//   the 2nd-from-lowest bit of x alternates      ... 0 1 0 1 0 1 0 1 ... ,
; 65   : 	//   the 3rd-from-lowest bit of x 4-cycles        ... 0 0 1 1 0 0 1 1 ... ,
; 66   : 	//   the 4th-from-lowest bit of x has the 8-cycle ... 0 0 1 1 1 1 0 0 ... ,
; 67   : 	//    ...
; 68   : 	//
; 69   : 	// The generator's potency (min. s>=0 with (69069-1)^s = 0 mod 2^32) is
; 70   : 	// 16, which seems to be alright by p. 25, Sec. 3.2.1.3 of Knuth.  It
; 71   : 	// also does well in the dimension 2..5 spectral tests, but it could be
; 72   : 	// better in dimension 6 (Line 15, Table 1, p. 106, Sec. 3.3.4, Knuth).
; 73   : 	//
; 74   : 	// Note that the random number user does not see the values generated
; 75   : 	// here directly since reloadMT() will always munge them first, so maybe
; 76   : 	// none of all of this matters.  In fact, the seed values made here could
; 77   : 	// even be extra-special desirable if the Mersenne Twister theory says
; 78   : 	// so-- that's why the only change I made is to restrict to odd seeds.
; 79   : 	//
; 80   : 
; 81   : 	register uint32 x = (seed | 1U) & 0xFFFFFFFFU, *s = state;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  0000f	83 c8 01	 or	 eax, 1
  00012	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 82   : 	register int    j;
; 83   : 
; 84   : 	for(left=0, *s++=x, j=N; --j;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 80 cc 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2508], 0
  0002b	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  0002e	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00031	89 11		 mov	 DWORD PTR [ecx], edx
  00033	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
  0003c	c7 45 f0 70 02
	00 00		 mov	 DWORD PTR _j$[ebp], 624	; 00000270H
  00043	eb 1b		 jmp	 SHORT $LN4@seedMT
$LN2@seedMT:

; 85   : 		*s++ = (x*=69069U) & 0xFFFFFFFFU);

  00045	69 45 f8 cd 0d
	01 00		 imul	 eax, DWORD PTR _x$[ebp], 69069
  0004c	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  00052	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00055	89 11		 mov	 DWORD PTR [ecx], edx
  00057	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  0005a	83 c0 04	 add	 eax, 4
  0005d	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax
$LN4@seedMT:

; 82   : 	register int    j;
; 83   : 
; 84   : 	for(left=0, *s++=x, j=N; --j;

  00060	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
  00069	74 02		 je	 SHORT $LN1@seedMT

; 85   : 		*s++ = (x*=69069U) & 0xFFFFFFFFU);

  0006b	eb d8		 jmp	 SHORT $LN2@seedMT
$LN1@seedMT:

; 86   : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?seedMT@CLargeRand@@QAEXK@Z ENDP			; CLargeRand::seedMT
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ??1CLargeRand@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLargeRand@@UAE@XZ PROC				; CLargeRand::~CLargeRand, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLargeRand@@6B@

; 26   : 
; 27   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CLargeRand@@UAE@XZ ENDP				; CLargeRand::~CLargeRand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ??0CLargeRand@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLargeRand@@QAE@XZ PROC				; CLargeRand::CLargeRand, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLargeRand@@6B@

; 21   : 	left = -1;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 80 cc 09 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+2508], -1

; 22   : }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??0CLargeRand@@QAE@XZ ENDP				; CLargeRand::CLargeRand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\LargeRand.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
