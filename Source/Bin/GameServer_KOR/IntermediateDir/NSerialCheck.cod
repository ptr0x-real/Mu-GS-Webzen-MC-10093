; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0NSerialCheck@@QAE@XZ				; NSerialCheck::NSerialCheck
PUBLIC	??1NSerialCheck@@UAE@XZ				; NSerialCheck::~NSerialCheck
PUBLIC	?init@NSerialCheck@@QAEXXZ			; NSerialCheck::init
PUBLIC	?InCheck@NSerialCheck@@QAEHE@Z			; NSerialCheck::InCheck
PUBLIC	?GetSerial@NSerialCheck@@QAEHXZ			; NSerialCheck::GetSerial
PUBLIC	?GetSendSerial@NSerialCheck@@QAEEXZ		; NSerialCheck::GetSendSerial
PUBLIC	??_GNSerialCheck@@UAEPAXI@Z			; NSerialCheck::`scalar deleting destructor'
PUBLIC	??_7NSerialCheck@@6B@				; NSerialCheck::`vftable'
PUBLIC	??_R4NSerialCheck@@6B@				; NSerialCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNSerialCheck@@@8			; NSerialCheck `RTTI Type Descriptor'
PUBLIC	??_R3NSerialCheck@@8				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NSerialCheck@@8				; NSerialCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NSerialCheck@@8			; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_ENSerialCheck@@UAEPAXI@Z:PROC		; NSerialCheck::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@NSerialCheck@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NSerialCheck@@8 DD FLAT:??_R0?AVNSerialCheck@@@8 ; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2NSerialCheck@@8
rdata$r	SEGMENT
??_R2NSerialCheck@@8 DD FLAT:??_R1A@?0A@EA@NSerialCheck@@8 ; NSerialCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NSerialCheck@@8
rdata$r	SEGMENT
??_R3NSerialCheck@@8 DD 00H				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNSerialCheck@@@8
data$r	SEGMENT
??_R0?AVNSerialCheck@@@8 DD FLAT:??_7type_info@@6B@	; NSerialCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNSerialCheck@@', 00H
data$r	ENDS
;	COMDAT ??_R4NSerialCheck@@6B@
rdata$r	SEGMENT
??_R4NSerialCheck@@6B@ DD 00H				; NSerialCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNSerialCheck@@@8
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_7NSerialCheck@@6B@
CONST	SEGMENT
??_7NSerialCheck@@6B@ DD FLAT:??_R4NSerialCheck@@6B@	; NSerialCheck::`vftable'
	DD	FLAT:??_ENSerialCheck@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GNSerialCheck@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNSerialCheck@@UAEPAXI@Z PROC			; NSerialCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1NSerialCheck@@UAE@XZ	; NSerialCheck::~NSerialCheck
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GNSerialCheck@@UAEPAXI@Z ENDP			; NSerialCheck::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?GetSendSerial@NSerialCheck@@QAEEXZ
_TEXT	SEGMENT
tv68 = -69						; size = 1
_this$ = -4						; size = 4
?GetSendSerial@NSerialCheck@@QAEEXZ PROC		; NSerialCheck::GetSendSerial, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 	return m_SendSeiral++;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00012	88 4d bb	 mov	 BYTE PTR tv68[ebp], cl
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  0001b	04 01		 add	 al, 1
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	88 41 05	 mov	 BYTE PTR [ecx+5], al
  00023	8a 45 bb	 mov	 al, BYTE PTR tv68[ebp]

; 57   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?GetSendSerial@NSerialCheck@@QAEEXZ ENDP		; NSerialCheck::GetSendSerial
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?GetSerial@NSerialCheck@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSerial@NSerialCheck@@QAEHXZ PROC			; NSerialCheck::GetSerial, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	return m_serial;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 52   : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetSerial@NSerialCheck@@QAEHXZ ENDP			; NSerialCheck::GetSerial
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?InCheck@NSerialCheck@@QAEHE@Z
_TEXT	SEGMENT
_m_s$ = -5						; size = 1
_this$ = -4						; size = 4
_serial$ = 8						; size = 1
?InCheck@NSerialCheck@@QAEHE@Z PROC			; NSerialCheck::InCheck, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	BYTE m_s=m_serial;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00012	88 4d fb	 mov	 BYTE PTR _m_s$[ebp], cl

; 37   : 
; 38   : 	m_s++;

  00015	8a 45 fb	 mov	 al, BYTE PTR _m_s$[ebp]
  00018	04 01		 add	 al, 1
  0001a	88 45 fb	 mov	 BYTE PTR _m_s$[ebp], al

; 39   : 
; 40   : 	// 보내온 시리얼이 이전 시리얼보다 1 크면 진짜 데이터, 아니면 가짜 데이터 이다.
; 41   : 	if( m_s == serial )

  0001d	0f b6 45 fb	 movzx	 eax, BYTE PTR _m_s$[ebp]
  00021	0f b6 4d 08	 movzx	 ecx, BYTE PTR _serial$[ebp]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 10		 jne	 SHORT $LN2@InCheck

; 42   : 	{
; 43   : 		m_serial = serial;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8a 4d 08	 mov	 cl, BYTE PTR _serial$[ebp]
  0002f	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 44   : 		return TRUE;

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	eb 02		 jmp	 SHORT $LN1@InCheck
$LN2@InCheck:

; 45   : 	}
; 46   : 	return FALSE;

  00039	33 c0		 xor	 eax, eax
$LN1@InCheck:

; 47   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?InCheck@NSerialCheck@@QAEHE@Z ENDP			; NSerialCheck::InCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?init@NSerialCheck@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@NSerialCheck@@QAEXXZ PROC				; NSerialCheck::init, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	m_serial = 255;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH

; 29   : 	m_SendSeiral = 0;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0

; 30   : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?init@NSerialCheck@@QAEXXZ ENDP				; NSerialCheck::init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ??1NSerialCheck@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NSerialCheck@@UAE@XZ PROC				; NSerialCheck::~NSerialCheck, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NSerialCheck@@6B@

; 23   : 
; 24   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1NSerialCheck@@UAE@XZ ENDP				; NSerialCheck::~NSerialCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ??0NSerialCheck@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NSerialCheck@@QAE@XZ PROC				; NSerialCheck::NSerialCheck, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NSerialCheck@@6B@

; 18   : 	init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?init@NSerialCheck@@QAEXXZ ; NSerialCheck::init

; 19   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0NSerialCheck@@QAE@XZ ENDP				; NSerialCheck::NSerialCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\NSerialCheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
