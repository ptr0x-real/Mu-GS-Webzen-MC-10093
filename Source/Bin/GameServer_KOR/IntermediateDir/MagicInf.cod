; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CMagicInf@@QAE@XZ				; CMagicInf::CMagicInf
PUBLIC	??1CMagicInf@@UAE@XZ				; CMagicInf::~CMagicInf
PUBLIC	?IsMagic@CMagicInf@@QAEHXZ			; CMagicInf::IsMagic
PUBLIC	?Clear@CMagicInf@@QAEXXZ			; CMagicInf::Clear
PUBLIC	?Set@CMagicInf@@QAEHEEE@Z			; CMagicInf::Set
PUBLIC	?Set@CMagicInf@@QAEHEE@Z			; CMagicInf::Set
PUBLIC	?GetDamage@CMagicInf@@QAEHXZ			; CMagicInf::GetDamage
PUBLIC	??_GCMagicInf@@UAEPAXI@Z			; CMagicInf::`scalar deleting destructor'
PUBLIC	?GetSkillNumberInex@@YAHHHH@Z			; GetSkillNumberInex
PUBLIC	?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z	; MagicByteConvert
PUBLIC	??_7CMagicInf@@6B@				; CMagicInf::`vftable'
PUBLIC	?DefMagicInf@@3PAVCMagicInf@@A			; DefMagicInf
PUBLIC	?__LINE__Var@?0??Set@CMagicInf@@QAEHEEE@Z@4JA	; `CMagicInf::Set'::`1'::__LINE__Var
PUBLIC	??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@ ; `string'
PUBLIC	?__LINE__Var@?0??GetDamage@CMagicInf@@QAEHXZ@4JA ; `CMagicInf::GetDamage'::`1'::__LINE__Var
PUBLIC	??_R4CMagicInf@@6B@				; CMagicInf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicInf@@@8				; CMagicInf `RTTI Type Descriptor'
PUBLIC	??_R3CMagicInf@@8				; CMagicInf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicInf@@8				; CMagicInf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicInf@@8			; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	__imp_?Get@CMsg@@QAEPADH@Z:PROC
EXTRN	??_ECMagicInf@@UAEPAXI@Z:PROC			; CMagicInf::`vector deleting destructor'
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	__except_handler4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?DefMagicInf@@3PAVCMagicInf@@A DB 0ff0H DUP (?)		; DefMagicInf
_BSS	ENDS
CRT$XCU	SEGMENT
?DefMagicInf$initializer$@@3P6AXXZA DD FLAT:??__EDefMagicInf@@YAXXZ ; DefMagicInf$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMagicInf@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicInf@@8 DD FLAT:??_R0?AVCMagicInf@@@8 ; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicInf@@8
rdata$r	SEGMENT
??_R2CMagicInf@@8 DD FLAT:??_R1A@?0A@EA@CMagicInf@@8	; CMagicInf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicInf@@8
rdata$r	SEGMENT
??_R3CMagicInf@@8 DD 00H				; CMagicInf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicInf@@@8
data$r	SEGMENT
??_R0?AVCMagicInf@@@8 DD FLAT:??_7type_info@@6B@	; CMagicInf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicInf@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMagicInf@@6B@
rdata$r	SEGMENT
??_R4CMagicInf@@6B@ DD 00H				; CMagicInf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicInf@@@8
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??GetDamage@CMagicInf@@QAEHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetDamage@CMagicInf@@QAEHXZ@4JA DD 0f4H ; `CMagicInf::GetDamage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
CONST	SEGMENT
??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@ DB 'C:\Mu Onl'
	DB	'ine\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Set@CMagicInf@@QAEHEEE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Set@CMagicInf@@QAEHEEE@Z@4JA DD 0d7H	; `CMagicInf::Set'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CMagicInf@@6B@
CONST	SEGMENT
??_7CMagicInf@@6B@ DD FLAT:??_R4CMagicInf@@6B@		; CMagicInf::`vftable'
	DD	FLAT:??_ECMagicInf@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetDamage@CMagicInf@@QAEHXZ DD 0fffffffeH
	DD	00H
	DD	0ffffff8cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN12@GetDamage
	DD	FLAT:$LN7@GetDamage
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FDefMagicInf@@YAXXZ
text$yd	SEGMENT
??__FDefMagicInf@@YAXXZ PROC				; `dynamic atexit destructor for 'DefMagicInf'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  0000e	68 ff 00 00 00	 push	 255			; 000000ffH
  00013	6a 10		 push	 16			; 00000010H
  00015	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  0001a	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??__FDefMagicInf@@YAXXZ ENDP				; `dynamic atexit destructor for 'DefMagicInf''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ??__EDefMagicInf@@YAXXZ
text$di	SEGMENT
??__EDefMagicInf@@YAXXZ PROC				; `dynamic initializer for 'DefMagicInf'', COMDAT

; 16   : CMagicInf	DefMagicInf[MAX_MAGICINF];

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  0000e	68 00 00 00 00	 push	 OFFSET ??0CMagicInf@@QAE@XZ ; CMagicInf::CMagicInf
  00013	68 ff 00 00 00	 push	 255			; 000000ffH
  00018	6a 10		 push	 16			; 00000010H
  0001a	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  0001f	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00024	68 00 00 00 00	 push	 OFFSET ??__FDefMagicInf@@YAXXZ ; `dynamic atexit destructor for 'DefMagicInf''
  00029	e8 00 00 00 00	 call	 _atexit
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??__EDefMagicInf@@YAXXZ ENDP				; `dynamic initializer for 'DefMagicInf''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_n$ = -4						; size = 4
_buf$ = 8						; size = 4
_Magici$ = 12						; size = 4
_maxmagic$ = 16						; size = 4
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z PROC		; MagicByteConvert, COMDAT

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 317  : 	int n=0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 318  : 
; 319  : #ifdef MASTER_LEVEL_SKILL_SYSTEM_20071122	// DB에 마법정보 저장하기
; 320  : 	// DB에 마법정보를 저장할 때 3BYTE가 하나의 스킬이 된다.
; 321  : 	// 첫 번째 BYTE : 스킬 번호
; 322  : 	// 두 번째 BYTE : 5bit : 스킬 레벨(32까지 가능)
; 323  : 	//				  3bit : 스킬번호가 1BYTE 단위를 넘을 때 마다 여기에 초과된 BYTE 단위를 설정한다.
; 324  : 	//						세 번째 BYTE와 계산해서 최종 스킬번호를 얻을 수 있다.(iExpendSkillCount)
; 325  : 	// 세 번째 BYTE : 255번을 넘는 번호는 쪼개서 여기에 넣는다.(iExpendSkillNumber)
; 326  : 	// -> DB확장이나 변환없이 스킬 추가 가능. ( 255 * 8 )
; 327  : 
; 328  : 	int iExpendSkillCount;
; 329  : 	int iExpendSkillNumber;
; 330  : 	int iExpendSkillExtraNumber;
; 331  : 	for( int index=0; index < maxmagic; index++ )
; 332  : 	{
; 333  : 		// 초기화
; 334  : 		iExpendSkillNumber = Magici[index].m_Skill;
; 335  : 
; 336  : 		iExpendSkillCount = 0;		
; 337  : 		iExpendSkillExtraNumber = 0;
; 338  : 
; 339  : 		// 스킬번호 변환	: 255(0xFF)는 스킬 아이템이 없는 것으로 사용된다.
; 340  : #ifdef ADD_MASTER_LEVEL_SKILL_SYSTEM_ACTIVE_20080107	// 스킬 저장 방식(DB) 추가&변경
; 341  : 		if( Magici[index].m_Skill > 255 * 3 )
; 342  : 		{
; 343  : 			iExpendSkillNumber	= 255;
; 344  : 			iExpendSkillCount	= 3;
; 345  : 			iExpendSkillExtraNumber = Magici[index].m_Skill - ( iExpendSkillNumber * 3 );
; 346  : 		}
; 347  : 		else if( Magici[index].m_Skill > 255 * 2 )
; 348  : 		{
; 349  : 			iExpendSkillNumber	= 255;
; 350  : 			iExpendSkillCount	= 2;
; 351  : 			iExpendSkillExtraNumber = Magici[index].m_Skill - ( iExpendSkillNumber * 2 );
; 352  : 		}
; 353  : 		else
; 354  : #endif		
; 355  : 		if( Magici[index].m_Skill > 255 )
; 356  : 		{
; 357  : 			iExpendSkillNumber	= 255;
; 358  : 			iExpendSkillCount	= 1;
; 359  : 			iExpendSkillExtraNumber = Magici[index].m_Skill - iExpendSkillNumber;
; 360  : 		}
; 361  : 
; 362  : 		buf[n]  = (BYTE)iExpendSkillNumber;
; 363  : 		n++;
; 364  : 		buf[n]  = Magici[index].m_Level<<3;			// Level	  : 5bit
; 365  : 		buf[n] |= iExpendSkillCount&0x07;			// iExpendSkillCount : 3bit
; 366  : 		n++;
; 367  : 		buf[n] = iExpendSkillExtraNumber;									
; 368  : 		n++;
; 369  : 	}
; 370  : #else
; 371  : 	// type , index, Level, Dur, Special 
; 372  : 	//   4  ,   4  ,   5,   3,    8
; 373  : 	for( int index=0; index<maxmagic; index++)

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _index$1[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@MagicByteC
$LN2@MagicByteC:
  00019	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 f8	 mov	 DWORD PTR _index$1[ebp], eax
$LN4@MagicByteC:
  00022	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  00025	3b 45 10	 cmp	 eax, DWORD PTR _maxmagic$[ebp]
  00028	7d 54		 jge	 SHORT $LN1@MagicByteC

; 374  : 	{
; 375  : 		buf[n]  = (BYTE)Magici[index].m_Skill;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  0002d	c1 e0 04	 shl	 eax, 4
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00033	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  00036	8b 55 0c	 mov	 edx, DWORD PTR _Magici$[ebp]
  00039	8a 44 02 05	 mov	 al, BYTE PTR [edx+eax+5]
  0003d	88 01		 mov	 BYTE PTR [ecx], al

; 376  : 		n++;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 377  : 		buf[n]  = Magici[index].m_Level<<3;			// Level	  : 5bit

  00048	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _Magici$[ebp]
  00051	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  00056	c1 e2 03	 shl	 edx, 3
  00059	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0005c	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  0005f	88 10		 mov	 BYTE PTR [eax], dl

; 378  : 		//buf[n] |= Magici[index].&0x07;	// Durability : 3bit
; 379  : 		n++;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 380  : 		buf[n] = 0;									// special    : 8bit

  0006a	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0006d	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00070	c6 00 00	 mov	 BYTE PTR [eax], 0

; 381  : 		n++;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 382  : 	}

  0007c	eb 9b		 jmp	 SHORT $LN2@MagicByteC
$LN1@MagicByteC:

; 383  : #endif	// MASTER_LEVEL_SKILL_SYSTEM_20071122
; 384  : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z ENDP		; MagicByteConvert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?GetSkillNumberInex@@YAHHHH@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
_skillnumber$ = -4					; size = 4
_type$ = 8						; size = 4
_Index$ = 12						; size = 4
_level$ = 16						; size = 4
?GetSkillNumberInex@@YAHHHH@Z PROC			; GetSkillNumberInex, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 54   : 	int skillnumber=-1;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _skillnumber$[ebp], -1

; 55   : 
; 56   : 	if( type == 15 )	// 법서

  00010	83 7d 08 0f	 cmp	 DWORD PTR _type$[ebp], 15 ; 0000000fH
  00014	75 47		 jne	 SHORT $LN4@GetSkillNu

; 57   : 	{
; 58   : 		if( Index >= 0 && Index < 16 )

  00016	83 7d 0c 00	 cmp	 DWORD PTR _Index$[ebp], 0
  0001a	7c 11		 jl	 SHORT $LN6@GetSkillNu
  0001c	83 7d 0c 10	 cmp	 DWORD PTR _Index$[ebp], 16 ; 00000010H
  00020	7d 0b		 jge	 SHORT $LN6@GetSkillNu

; 59   : 		{	// 법서는 스킬인덱스를 따라간다
; 60   : 			skillnumber = AT_SKILL_POISON+Index;

  00022	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _skillnumber$[ebp], eax

; 61   : 		}

  0002b	eb 2b		 jmp	 SHORT $LN7@GetSkillNu
$LN6@GetSkillNu:

; 62   : #ifdef ADD_SKILL_WITH_COMBO
; 63   : 		else
; 64   : 		{
; 65   : 			if( Index == 16 )

  0002d	83 7d 0c 10	 cmp	 DWORD PTR _Index$[ebp], 16 ; 00000010H
  00031	75 09		 jne	 SHORT $LN8@GetSkillNu

; 66   : 			{
; 67   : 				skillnumber = AT_SKILL_EXPPOISON;

  00033	c7 45 fc 26 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 38 ; 00000026H

; 68   : 			}

  0003a	eb 1c		 jmp	 SHORT $LN7@GetSkillNu
$LN8@GetSkillNu:

; 69   : 			else if( Index == 17 )

  0003c	83 7d 0c 11	 cmp	 DWORD PTR _Index$[ebp], 17 ; 00000011H
  00040	75 09		 jne	 SHORT $LN10@GetSkillNu

; 70   : 			{
; 71   : 				skillnumber = AT_SKILL_EXPICE;

  00042	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 39 ; 00000027H

; 72   : 			}

  00049	eb 0d		 jmp	 SHORT $LN7@GetSkillNu
$LN10@GetSkillNu:

; 73   : 			else if( Index == 18 )

  0004b	83 7d 0c 12	 cmp	 DWORD PTR _Index$[ebp], 18 ; 00000012H
  0004f	75 07		 jne	 SHORT $LN7@GetSkillNu

; 74   : 			{
; 75   : 				skillnumber = AT_SKILL_EXPHELL;

  00051	c7 45 fc 28 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 40 ; 00000028H
$LN7@GetSkillNu:

; 76   : 			}
; 77   : #ifdef ADD_SEASON_3_NEW_CHARACTER_SUMMONER_20070912	// 양피지 스킬 추가
; 78   : 			else if( Index == 19 )
; 79   : 			{
; 80   : 				skillnumber = AT_SKILL_CHAINLIGHTNING;
; 81   : 			}
; 82   : 			else if( Index == 20)
; 83   : 			{
; 84   : 				skillnumber = AT_SKILL_DRAINLIFE;
; 85   : 			}
; 86   : #ifdef SEASON4_PATCH_GROOVING
; 87   : 			// --->
; 88   : 			// 시즌 4.0 추가 스킬  grooving 2008/04/24 : 라이트닝 쇼크
; 89   : 			// 기존 라이트닝오브 에서 라이트닝 쇼크로 변경
; 90   : 			else if( Index == 21 )
; 91   : 			{
; 92   : 				skillnumber = AT_SKILL_LIGHTING_SHOCK;
; 93   : 			}
; 94   : 			// <---			
; 95   : #else
; 96   : 			else if( Index == 21 )
; 97   : 			{
; 98   : 				skillnumber = AT_SKILL_LIGHTNINGORB;
; 99   : 			}
; 100  : #endif
; 101  : 
; 102  : 			else if( Index == 22 )
; 103  : 			{
; 104  : 				skillnumber = AT_SKILL_THORNS;
; 105  : 			}
; 106  : #ifdef SEASON4_PATCH_GROOVING
; 107  : 			// --->
; 108  : 			// 시즌 4.0 추가 스킬  grooving 2008/04/24 : 버서커
; 109  : 			else if( Index == 23 )
; 110  : 			{
; 111  : 				skillnumber = AT_SKILL_BERSERKER;
; 112  : 			}
; 113  : 			// <---
; 114  : #endif
; 115  : 			//else if( Index == 23 )
; 116  : 			//{
; 117  : 				//skillnumber = AT_SKILL_EXPHELL;
; 118  : 			//}
; 119  : 			else if( Index == 24 )
; 120  : 			{
; 121  : 				skillnumber = AT_SKILL_SLEEP;
; 122  : 			}
; 123  : 			else if( Index == 25 )
; 124  : 			{
; 125  : 				skillnumber = AT_SKILL_BLIND;
; 126  : 			}
; 127  : 			//else if( Index == 26 )
; 128  : 			//{
; 129  : 			//	skillnumber = AT_SKILL_EXPHELL;
; 130  : 			//}
; 131  : 			//else if( Index == 27 )
; 132  : 			//{
; 133  : 			//	skillnumber = AT_SKILL_EXPHELL;
; 134  : 			//}
; 135  : #endif	// ADD_SEASON_3_NEW_CHARACTER_SUMMONER_20070912	
; 136  : 			
; 137  : #ifdef UPDATE_SUMMONER_NEW_SKILL_20080111	// 위크니스 이너베이션양피지 사용
; 138  : 			else if( Index == 26 )
; 139  : 			{
; 140  : 				skillnumber = AT_SKILL_WEAKNESS;
; 141  : 			}
; 142  : 			else if( Index == 27 )
; 143  : 			{
; 144  : 				skillnumber = AT_SKILL_ENERVATION;
; 145  : 			}
; 146  : #endif	// UPDATE_SUMMONER_NEW_SKILL_20080111
; 147  : 			
; 148  : #ifdef ADD_SEASON4_NEW_SKILL_20080522		// 신규스킬아이템에 대한 스킬 번호(index = 15)
; 149  : 			else if( Index == 28 )	skillnumber = AT_SKILL_MAGICPOWRER;		// 마력 증대
; 150  : 			else if( Index == 29 )	skillnumber = AT_SKILL_GIGANTICSTORM;	// 기간틱 스톰
; 151  : #endif	// ADD_SEASON4_NEW_SKILL_20080522
; 152  : 		}
; 153  : #endif
; 154  : 	}

  00058	e9 c0 00 00 00	 jmp	 $LN5@GetSkillNu
$LN4@GetSkillNu:

; 155  : 	else if( type == 12 )

  0005d	83 7d 08 0c	 cmp	 DWORD PTR _type$[ebp], 12 ; 0000000cH
  00061	0f 85 b6 00 00
	00		 jne	 $LN5@GetSkillNu

; 156  : 	{
; 157  : 		switch( Index )

  00067	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  0006a	89 45 b8	 mov	 DWORD PTR tv72[ebp], eax
  0006d	8b 4d b8	 mov	 ecx, DWORD PTR tv72[ebp]
  00070	83 e9 07	 sub	 ecx, 7
  00073	89 4d b8	 mov	 DWORD PTR tv72[ebp], ecx
  00076	83 7d b8 11	 cmp	 DWORD PTR tv72[ebp], 17	; 00000011H
  0007a	0f 87 9d 00 00
	00		 ja	 $LN5@GetSkillNu
  00080	8b 55 b8	 mov	 edx, DWORD PTR tv72[ebp]
  00083	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN31@GetSkillNu[edx*4]
$LN14@GetSkillNu:

; 158  : 		{
; 159  : 		case 7  :   skillnumber = AT_SKILL_WHEEL;   break;			// 회오리베기

  0008a	c7 45 fc 29 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 41 ; 00000029H
  00091	e9 87 00 00 00	 jmp	 $LN5@GetSkillNu
$LN15@GetSkillNu:

; 160  : 		case 8  :	skillnumber = AT_SKILL_HEALING; break;			// 치료

  00096	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 26 ; 0000001aH
  0009d	eb 7e		 jmp	 SHORT $LN5@GetSkillNu
$LN16@GetSkillNu:

; 161  : 		case 9  :	skillnumber = AT_SKILL_DEFENSE; break;			// 방어력향상

  0009f	c7 45 fc 1b 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 27 ; 0000001bH
  000a6	eb 75		 jmp	 SHORT $LN5@GetSkillNu
$LN17@GetSkillNu:

; 162  : 		case 10 :	skillnumber = AT_SKILL_ATTACK;  break;			// 공격력향상

  000a8	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 28 ; 0000001cH
  000af	eb 6c		 jmp	 SHORT $LN5@GetSkillNu
$LN18@GetSkillNu:

; 163  : 
; 164  : #ifdef NEW_SKILL_FORSKYLAND
; 165  : 		// 기사 새로운 스킬		
; 166  : 		case 12 :   skillnumber = AT_SKILL_BLOWOFFURY;  break;		// 분노의일격

  000b1	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 42 ; 0000002aH
  000b8	eb 63		 jmp	 SHORT $LN5@GetSkillNu
$LN19@GetSkillNu:

; 167  : 		case 13 :	skillnumber = AT_SKILL_KNIGHTSPEAR;  break;		// 유니창

  000ba	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 47 ; 0000002fH
  000c1	eb 5a		 jmp	 SHORT $LN5@GetSkillNu
$LN20@GetSkillNu:

; 168  : 		case 14 :	skillnumber = AT_SKILL_KNIGHTADDLIFE;  break;	// 생명증가	

  000c3	c7 45 fc 30 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 48 ; 00000030H
  000ca	eb 51		 jmp	 SHORT $LN5@GetSkillNu
$LN21@GetSkillNu:

; 169  : 		case 19 :	skillnumber = AT_SKILL_STRIKE;  break;			// 일대일(스트라이크)

  000cc	c7 45 fc 2b 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 43 ; 0000002bH
  000d3	eb 48		 jmp	 SHORT $LN5@GetSkillNu
$LN22@GetSkillNu:

; 170  : 		//case 16 :	skillnumber = AT_SKILL_SWORDAURORA;  break;
; 171  : 
; 172  : 		// 요정 새로운 스킬
; 173  : 		case 17 :	skillnumber = AT_SKILL_PENETRATION;  break;		// 관통

  000d5	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 52 ; 00000034H
  000dc	eb 3f		 jmp	 SHORT $LN5@GetSkillNu
$LN23@GetSkillNu:

; 174  : 		case 18 :	skillnumber = AT_SKILL_ELFHARDEN;  break;		// 석화		

  000de	c7 45 fc 33 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 51 ; 00000033H
  000e5	eb 36		 jmp	 SHORT $LN5@GetSkillNu
$LN24@GetSkillNu:

; 175  : 
; 176  : 		// 마검사 새로운 스킬
; 177  : 		case 16 :	skillnumber = AT_SKILL_DEFENSEDOWN;  break;		// 벙어감소

  000e7	c7 45 fc 37 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 55 ; 00000037H
  000ee	eb 2d		 jmp	 SHORT $LN5@GetSkillNu
$LN25@GetSkillNu:

; 178  : #endif
; 179  : 			
; 180  : #ifdef DARKLORD_WORK
; 181  : 		//case 20 :	skillnumber = AT_SKILL_IMPROVE_AG_REFILL;  break;	
; 182  : 		case 21 :	skillnumber = AT_SKILL_FIREBURST;  break;				// 파이어버스트

  000f0	c7 45 fc 3d 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 61 ; 0000003dH
  000f7	eb 24		 jmp	 SHORT $LN5@GetSkillNu
$LN26@GetSkillNu:

; 183  : 		case 22 :	skillnumber = AT_SKILL_RECALL_PARTY;  break;			// 파티소환

  000f9	c7 45 fc 3f 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 63 ; 0000003fH
  00100	eb 1b		 jmp	 SHORT $LN5@GetSkillNu
$LN27@GetSkillNu:

; 184  : 		case 23 :	skillnumber = AT_SKILL_ADD_CRITICALDAMAGE;  break;		// 크리티컬 데미지 증가

  00102	c7 45 fc 40 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 64 ; 00000040H
  00109	eb 12		 jmp	 SHORT $LN5@GetSkillNu
$LN28@GetSkillNu:

; 185  : 		case 24 :	skillnumber = AT_SKILL_ELECTRICSPARK;  break;			// 일렉트릭 스파크

  0010b	c7 45 fc 41 00
	00 00		 mov	 DWORD PTR _skillnumber$[ebp], 65 ; 00000041H
  00112	eb 09		 jmp	 SHORT $LN5@GetSkillNu
$LN29@GetSkillNu:

; 186  : #endif
; 187  : 
; 188  : //#ifdef ADD_SKILL_WITH_COMBO
; 189  : //		case 20 :	skillnumber = AT_SKILL_4CROSSBOW;  break;		// 벙어감소
; 190  : //#endif	
; 191  : 		case 11 : 
; 192  : 					skillnumber = AT_SKILL_CALLMON1+level;			// 요정 소환

  00114	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  00117	83 c0 1e	 add	 eax, 30			; 0000001eH
  0011a	89 45 fc	 mov	 DWORD PTR _skillnumber$[ebp], eax
$LN5@GetSkillNu:

; 193  : 			break;
; 194  : 				 
; 195  : #ifdef ADD_SKILL_DARKLOAD_FIRESCREAM_20060601	// 파이어 스크림 스크롤 번호 리턴
; 196  : 		case 35:
; 197  : 			skillnumber = AT_SKILL_FIRESCREAM;		
; 198  : 			break;
; 199  : #endif
; 200  : 
; 201  : #ifdef ADD_SEASON4_NEW_SKILL_20080522		// 신규스킬아이템에 대한 스킬 번호(index = 12)
; 202  : 		case 44:	skillnumber = AT_SKILL_DESTRUCTION;		break;	// 파괴의 일격
; 203  : 		case 45:	skillnumber = AT_SKILL_MULTISHOT;		break;	// 멀티샷
; 204  : 		case 46:	skillnumber = AT_SKILL_RECOVERY;		break;	// 회복
; 205  : 		case 47:	skillnumber = AT_SKILL_FLAMESTRIKE;		break;	// 플레임 스트라이크
; 206  : 		case 48:	skillnumber = AT_SKILL_CHAOTICDESAIR;	break;	// 카오틱 디세이
; 207  : #endif	// ADD_SEASON4_NEW_SKILL_20080522
; 208  : 		}
; 209  : 	}
; 210  : 	return skillnumber;

  0011d	8b 45 fc	 mov	 eax, DWORD PTR _skillnumber$[ebp]

; 211  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
  00127	90		 npad	 1
$LN31@GetSkillNu:
  00128	00 00 00 00	 DD	 $LN14@GetSkillNu
  0012c	00 00 00 00	 DD	 $LN15@GetSkillNu
  00130	00 00 00 00	 DD	 $LN16@GetSkillNu
  00134	00 00 00 00	 DD	 $LN17@GetSkillNu
  00138	00 00 00 00	 DD	 $LN29@GetSkillNu
  0013c	00 00 00 00	 DD	 $LN18@GetSkillNu
  00140	00 00 00 00	 DD	 $LN19@GetSkillNu
  00144	00 00 00 00	 DD	 $LN20@GetSkillNu
  00148	00 00 00 00	 DD	 $LN5@GetSkillNu
  0014c	00 00 00 00	 DD	 $LN24@GetSkillNu
  00150	00 00 00 00	 DD	 $LN22@GetSkillNu
  00154	00 00 00 00	 DD	 $LN23@GetSkillNu
  00158	00 00 00 00	 DD	 $LN21@GetSkillNu
  0015c	00 00 00 00	 DD	 $LN5@GetSkillNu
  00160	00 00 00 00	 DD	 $LN25@GetSkillNu
  00164	00 00 00 00	 DD	 $LN26@GetSkillNu
  00168	00 00 00 00	 DD	 $LN27@GetSkillNu
  0016c	00 00 00 00	 DD	 $LN28@GetSkillNu
?GetSkillNumberInex@@YAHHHH@Z ENDP			; GetSkillNumberInex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMagicInf@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMagicInf@@UAEPAXI@Z PROC				; CMagicInf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMagicInf@@UAE@XZ	; CMagicInf::~CMagicInf
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 10		 push	 16			; 00000010H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCMagicInf@@UAEPAXI@Z ENDP				; CMagicInf::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?GetDamage@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
_subd$ = -36						; size = 4
_damage$ = -32						; size = 4
_this$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GetDamage@CMagicInf@@QAEHXZ PROC			; CMagicInf::GetDamage, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetDamage@CMagicInf@@QAEHXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 c4 ac	 add	 esp, -84		; ffffffacH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 245  : 	int damage=0;

  00036	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 246  : 
; 247  : 	if( m_Skill == 0xFF ) {

  0003d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00040	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00044	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0004a	75 2c		 jne	 SHORT $LN2@GetDamage

; 248  : 		LogAdd(lMsg.Get(458), __FILE__, __LINE__);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetDamage@CMagicInf@@QAEHXZ@4JA
  00051	83 c0 04	 add	 eax, 4
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  0005a	68 ca 01 00 00	 push	 458			; 000001caH
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 		return 0;

  00074	33 c0		 xor	 eax, eax
  00076	eb 78		 jmp	 SHORT $LN5@GetDamage
$LN2@GetDamage:

; 250  : 	}
; 251  : 	
; 252  : 	int subd = m_DamageMax-m_DamageMin;

  00078	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00081	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00084	89 55 dc	 mov	 DWORD PTR _subd$[ebp], edx

; 253  : 	__try

  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 254  : 	{
; 255  : 		damage = m_DamageMin+(rand()%(+1));

  0008e	e8 00 00 00 00	 call	 _rand
  00093	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00098	79 05		 jns	 SHORT $LN10@GetDamage
  0009a	48		 dec	 eax
  0009b	83 c8 ff	 or	 eax, -1
  0009e	40		 inc	 eax
$LN10@GetDamage:
  0009f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  000a5	89 45 e0	 mov	 DWORD PTR _damage$[ebp], eax

; 256  : 	}

  000a8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000af	eb 3c		 jmp	 SHORT $LN9@GetDamage
$LN6@GetDamage:
$LN12@GetDamage:

; 257  : 	__except( subd = 1, EXCEPTION_EXECUTE_HANDLER )

  000b1	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _subd$[ebp], 1
  000b8	b8 01 00 00 00	 mov	 eax, 1
$LN8@GetDamage:
$LN11@GetDamage:
  000bd	c3		 ret	 0
$LN7@GetDamage:
  000be	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 258  : 	{
; 259  : 		LogAdd(lMsg.Get(111), __FILE__, __LINE__);

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetDamage@CMagicInf@@QAEHXZ@4JA
  000c6	83 c0 0f	 add	 eax, 15			; 0000000fH
  000c9	50		 push	 eax
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  000cf	6a 6f		 push	 111			; 0000006fH
  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  000dc	50		 push	 eax
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 256  : 	}

  000e6	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN9@GetDamage:

; 260  : 	}
; 261  : 	return damage;

  000ed	8b 45 e0	 mov	 eax, DWORD PTR _damage$[ebp]
$LN5@GetDamage:

; 262  : }

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
?GetDamage@CMagicInf@@QAEHXZ ENDP			; CMagicInf::GetDamage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?Set@CMagicInf@@QAEHEE@Z
_TEXT	SEGMENT
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_aSkill$ = 8						; size = 1
_aLevel$ = 12						; size = 1
?Set@CMagicInf@@QAEHEE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  : 	int damage;
; 272  : 
; 273  : 	if( m_Skill != 0xFF ) 

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00013	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00019	74 05		 je	 SHORT $LN2@Set

; 274  : 	{
; 275  : 		//LogAdd(lMsg.Get(459),__FILE__, __LINE__);
; 276  : 		return -1;

  0001b	83 c8 ff	 or	 eax, -1
  0001e	eb 48		 jmp	 SHORT $LN1@Set
$LN2@Set:

; 277  : 	}
; 278  : 	m_Skill = aSkill;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8a 4d 08	 mov	 cl, BYTE PTR _aSkill$[ebp]
  00026	88 48 05	 mov	 BYTE PTR [eax+5], cl

; 279  : 	m_Level = aLevel;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8a 4d 0c	 mov	 cl, BYTE PTR _aLevel$[ebp]
  0002f	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 280  : 	
; 281  : 	damage = MagicDamageC.SkillGet(m_Skill);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00039	51		 push	 ecx
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0003f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00044	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax

; 282  : 	m_DamageMin = damage;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _damage$[ebp]
  0004d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 283  : 	m_DamageMax = damage+damage/2;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _damage$[ebp]
  00053	99		 cdq
  00054	2b c2		 sub	 eax, edx
  00056	d1 f8		 sar	 eax, 1
  00058	03 45 f8	 add	 eax, DWORD PTR _damage$[ebp]
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 284  : 
; 285  : 	return m_Skill;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
$LN1@Set:

; 286  : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?Set@CMagicInf@@QAEHEE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?Set@CMagicInf@@QAEHEEE@Z
_TEXT	SEGMENT
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_aType$ = 8						; size = 1
_aIndex$ = 12						; size = 1
_aLevel$ = 16						; size = 1
?Set@CMagicInf@@QAEHEEE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 	int damage;
; 217  : 
; 218  : 	if( m_Skill != 0xFF ) 

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00013	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00019	74 2d		 je	 SHORT $LN2@Set

; 219  : 	{
; 220  : 		LogAdd(lMsg.Get(459),__FILE__, __LINE__);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??Set@CMagicInf@@QAEHEEE@Z@4JA
  00020	83 c0 05	 add	 eax, 5
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@BHPIEHEP@C?3?2Mu?5Online?2Mu?9GS?9Webzen?9MC?910@
  00029	68 cb 01 00 00	 push	 459			; 000001cbH
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Get@CMsg@@QAEPADH@Z
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 221  : 		return -1;

  00043	83 c8 ff	 or	 eax, -1
  00046	eb 6e		 jmp	 SHORT $LN1@Set
$LN2@Set:

; 222  : 	}
; 223  : 	m_Level = aLevel;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8a 4d 10	 mov	 cl, BYTE PTR _aLevel$[ebp]
  0004e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 224  : 	// 마법 종류를 알려줘야한다.
; 225  : 	//if( aIndex >= 0 && aIndex < 16 )
; 226  : 	//{
; 227  : 		m_Skill = GetSkillNumberInex(aType, aIndex, aLevel);

  00051	0f b6 45 10	 movzx	 eax, BYTE PTR _aLevel$[ebp]
  00055	50		 push	 eax
  00056	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aIndex$[ebp]
  0005a	51		 push	 ecx
  0005b	0f b6 55 08	 movzx	 edx, BYTE PTR _aType$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?GetSkillNumberInex@@YAHHHH@Z ; GetSkillNumberInex
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	88 41 05	 mov	 BYTE PTR [ecx+5], al

; 228  : 	if( m_Skill < 0 ) m_Skill = AT_SKILL_POISON;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00075	85 c9		 test	 ecx, ecx
  00077	7d 07		 jge	 SHORT $LN3@Set
  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	c6 40 05 01	 mov	 BYTE PTR [eax+5], 1
$LN3@Set:

; 229  : 	//}
; 230  : 	//else 
; 231  : 	/*{
; 232  : 		m_Skill = AT_SKILL_POISON;
; 233  : 		LogAdd("인덱싱 오류 : (%s %d)", __FILE__, __LINE__);
; 234  : 	} */
; 235  : 	
; 236  : 	damage      = MagicDamageC.SkillGet(m_Skill);

  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00087	51		 push	 ecx
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0008d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00092	89 45 f8	 mov	 DWORD PTR _damage$[ebp], eax

; 237  : 	m_DamageMin = damage;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _damage$[ebp]
  0009b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 238  : 	m_DamageMax = damage+damage/2;

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _damage$[ebp]
  000a1	99		 cdq
  000a2	2b c2		 sub	 eax, edx
  000a4	d1 f8		 sar	 eax, 1
  000a6	03 45 f8	 add	 eax, DWORD PTR _damage$[ebp]
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 239  : 
; 240  : 	return m_Skill;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
$LN1@Set:

; 241  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?Set@CMagicInf@@QAEHEEE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?Clear@CMagicInf@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CMagicInf@@QAEXXZ PROC				; CMagicInf::Clear, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	m_Skill = 0xFF;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 40 05 ff	 mov	 BYTE PTR [eax+5], 255	; 000000ffH

; 42   : 	m_Level = 0;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 43   : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?Clear@CMagicInf@@QAEXXZ ENDP				; CMagicInf::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?IsMagic@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMagic@CMagicInf@@QAEHXZ PROC				; CMagicInf::IsMagic, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	if( m_Skill == 0xFF ) return FALSE;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00013	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00019	75 04		 jne	 SHORT $LN2@IsMagic
  0001b	33 c0		 xor	 eax, eax
  0001d	eb 05		 jmp	 SHORT $LN1@IsMagic
$LN2@IsMagic:

; 48   : 	return TRUE;

  0001f	b8 01 00 00 00	 mov	 eax, 1
$LN1@IsMagic:

; 49   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?IsMagic@CMagicInf@@QAEHXZ ENDP				; CMagicInf::IsMagic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ??1CMagicInf@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMagicInf@@UAE@XZ PROC				; CMagicInf::~CMagicInf, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicInf@@6B@

; 35   : 	m_DamageMin = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 36   : 	m_DamageMax = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 37   : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??1CMagicInf@@UAE@XZ ENDP				; CMagicInf::~CMagicInf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ??0CMagicInf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMagicInf@@QAE@XZ PROC				; CMagicInf::CMagicInf, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicInf@@6B@

; 30   : 	Clear();	

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 31   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CMagicInf@@QAE@XZ ENDP				; CMagicInf::CMagicInf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\MagicInf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
