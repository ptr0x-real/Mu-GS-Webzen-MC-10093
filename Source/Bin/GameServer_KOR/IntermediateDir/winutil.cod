; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?strchr@@YAPADQADH@Z				; strchr
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	?PHeadSetB@@YAXPAEEH@Z				; PHeadSetB
PUBLIC	?PHeadSubSetB@@YAXPAEEEH@Z			; PHeadSubSetB
PUBLIC	?PHeadSetW@@YAXPAEEH@Z				; PHeadSetW
PUBLIC	?PHeadSubSetW@@YAXPAEEEH@Z			; PHeadSubSetW
PUBLIC	?BuxConvert@@YAXPADH@Z				; BuxConvert
PUBLIC	?MakeItemNumber@@YAHHH@Z			; MakeItemNumber
PUBLIC	?SQLSyntexCheckConvert@@YAHPAD@Z		; SQLSyntexCheckConvert
PUBLIC	?SQLSyntexCheck@@YAHPAD@Z			; SQLSyntexCheck
PUBLIC	?SpaceSyntexCheck@@YAHPAD@Z			; SpaceSyntexCheck
PUBLIC	?StrHangulCheck@@YAHPAD@Z			; StrHangulCheck
PUBLIC	?FileSaveString@@YAXPAD0@Z			; FileSaveString
PUBLIC	?IsFile@@YAHPAD@Z				; IsFile
PUBLIC	?GetTodayString@@YAXPAD@Z			; GetTodayString
PUBLIC	?PHeadSetBE@@YAXPAEEH@Z				; PHeadSetBE
PUBLIC	?PHeadSubSetBE@@YAXPAEEEH@Z			; PHeadSubSetBE
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02OHHJMEON@?8?8@				; `string'
PUBLIC	??_C@_02CPIDLAI@at@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d@	; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_strchr:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d@
CONST	SEGMENT
??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d@ DB '%02d%02d%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPIDLAI@at@
CONST	SEGMENT
??_C@_02CPIDLAI@at@ DB 'at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OHHJMEON@?8?8@
CONST	SEGMENT
??_C@_02OHHJMEON@?8?8@ DB '''''', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?bBuxCode@@3PAEA DB 0fcH				; bBuxCode
	DB	0cfH
	DB	0abH
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSubSetBE@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetBE@@YAXPAEEEH@Z PROC			; PHeadSubSetBE, COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 196  : 	lpBuf[0] = PMHCE_BYTE;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c3	 mov	 BYTE PTR [edx+ecx], 195	; 000000c3H

; 197  : 	lpBuf[1] = (BYTE)size;

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	c1 e0 00	 shl	 eax, 0
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00023	8a 55 14	 mov	 dl, BYTE PTR _size$[ebp]
  00026	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 198  : 	lpBuf[2] = head;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	d1 e0		 shl	 eax, 1
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00033	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  00036	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 199  : 	lpBuf[3] = sub;

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	6b c8 03	 imul	 ecx, eax, 3
  00041	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00044	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00047	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 200  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?PHeadSubSetBE@@YAXPAEEEH@Z ENDP			; PHeadSubSetBE
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSetBE@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetBE@@YAXPAEEH@Z PROC				; PHeadSetBE, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 189  : 	lpBuf[0] = PMHCE_BYTE;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c3	 mov	 BYTE PTR [edx+ecx], 195	; 000000c3H

; 190  : 	lpBuf[1] = (BYTE)size;

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	c1 e0 00	 shl	 eax, 0
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00023	8a 55 10	 mov	 dl, BYTE PTR _size$[ebp]
  00026	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 191  : 	lpBuf[2] = head;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	d1 e0		 shl	 eax, 1
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00033	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  00036	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 192  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?PHeadSetBE@@YAXPAEEH@Z ENDP				; PHeadSetBE
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?GetTodayString@@YAXPAD@Z
_TEXT	SEGMENT
_ltime$ = -12						; size = 8
_today$ = -4						; size = 4
_szDate$ = 8						; size = 4
?GetTodayString@@YAXPAD@Z PROC				; GetTodayString, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 	//char		szTemp[50];
; 143  : 	struct tm * today;
; 144  : 	time_t		ltime;
; 145  : 	
; 146  : 	time( &ltime );

  00009	8d 45 f4	 lea	 eax, DWORD PTR _ltime$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _time
  00012	83 c4 04	 add	 esp, 4

; 147  : 	today = localtime( &ltime );

  00015	8d 45 f4	 lea	 eax, DWORD PTR _ltime$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _localtime
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _today$[ebp], eax

; 148  : 	
; 149  : 	today->tm_year += 1900;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _today$[ebp]
  00027	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002a	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00030	8b 55 fc	 mov	 edx, DWORD PTR _today$[ebp]
  00033	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 150  : 	
; 151  : 	wsprintf(szDate, "%02d%02d%02d",today->tm_year, today->tm_mon+1,today->tm_mday);

  00036	8b 45 fc	 mov	 eax, DWORD PTR _today$[ebp]
  00039	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003c	51		 push	 ecx
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _today$[ebp]
  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00043	83 c0 01	 add	 eax, 1
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _today$[ebp]
  0004a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d@
  00053	8b 45 08	 mov	 eax, DWORD PTR _szDate$[ebp]
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0005d	83 c4 14	 add	 esp, 20			; 00000014H

; 152  : 
; 153  : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?GetTodayString@@YAXPAD@Z ENDP				; GetTodayString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?IsFile@@YAHPAD@Z
_TEXT	SEGMENT
_fp$ = -4						; size = 4
_fileName$ = 8						; size = 4
?IsFile@@YAHPAD@Z PROC					; IsFile, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 	FILE * fp;
; 133  : 	fp = fopen(fileName, "rb");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _fileName$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _fopen
  00017	83 c4 08	 add	 esp, 8
  0001a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 134  : 	if( fp == NULL ) return FALSE;

  0001d	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00021	75 04		 jne	 SHORT $LN2@IsFile
  00023	33 c0		 xor	 eax, eax
  00025	eb 11		 jmp	 SHORT $LN1@IsFile
$LN2@IsFile:

; 135  : 	fclose(fp);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _fclose
  00030	83 c4 04	 add	 esp, 4

; 136  : 	return TRUE;

  00033	b8 01 00 00 00	 mov	 eax, 1
$LN1@IsFile:

; 137  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?IsFile@@YAHPAD@Z ENDP					; IsFile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?FileSaveString@@YAXPAD0@Z
_TEXT	SEGMENT
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
_string$ = 12						; size = 4
?FileSaveString@@YAXPAD0@Z PROC				; FileSaveString, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 121  : 	FILE * fp;
; 122  : 
; 123  : 	fp = fopen(filename, "at");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02CPIDLAI@at@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _fopen
  00017	83 c4 08	 add	 esp, 8
  0001a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 124  : 	if( fp == NULL ) return;

  0001d	83 7d fc 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00021	75 02		 jne	 SHORT $LN2@FileSaveSt
  00023	eb 2d		 jmp	 SHORT $LN1@FileSaveSt
$LN2@FileSaveSt:

; 125  : 	fprintf(fp,string);

  00025	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _fprintf
  00032	83 c4 08	 add	 esp, 8

; 126  : 	fprintf(fp,"\n");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _fprintf
  00043	83 c4 08	 add	 esp, 8

; 127  : 	fclose(fp);

  00046	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _fclose
  0004f	83 c4 04	 add	 esp, 4
$LN1@FileSaveSt:

; 128  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?FileSaveString@@YAXPAD0@Z ENDP				; FileSaveString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?StrHangulCheck@@YAHPAD@Z
_TEXT	SEGMENT
tv74 = -348						; size = 4
_count$ = -280						; size = 4
_result$ = -276						; size = 4
_sztemp$ = -272						; size = 256
_n$ = -16						; size = 4
_i$ = -12						; size = 4
_code$ = -7						; size = 1
_code2$ = -6						; size = 1
_code1$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
?StrHangulCheck@@YAHPAD@Z PROC				; StrHangulCheck, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 90   : 	BYTE code1, code2, code;
; 91   : 	int i=0, n=0;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 92   : 	char sztemp[256]="";

  00024	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00029	88 85 f0 fe ff
	ff		 mov	 BYTE PTR _sztemp$[ebp], al
  0002f	68 ff 00 00 00	 push	 255			; 000000ffH
  00034	6a 00		 push	 0
  00036	8d 85 f1 fe ff
	ff		 lea	 eax, DWORD PTR _sztemp$[ebp+1]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : 	BOOL result = TRUE;

  00045	c7 85 ec fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _result$[ebp], 1

; 94   : 	int  count=255;

  0004f	c7 85 e8 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR _count$[ebp], 255 ; 000000ffH
$LN2@StrHangulC:

; 95   : 
; 96   : 	while( count-- )

  00059	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0005f	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  00065	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _count$[ebp]
  0006b	83 e9 01	 sub	 ecx, 1
  0006e	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _count$[ebp], ecx
  00074	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  0007b	0f 84 b7 00 00
	00		 je	 $LN3@StrHangulC

; 97   : 	{
; 98   : 		code1 = *(str+i);

  00081	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00084	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00087	8a 08		 mov	 cl, BYTE PTR [eax]
  00089	88 4d fb	 mov	 BYTE PTR _code1$[ebp], cl

; 99   : 		i++;

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 100  : 		if( code1 == '\0' ) break;

  00095	0f b6 45 fb	 movzx	 eax, BYTE PTR _code1$[ebp]
  00099	85 c0		 test	 eax, eax
  0009b	75 05		 jne	 SHORT $LN4@StrHangulC
  0009d	e9 96 00 00 00	 jmp	 $LN3@StrHangulC
$LN4@StrHangulC:

; 101  : 		if( code1 < 128 ) {

  000a2	0f b6 45 fb	 movzx	 eax, BYTE PTR _code1$[ebp]
  000a6	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000ab	7d 18		 jge	 SHORT $LN5@StrHangulC

; 102  : 			sztemp[n] = code1; n++;

  000ad	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  000b0	8a 4d fb	 mov	 cl, BYTE PTR _code1$[ebp]
  000b3	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _sztemp$[ebp+eax], cl
  000ba	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  000bd	83 c0 01	 add	 eax, 1
  000c0	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 103  : 			continue;

  000c3	eb 94		 jmp	 SHORT $LN2@StrHangulC
$LN5@StrHangulC:

; 104  : 		}
; 105  : 		code2 = *(str+i);

  000c5	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000c8	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  000cb	8a 08		 mov	 cl, BYTE PTR [eax]
  000cd	88 4d fa	 mov	 BYTE PTR _code2$[ebp], cl

; 106  : 		i++;

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000d3	83 c0 01	 add	 eax, 1
  000d6	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 107  : 		code = (code2)|(code1)<<8;

  000d9	0f b6 45 fa	 movzx	 eax, BYTE PTR _code2$[ebp]
  000dd	0f b6 4d fb	 movzx	 ecx, BYTE PTR _code1$[ebp]
  000e1	c1 e1 08	 shl	 ecx, 8
  000e4	0b c1		 or	 eax, ecx
  000e6	88 45 f9	 mov	 BYTE PTR _code$[ebp], al

; 108  : 		if( code > 0 ) {

  000e9	0f b6 45 f9	 movzx	 eax, BYTE PTR _code$[ebp]
  000ed	85 c0		 test	 eax, eax
  000ef	7e 2e		 jle	 SHORT $LN6@StrHangulC

; 109  : 			sztemp[n] = code1; n++;

  000f1	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  000f4	8a 4d fb	 mov	 cl, BYTE PTR _code1$[ebp]
  000f7	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _sztemp$[ebp+eax], cl
  000fe	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 110  : 			sztemp[n] = code2; n++;

  00107	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  0010a	8a 4d fa	 mov	 cl, BYTE PTR _code2$[ebp]
  0010d	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _sztemp$[ebp+eax], cl
  00114	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 111  : 		}

  0011d	eb 0a		 jmp	 SHORT $LN7@StrHangulC
$LN6@StrHangulC:

; 112  : 		else result = FALSE;

  0011f	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _result$[ebp], 0
$LN7@StrHangulC:

; 113  : 		if( code2 == '\0' ) break;

  00129	0f b6 45 fa	 movzx	 eax, BYTE PTR _code2$[ebp]
  0012d	85 c0		 test	 eax, eax
  0012f	75 02		 jne	 SHORT $LN8@StrHangulC
  00131	eb 05		 jmp	 SHORT $LN3@StrHangulC
$LN8@StrHangulC:

; 114  : 	}

  00133	e9 21 ff ff ff	 jmp	 $LN2@StrHangulC
$LN3@StrHangulC:

; 115  : 	strcpy( str, sztemp);

  00138	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _sztemp$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 _strcpy
  00148	83 c4 08	 add	 esp, 8

; 116  : 	return TRUE;

  0014b	b8 01 00 00 00	 mov	 eax, 1

; 117  : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00156	33 cd		 xor	 ecx, ebp
  00158	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
?StrHangulCheck@@YAHPAD@Z ENDP				; StrHangulCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?SpaceSyntexCheck@@YAHPAD@Z
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_string$ = 8						; size = 4
?SpaceSyntexCheck@@YAHPAD@Z PROC			; SpaceSyntexCheck, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	char *temp;
; 82   : 	temp = strchr( string, 0x20);

  00009	6a 20		 push	 32			; 00000020H
  0000b	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 83   : 	if( temp == NULL ) return TRUE;

  0001a	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  0001e	75 07		 jne	 SHORT $LN2@SpaceSynte
  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	eb 02		 jmp	 SHORT $LN1@SpaceSynte
$LN2@SpaceSynte:

; 84   : 	return FALSE;

  00027	33 c0		 xor	 eax, eax
$LN1@SpaceSynte:

; 85   : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?SpaceSyntexCheck@@YAHPAD@Z ENDP			; SpaceSyntexCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?SQLSyntexCheck@@YAHPAD@Z
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_SQLString$ = 8						; size = 4
?SQLSyntexCheck@@YAHPAD@Z PROC				; SQLSyntexCheck, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 29   : 	char *temp;
; 30   : 	temp = strchr( SQLString, '\'');

  00009	6a 27		 push	 39			; 00000027H
  0000b	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 31   : 	if( temp == NULL ) 

  0001a	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  0001e	75 22		 jne	 SHORT $LN2@SQLSyntexC

; 32   : 	{
; 33   : 		temp = strchr( SQLString, 0x20);

  00020	6a 20		 push	 32			; 00000020H
  00022	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 34   : 		if( temp == NULL ) return TRUE;

  00031	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  00035	75 07		 jne	 SHORT $LN3@SQLSyntexC
  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	eb 06		 jmp	 SHORT $LN1@SQLSyntexC
$LN3@SQLSyntexC:

; 35   : 		return FALSE;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 02		 jmp	 SHORT $LN1@SQLSyntexC
$LN2@SQLSyntexC:

; 36   : 	}
; 37   : 	return FALSE;

  00042	33 c0		 xor	 eax, eax
$LN1@SQLSyntexC:

; 38   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?SQLSyntexCheck@@YAHPAD@Z ENDP				; SQLSyntexCheck
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?SQLSyntexCheckConvert@@YAHPAD@Z
_TEXT	SEGMENT
$T1 = -348						; size = 4
_sOfs$ = -280						; size = 4
_tOfs$ = -276						; size = 4
_lOfs$ = -272						; size = 4
_temp2$ = -268						; size = 4
_temp$ = -264						; size = 4
_tempsql$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_SQLString$ = 8						; size = 4
?SQLSyntexCheckConvert@@YAHPAD@Z PROC			; SQLSyntexCheckConvert, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 42   : 	char tempsql[256];
; 43   : 	char *temp;
; 44   : 	char *temp2 = SQLString;

  00016	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  00019	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 45   : 	int	 lOfs=0, tOfs=0, sOfs=0;

  0001f	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 0
  00029	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tOfs$[ebp], 0
  00033	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _sOfs$[ebp], 0

; 46   : 
; 47   : 	if( SQLString == NULL )

  0003d	83 7d 08 00	 cmp	 DWORD PTR _SQLString$[ebp], 0
  00041	75 07		 jne	 SHORT $LN2@SQLSyntexC

; 48   : 		return FALSE;

  00043	33 c0		 xor	 eax, eax
  00045	e9 44 01 00 00	 jmp	 $LN8@SQLSyntexC
$LN2@SQLSyntexC:

; 49   : 	
; 50   : 	while(1)

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 1f 01 00
	00		 je	 $LN3@SQLSyntexC

; 51   : 	{
; 52   : 		temp = strchr( (temp2), '\'');

  00057	6a 27		 push	 39			; 00000027H
  00059	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  00065	83 c4 08	 add	 esp, 8
  00068	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _temp$[ebp], eax

; 53   : 		if( temp) 

  0006e	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00075	0f 84 d7 00 00
	00		 je	 $LN5@SQLSyntexC

; 54   : 		{
; 55   : 			if( temp-(temp2) )

  0007b	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _temp$[ebp]
  00081	2b 85 f4 fe ff
	ff		 sub	 eax, DWORD PTR _temp2$[ebp]
  00087	74 2a		 je	 SHORT $LN7@SQLSyntexC

; 56   : 			{
; 57   : 				memcpy(tempsql+tOfs, temp2, temp-(temp2));

  00089	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _temp$[ebp]
  0008f	2b 85 f4 fe ff
	ff		 sub	 eax, DWORD PTR _temp2$[ebp]
  00095	50		 push	 eax
  00096	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _temp2$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _tOfs$[ebp]
  000a3	8d 84 15 fc fe
	ff ff		 lea	 eax, DWORD PTR _tempsql$[ebp+edx]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@SQLSyntexC:

; 58   : 			}
; 59   : 			lOfs = temp-(temp2+sOfs);

  000b3	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  000b9	03 85 e8 fe ff
	ff		 add	 eax, DWORD PTR _sOfs$[ebp]
  000bf	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _temp$[ebp]
  000c5	2b c8		 sub	 ecx, eax
  000c7	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], ecx

; 60   : 			tOfs += lOfs;

  000cd	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  000d3	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _lOfs$[ebp]
  000d9	89 85 ec fe ff
	ff		 mov	 DWORD PTR _tOfs$[ebp], eax

; 61   : 			temp2 += lOfs;

  000df	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  000e5	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _lOfs$[ebp]
  000eb	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 62   : 			tempsql[tOfs] ='\0';

  000f1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  000f7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000fd	81 bd a4 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  00107	73 02		 jae	 SHORT $LN9@SQLSyntexC
  00109	eb 05		 jmp	 SHORT $LN10@SQLSyntexC
$LN9@SQLSyntexC:
  0010b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN10@SQLSyntexC:
  00110	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00116	c6 84 0d fc fe
	ff ff 00	 mov	 BYTE PTR _tempsql$[ebp+ecx], 0

; 63   : 			tOfs += 2;

  0011e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tOfs$[ebp]
  00124	83 c0 02	 add	 eax, 2
  00127	89 85 ec fe ff
	ff		 mov	 DWORD PTR _tOfs$[ebp], eax

; 64   : 			temp2 += 1;

  0012d	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  00133	83 c0 01	 add	 eax, 1
  00136	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _temp2$[ebp], eax

; 65   : 			strcat(tempsql,"''");

  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_02OHHJMEON@?8?8@
  00141	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempsql$[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _strcat
  0014d	83 c4 08	 add	 esp, 8

; 66   : 		}

  00150	eb 1f		 jmp	 SHORT $LN6@SQLSyntexC
$LN5@SQLSyntexC:

; 67   : 		else
; 68   : 		{
; 69   : 			strcpy(tempsql+tOfs, temp2);

  00152	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _temp2$[ebp]
  00158	50		 push	 eax
  00159	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _tOfs$[ebp]
  0015f	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _tempsql$[ebp+ecx]
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 _strcpy
  0016c	83 c4 08	 add	 esp, 8

; 70   : 			break;

  0016f	eb 05		 jmp	 SHORT $LN3@SQLSyntexC
$LN6@SQLSyntexC:

; 71   : 		}
; 72   : 	}

  00171	e9 d4 fe ff ff	 jmp	 $LN2@SQLSyntexC
$LN3@SQLSyntexC:

; 73   : 
; 74   : 	strcpy(SQLString, tempsql);

  00176	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempsql$[ebp]
  0017c	50		 push	 eax
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _SQLString$[ebp]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 _strcpy
  00186	83 c4 08	 add	 esp, 8

; 75   : //	printf("%s\n",tempsql);
; 76   : 	return TRUE;

  00189	b8 01 00 00 00	 mov	 eax, 1
$LN8@SQLSyntexC:

; 77   : }

  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	5b		 pop	 ebx
  00191	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00194	33 cd		 xor	 ecx, ebp
  00196	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
?SQLSyntexCheckConvert@@YAHPAD@Z ENDP			; SQLSyntexCheckConvert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?MakeItemNumber@@YAHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_index$ = 12						; size = 4
?MakeItemNumber@@YAHHH@Z PROC				; MakeItemNumber, COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10   : 	if(type < 0 || type > MAX_ITEM_TYPE || index < 0 || index > MAX_ITEM_INDEX)

  00009	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0000d	7c 12		 jl	 SHORT $LN3@MakeItemNu
  0000f	83 7d 08 10	 cmp	 DWORD PTR _type$[ebp], 16 ; 00000010H
  00013	7f 0c		 jg	 SHORT $LN3@MakeItemNu
  00015	83 7d 0c 00	 cmp	 DWORD PTR _index$[ebp], 0
  00019	7c 06		 jl	 SHORT $LN3@MakeItemNu
  0001b	83 7d 0c 20	 cmp	 DWORD PTR _index$[ebp], 32 ; 00000020H
  0001f	7e 04		 jle	 SHORT $LN2@MakeItemNu
$LN3@MakeItemNu:

; 11   : 	{
; 12   : 		return 0;

  00021	33 c0		 xor	 eax, eax
  00023	eb 09		 jmp	 SHORT $LN1@MakeItemNu
$LN2@MakeItemNu:

; 13   : 	}
; 14   : 
; 15   : 	return (type<<ITEM_BITSHIFT)+index;

  00025	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00028	c1 e0 05	 shl	 eax, 5
  0002b	03 45 0c	 add	 eax, DWORD PTR _index$[ebp]
$LN1@MakeItemNu:

; 16   : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?MakeItemNumber@@YAHHH@Z ENDP				; MakeItemNumber
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?BuxConvert@@YAXPADH@Z
_TEXT	SEGMENT
_n$1 = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?BuxConvert@@YAXPADH@Z PROC				; BuxConvert, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	for( int n=0; n<size; n++) buf[n] ^= (char)bBuxCode[n%MAX_BUXCCODE];

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@BuxConvert
$LN2@BuxConvert:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _n$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _n$1[ebp], eax
$LN4@BuxConvert:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _n$1[ebp]
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp]
  00021	7d 27		 jge	 SHORT $LN1@BuxConvert
  00023	8b 45 fc	 mov	 eax, DWORD PTR _n$1[ebp]
  00026	99		 cdq
  00027	b9 03 00 00 00	 mov	 ecx, 3
  0002c	f7 f9		 idiv	 ecx
  0002e	0f be 92 00 00
	00 00		 movsx	 edx, BYTE PTR ?bBuxCode@@3PAEA[edx]
  00035	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00038	03 45 fc	 add	 eax, DWORD PTR _n$1[ebp]
  0003b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003e	33 ca		 xor	 ecx, edx
  00040	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00043	03 55 fc	 add	 edx, DWORD PTR _n$1[ebp]
  00046	88 0a		 mov	 BYTE PTR [edx], cl
  00048	eb c8		 jmp	 SHORT $LN2@BuxConvert
$LN1@BuxConvert:

; 25   : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?BuxConvert@@YAXPADH@Z ENDP				; BuxConvert
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSubSetW@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetW@@YAXPAEEEH@Z PROC				; PHeadSubSetW, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 180  : 	lpBuf[0] = PMHC_WORD;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c2	 mov	 BYTE PTR [edx+ecx], 194	; 000000c2H

; 181  : 	lpBuf[1] = HIBYTE(size);

  00018	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  0001b	c1 e8 08	 shr	 eax, 8
  0001e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	c1 e1 00	 shl	 ecx, 0
  0002b	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 182  : 	lpBuf[2] = LOBYTE(size);

  00031	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00034	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00039	b9 01 00 00 00	 mov	 ecx, 1
  0003e	d1 e1		 shl	 ecx, 1
  00040	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00043	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 183  : 	lpBuf[3] = head;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	6b c8 03	 imul	 ecx, eax, 3
  0004e	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00051	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  00054	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 184  : 	lpBuf[4] = sub;

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00062	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00065	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 185  : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?PHeadSubSetW@@YAXPAEEEH@Z ENDP				; PHeadSubSetW
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSetW@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetW@@YAXPAEEH@Z PROC				; PHeadSetW, COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 172  : 	lpBuf[0] = PMHC_WORD;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c2	 mov	 BYTE PTR [edx+ecx], 194	; 000000c2H

; 173  : 	lpBuf[1] = HIBYTE(size);

  00018	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0001b	c1 e8 08	 shr	 eax, 8
  0001e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	c1 e1 00	 shl	 ecx, 0
  0002b	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 174  : 	lpBuf[2] = LOBYTE(size);

  00031	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00034	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00039	b9 01 00 00 00	 mov	 ecx, 1
  0003e	d1 e1		 shl	 ecx, 1
  00040	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00043	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 175  : 	lpBuf[3] = head;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	6b c8 03	 imul	 ecx, eax, 3
  0004e	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00051	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  00054	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 176  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?PHeadSetW@@YAXPAEEH@Z ENDP				; PHeadSetW
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSubSetB@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetB@@YAXPAEEEH@Z PROC				; PHeadSubSetB, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 164  : 	lpBuf[0] = PMHC_BYTE;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c1	 mov	 BYTE PTR [edx+ecx], 193	; 000000c1H

; 165  : 	lpBuf[1] = (BYTE)size;

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	c1 e0 00	 shl	 eax, 0
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00023	8a 55 14	 mov	 dl, BYTE PTR _size$[ebp]
  00026	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 166  : 	lpBuf[2] = head;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	d1 e0		 shl	 eax, 1
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00033	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  00036	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 167  : 	lpBuf[3] = sub;

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	6b c8 03	 imul	 ecx, eax, 3
  00041	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00044	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00047	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 168  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?PHeadSubSetB@@YAXPAEEEH@Z ENDP				; PHeadSubSetB
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?PHeadSetB@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetB@@YAXPAEEH@Z PROC				; PHeadSetB, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	lpBuf[0] = PMHC_BYTE;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00014	c6 04 0a c1	 mov	 BYTE PTR [edx+ecx], 193	; 000000c1H

; 158  : 	lpBuf[1] = (BYTE)size;

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	c1 e0 00	 shl	 eax, 0
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00023	8a 55 10	 mov	 dl, BYTE PTR _size$[ebp]
  00026	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 159  : 	lpBuf[2] = head;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	d1 e0		 shl	 eax, 1
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]
  00033	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  00036	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 160  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?PHeadSetB@@YAXPAEEH@Z ENDP				; PHeadSetB
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __time64
  00012	83 c4 04	 add	 esp, 4

; 537  :         }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT

; 509  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 510  :             #pragma warning(push)
; 511  :             #pragma warning(disable: 4996)
; 512  :             return _localtime64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __localtime64
  00012	83 c4 04	 add	 esp, 4

; 513  :             #pragma warning(pop)
; 514  :         }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADQADH@Z PROC				; strchr, COMDAT

; 505  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 506  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strchr
  00016	83 c4 08	 add	 esp, 8

; 507  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strchr@@YAPADQADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\winutil.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
