; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CWzMemScript@@QAE@XZ				; CWzMemScript::CWzMemScript
PUBLIC	??1CWzMemScript@@UAE@XZ				; CWzMemScript::~CWzMemScript
PUBLIC	?SetBuffer@CWzMemScript@@QAEHPADH@Z		; CWzMemScript::SetBuffer
PUBLIC	?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ; CWzMemScript::SetScriptParsingBuffer
PUBLIC	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ	; CWzMemScript::GetToken
PUBLIC	?GetNumber@CWzMemScript@@QAEHXZ			; CWzMemScript::GetNumber
PUBLIC	?GetString@CWzMemScript@@QAEPADXZ		; CWzMemScript::GetString
PUBLIC	?GetC@CWzMemScript@@IAEHXZ			; CWzMemScript::GetC
PUBLIC	?UnGetC@CWzMemScript@@IAEXH@Z			; CWzMemScript::UnGetC
PUBLIC	??_GCWzMemScript@@UAEPAXI@Z			; CWzMemScript::`scalar deleting destructor'
PUBLIC	??_7CWzMemScript@@6B@				; CWzMemScript::`vftable'
PUBLIC	??_R4CWzMemScript@@6B@				; CWzMemScript::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWzMemScript@@@8			; CWzMemScript `RTTI Type Descriptor'
PUBLIC	??_R3CWzMemScript@@8				; CWzMemScript::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWzMemScript@@8				; CWzMemScript::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWzMemScript@@8			; CWzMemScript::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_atof:PROC
EXTRN	??_ECWzMemScript@@UAEPAXI@Z:PROC		; CWzMemScript::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CWzMemScript@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWzMemScript@@8 DD FLAT:??_R0?AVCWzMemScript@@@8 ; CWzMemScript::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_R2CWzMemScript@@8
rdata$r	SEGMENT
??_R2CWzMemScript@@8 DD FLAT:??_R1A@?0A@EA@CWzMemScript@@8 ; CWzMemScript::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWzMemScript@@8
rdata$r	SEGMENT
??_R3CWzMemScript@@8 DD 00H				; CWzMemScript::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWzMemScript@@@8
data$r	SEGMENT
??_R0?AVCWzMemScript@@@8 DD FLAT:??_7type_info@@6B@	; CWzMemScript `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWzMemScript@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWzMemScript@@6B@
rdata$r	SEGMENT
??_R4CWzMemScript@@6B@ DD 00H				; CWzMemScript::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWzMemScript@@@8
	DD	FLAT:??_R3CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_7CWzMemScript@@6B@
CONST	SEGMENT
??_7CWzMemScript@@6B@ DD FLAT:??_R4CWzMemScript@@6B@	; CWzMemScript::`vftable'
	DD	FLAT:??_ECWzMemScript@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWzMemScript@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWzMemScript@@UAEPAXI@Z PROC			; CWzMemScript::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 84 00 00 00	 push	 132			; 00000084H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCWzMemScript@@UAEPAXI@Z ENDP			; CWzMemScript::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?UnGetC@CWzMemScript@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ch$ = 8						; size = 4
?UnGetC@CWzMemScript@@IAEXH@Z PROC			; CWzMemScript::UnGetC, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	if( m_iBufferCount <= 0 )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	7f 02		 jg	 SHORT $LN2@UnGetC

; 39   : 		return;

  00015	eb 21		 jmp	 SHORT $LN1@UnGetC
$LN2@UnGetC:

; 40   : 	
; 41   : 	m_iBufferCount--;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001d	83 e9 01	 sub	 ecx, 1
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 42   : 	m_pBuffer[m_iBufferCount] = ch;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00032	8a 55 08	 mov	 dl, BYTE PTR _ch$[ebp]
  00035	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN1@UnGetC:

; 43   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?UnGetC@CWzMemScript@@IAEXH@Z ENDP			; CWzMemScript::UnGetC
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?GetC@CWzMemScript@@IAEHXZ
_TEXT	SEGMENT
tv78 = -72						; size = 4
_this$ = -4						; size = 4
?GetC@CWzMemScript@@IAEHXZ PROC				; CWzMemScript::GetC, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	if( m_iBufferCount >= m_iBufferSize )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00015	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00018	7c 05		 jl	 SHORT $LN2@GetC

; 31   : 		return EOF;

  0001a	83 c8 ff	 or	 eax, -1
  0001d	eb 25		 jmp	 SHORT $LN1@GetC
$LN2@GetC:

; 32   : 
; 33   : 	return m_pBuffer[m_iBufferCount++];

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002b	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  0002f	89 4d b8	 mov	 DWORD PTR tv78[ebp], ecx
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00038	83 c0 01	 add	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00041	8b 45 b8	 mov	 eax, DWORD PTR tv78[ebp]
$LN1@GetC:

; 34   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?GetC@CWzMemScript@@IAEHXZ ENDP				; CWzMemScript::GetC
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?GetString@CWzMemScript@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@CWzMemScript@@QAEPADXZ PROC			; CWzMemScript::GetString, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	return	TokenString;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 1c	 add	 eax, 28			; 0000001cH

; 60   : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetString@CWzMemScript@@QAEPADXZ ENDP			; CWzMemScript::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?GetNumber@CWzMemScript@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumber@CWzMemScript@@QAEHXZ PROC			; CWzMemScript::GetNumber, COMDAT
; _this$ = ecx

; 53   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	return	(int)TokenNumber;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	f3 0f 2c 40 18	 cvttss2si eax, DWORD PTR [eax+24]

; 55   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetNumber@CWzMemScript@@QAEHXZ ENDP			; CWzMemScript::GetNumber
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ
_TEXT	SEGMENT
tv89 = -184						; size = 4
_TempString$ = -116					; size = 100
_p$ = -16						; size = 4
_ch$ = -9						; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ PROC	; CWzMemScript::GetToken, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	unsigned char ch;
; 65   : 	TokenString[0] = '\0';

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c6 44 0a 1c 00	 mov	 BYTE PTR [edx+ecx+28], 0
$LN4@GetToken:

; 66   : 	do
; 67   : 	{
; 68   : 		if ( (ch =(unsigned char) GetC()) == (BYTE)EOF) return END;

  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00031	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00034	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00038	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0003d	75 0a		 jne	 SHORT $LN15@GetToken
  0003f	b8 02 00 00 00	 mov	 eax, 2
  00044	e9 9b 02 00 00	 jmp	 $LN7@GetToken
$LN15@GetToken:

; 69   : 		if (ch=='/' && (ch =(unsigned char) GetC() )=='/')	

  00049	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0004d	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00050	75 2a		 jne	 SHORT $LN6@GetToken
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  0005a	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0005d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00061	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00064	75 16		 jne	 SHORT $LN6@GetToken
$LN5@GetToken:

; 70   : 		{
; 71   : 			while( (ch = (unsigned char) GetC()) != '\n' );

  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  0006e	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00071	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00075	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00078	74 02		 je	 SHORT $LN6@GetToken
  0007a	eb ea		 jmp	 SHORT $LN5@GetToken
$LN6@GetToken:

; 72   : 		}
; 73   : 	} while(  isspace(ch) );

  0007c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _isspace
  00086	83 c4 04	 add	 esp, 4
  00089	85 c0		 test	 eax, eax
  0008b	75 9c		 jne	 SHORT $LN4@GetToken

; 74   : 	
; 75   : 	char *p, TempString[100];
; 76   : 	switch(ch)

  0008d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00091	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00097	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  0009d	83 e9 22	 sub	 ecx, 34			; 00000022H
  000a0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], ecx
  000a6	83 bd 48 ff ff
	ff 5b		 cmp	 DWORD PTR tv89[ebp], 91	; 0000005bH
  000ad	0f 87 80 01 00
	00		 ja	 $LN26@GetToken
  000b3	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv89[ebp]
  000b9	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@GetToken[edx]
  000c0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@GetToken[eax*4]
$LN17@GetToken:

; 77   : 	{	
; 78   : 	case '#':
; 79   : 		return CurrentToken = COMMAND;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 80 80 00 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+128], 35	; 00000023H
  000d4	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000d9	e9 06 02 00 00	 jmp	 $LN7@GetToken
$LN18@GetToken:

; 80   : 	case ';':
; 81   : 		return CurrentToken = SEMICOLON;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	c7 80 80 00 00
	00 3b 00 00 00	 mov	 DWORD PTR [eax+128], 59	; 0000003bH
  000eb	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000f0	e9 ef 01 00 00	 jmp	 $LN7@GetToken
$LN19@GetToken:

; 82   : 	case ',':
; 83   : 		return CurrentToken = COMMA;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	c7 80 80 00 00
	00 2c 00 00 00	 mov	 DWORD PTR [eax+128], 44	; 0000002cH
  00102	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  00107	e9 d8 01 00 00	 jmp	 $LN7@GetToken
$LN20@GetToken:

; 84   : 	case '{':
; 85   : 		return CurrentToken = LP;

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	c7 80 80 00 00
	00 7b 00 00 00	 mov	 DWORD PTR [eax+128], 123 ; 0000007bH
  00119	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  0011e	e9 c1 01 00 00	 jmp	 $LN7@GetToken
$LN21@GetToken:

; 86   : 	case '}':
; 87   : 		return CurrentToken = RP;

  00123	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00126	c7 80 80 00 00
	00 7d 00 00 00	 mov	 DWORD PTR [eax+128], 125 ; 0000007dH
  00130	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00135	e9 aa 01 00 00	 jmp	 $LN7@GetToken
$LN22@GetToken:

; 88   : 	case '0':	case '1':	case '2':	case '3':	case '4':
; 89   : 	case '5':	case '6':	case '7':	case '8':	case '9':
; 90   : 	case '.':	case '-':
; 91   : 		UnGetC(ch);

  0013a	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC

; 92   : 		p = TempString;

  00147	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  0014a	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN9@GetToken:

; 93   : 		while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch=='.' || isdigit(ch) || ch=='-') )

  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00155	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  00158	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0015c	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00161	74 36		 je	 SHORT $LN10@GetToken
  00163	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00167	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0016a	74 1a		 je	 SHORT $LN23@GetToken
  0016c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _isdigit
  00176	83 c4 04	 add	 esp, 4
  00179	85 c0		 test	 eax, eax
  0017b	75 09		 jne	 SHORT $LN23@GetToken
  0017d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00181	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00184	75 13		 jne	 SHORT $LN10@GetToken
$LN23@GetToken:

; 94   : 			*p++ = ch;

  00186	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00189	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  0018c	88 08		 mov	 BYTE PTR [eax], cl
  0018e	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  00191	83 c2 01	 add	 edx, 1
  00194	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  00197	eb b4		 jmp	 SHORT $LN9@GetToken
$LN10@GetToken:

; 95   : 		*p = 0;

  00199	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0019c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 96   : 		TokenNumber = (float)atof(TempString);

  0019f	8d 45 8c	 lea	 eax, DWORD PTR _TempString$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _atof
  001a8	83 c4 04	 add	 esp, 4
  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 97   : 		//			sscanf(TempString," %f ",&TokenNumber);
; 98   : 		return CurrentToken = NUMBER;

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+128], 1
  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	e9 1c 01 00 00	 jmp	 $LN7@GetToken
$LN24@GetToken:

; 99   : 	case '"':
; 100  : 		p = TokenString;

  001c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	83 c0 1c	 add	 eax, 28			; 0000001cH
  001ce	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
$LN11@GetToken:

; 101  : 		while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch!='"'))// || isalnum(ch)) )

  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  001d9	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  001dc	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  001e0	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001e5	74 1c		 je	 SHORT $LN12@GetToken
  001e7	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  001eb	83 f8 22	 cmp	 eax, 34			; 00000022H
  001ee	74 13		 je	 SHORT $LN12@GetToken

; 102  : 			*p++ = ch;

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  001f3	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  001f6	88 08		 mov	 BYTE PTR [eax], cl
  001f8	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  001fb	83 c2 01	 add	 edx, 1
  001fe	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  00201	eb ce		 jmp	 SHORT $LN11@GetToken
$LN12@GetToken:

; 103  : 		if (ch!='"')

  00203	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00207	83 f8 22	 cmp	 eax, 34			; 00000022H
  0020a	74 0d		 je	 SHORT $LN25@GetToken

; 104  : 			UnGetC(ch);

  0020c	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00210	50		 push	 eax
  00211	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC
$LN25@GetToken:

; 105  : 		*p = 0;

  00219	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0021c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 106  : 		return CurrentToken = NAME;

  0021f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00222	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  0022c	33 c0		 xor	 eax, eax
  0022e	e9 b1 00 00 00	 jmp	 $LN7@GetToken
$LN26@GetToken:

; 107  : 	default:
; 108  : 		if (isalpha(ch))	

  00233	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 _isalpha
  0023d	83 c4 04	 add	 esp, 4
  00240	85 c0		 test	 eax, eax
  00242	0f 84 8a 00 00
	00		 je	 $LN27@GetToken

; 109  : 		{
; 110  : 			p = TokenString;

  00248	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0024b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0024e	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 111  : 			*p++ = ch;

  00251	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00254	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  00257	88 08		 mov	 BYTE PTR [eax], cl
  00259	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  0025c	83 c2 01	 add	 edx, 1
  0025f	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
$LN13@GetToken:

; 112  : 			while ( (  (ch = GetC() ) !=(BYTE)EOF) && (ch=='.' || ch=='_' || isalnum(ch)) )

  00262	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  0026a	88 45 f7	 mov	 BYTE PTR _ch$[ebp], al
  0026d	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00271	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00276	74 36		 je	 SHORT $LN14@GetToken
  00278	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0027c	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0027f	74 1a		 je	 SHORT $LN28@GetToken
  00281	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  00285	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  00288	74 11		 je	 SHORT $LN28@GetToken
  0028a	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _isalnum
  00294	83 c4 04	 add	 esp, 4
  00297	85 c0		 test	 eax, eax
  00299	74 13		 je	 SHORT $LN14@GetToken
$LN28@GetToken:

; 113  : 				*p++ = ch;

  0029b	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  0029e	8a 4d f7	 mov	 cl, BYTE PTR _ch$[ebp]
  002a1	88 08		 mov	 BYTE PTR [eax], cl
  002a3	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  002a6	83 c2 01	 add	 edx, 1
  002a9	89 55 f0	 mov	 DWORD PTR _p$[ebp], edx
  002ac	eb b4		 jmp	 SHORT $LN13@GetToken
$LN14@GetToken:

; 114  : 			UnGetC(ch);

  002ae	0f b6 45 f7	 movzx	 eax, BYTE PTR _ch$[ebp]
  002b2	50		 push	 eax
  002b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b6	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC

; 115  : 			*p = 0;

  002bb	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  002be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 116  : 			return CurrentToken = NAME;

  002c1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002c4	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  002ce	33 c0		 xor	 eax, eax
  002d0	eb 12		 jmp	 SHORT $LN7@GetToken
$LN27@GetToken:

; 117  : 		}
; 118  : 		return CurrentToken = SMD_ERROR;

  002d2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	c7 80 80 00 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+128], 60	; 0000003cH
  002df	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN7@GetToken:

; 119  : 	}
; 120  : }

  002e4	5f		 pop	 edi
  002e5	5e		 pop	 esi
  002e6	5b		 pop	 ebx
  002e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ea	33 cd		 xor	 ecx, ebp
  002ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f1	8b e5		 mov	 esp, ebp
  002f3	5d		 pop	 ebp
  002f4	c3		 ret	 0
  002f5	0f 1f 00	 npad	 3
$LN31@GetToken:
  002f8	00 00 00 00	 DD	 $LN24@GetToken
  002fc	00 00 00 00	 DD	 $LN17@GetToken
  00300	00 00 00 00	 DD	 $LN19@GetToken
  00304	00 00 00 00	 DD	 $LN22@GetToken
  00308	00 00 00 00	 DD	 $LN18@GetToken
  0030c	00 00 00 00	 DD	 $LN20@GetToken
  00310	00 00 00 00	 DD	 $LN21@GetToken
  00314	00 00 00 00	 DD	 $LN26@GetToken
$LN30@GetToken:
  00318	00		 DB	 0
  00319	01		 DB	 1
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	02		 DB	 2
  00323	03		 DB	 3
  00324	03		 DB	 3
  00325	07		 DB	 7
  00326	03		 DB	 3
  00327	03		 DB	 3
  00328	03		 DB	 3
  00329	03		 DB	 3
  0032a	03		 DB	 3
  0032b	03		 DB	 3
  0032c	03		 DB	 3
  0032d	03		 DB	 3
  0032e	03		 DB	 3
  0032f	03		 DB	 3
  00330	07		 DB	 7
  00331	04		 DB	 4
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	07		 DB	 7
  00336	07		 DB	 7
  00337	07		 DB	 7
  00338	07		 DB	 7
  00339	07		 DB	 7
  0033a	07		 DB	 7
  0033b	07		 DB	 7
  0033c	07		 DB	 7
  0033d	07		 DB	 7
  0033e	07		 DB	 7
  0033f	07		 DB	 7
  00340	07		 DB	 7
  00341	07		 DB	 7
  00342	07		 DB	 7
  00343	07		 DB	 7
  00344	07		 DB	 7
  00345	07		 DB	 7
  00346	07		 DB	 7
  00347	07		 DB	 7
  00348	07		 DB	 7
  00349	07		 DB	 7
  0034a	07		 DB	 7
  0034b	07		 DB	 7
  0034c	07		 DB	 7
  0034d	07		 DB	 7
  0034e	07		 DB	 7
  0034f	07		 DB	 7
  00350	07		 DB	 7
  00351	07		 DB	 7
  00352	07		 DB	 7
  00353	07		 DB	 7
  00354	07		 DB	 7
  00355	07		 DB	 7
  00356	07		 DB	 7
  00357	07		 DB	 7
  00358	07		 DB	 7
  00359	07		 DB	 7
  0035a	07		 DB	 7
  0035b	07		 DB	 7
  0035c	07		 DB	 7
  0035d	07		 DB	 7
  0035e	07		 DB	 7
  0035f	07		 DB	 7
  00360	07		 DB	 7
  00361	07		 DB	 7
  00362	07		 DB	 7
  00363	07		 DB	 7
  00364	07		 DB	 7
  00365	07		 DB	 7
  00366	07		 DB	 7
  00367	07		 DB	 7
  00368	07		 DB	 7
  00369	07		 DB	 7
  0036a	07		 DB	 7
  0036b	07		 DB	 7
  0036c	07		 DB	 7
  0036d	07		 DB	 7
  0036e	07		 DB	 7
  0036f	07		 DB	 7
  00370	07		 DB	 7
  00371	05		 DB	 5
  00372	07		 DB	 7
  00373	06		 DB	 6
?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ENDP	; CWzMemScript::GetToken
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z PROC	; CWzMemScript::SetScriptParsingBuffer, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	m_pBuffer = buffer;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 48   : 	m_iBufferSize = size;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 49   : 	m_iBufferCount = 0;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 50   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ENDP	; CWzMemScript::SetScriptParsingBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?SetBuffer@CWzMemScript@@QAEHPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_buffersize$ = 12					; size = 4
?SetBuffer@CWzMemScript@@QAEHPADH@Z PROC		; CWzMemScript::SetBuffer, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	SetScriptParsingBuffer(buffer, buffersize);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _buffersize$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ; CWzMemScript::SetScriptParsingBuffer

; 25   : 	return 1;

  0001c	b8 01 00 00 00	 mov	 eax, 1

; 26   : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetBuffer@CWzMemScript@@QAEHPADH@Z ENDP		; CWzMemScript::SetBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ??1CWzMemScript@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWzMemScript@@UAE@XZ PROC				; CWzMemScript::~CWzMemScript, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWzMemScript@@6B@

; 19   : 
; 20   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWzMemScript@@UAE@XZ ENDP				; CWzMemScript::~CWzMemScript
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ??0CWzMemScript@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWzMemScript@@QAE@XZ PROC				; CWzMemScript::CWzMemScript, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWzMemScript@@6B@

; 14   : 
; 15   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CWzMemScript@@QAE@XZ ENDP				; CWzMemScript::CWzMemScript
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\common\WzMemScript.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
