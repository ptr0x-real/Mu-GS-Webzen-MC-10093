; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0cBalanceSystem@@QAE@XZ			; cBalanceSystem::cBalanceSystem
PUBLIC	??1cBalanceSystem@@UAE@XZ			; cBalanceSystem::~cBalanceSystem
PUBLIC	?Load@cBalanceSystem@@QAEXPAD@Z			; cBalanceSystem::Load
PUBLIC	?Init@cBalanceSystem@@QAEXXZ			; cBalanceSystem::Init
PUBLIC	?ReadConfigs@cBalanceSystem@@QAEXPAD@Z		; cBalanceSystem::ReadConfigs
PUBLIC	?Main@cBalanceSystem@@QAEXPAVOBJECTSTRUCT@@0AAH@Z ; cBalanceSystem::Main
PUBLIC	??_GcBalanceSystem@@UAEPAXI@Z			; cBalanceSystem::`scalar deleting destructor'
PUBLIC	??_7cBalanceSystem@@6B@				; cBalanceSystem::`vftable'
PUBLIC	?gBalanceSystem@@3VcBalanceSystem@@A		; gBalanceSystem
PUBLIC	??_C@_06CKGENIKG@Enable@			; `string'
PUBLIC	??_C@_06POMJKEPM@Common@			; `string'
PUBLIC	??_C@_06NMEOCCIL@DKvsDK@			; `string'
PUBLIC	??_C@_06DKDJHPNG@DKvsDW@			; `string'
PUBLIC	??_C@_07GBGGINOJ@DKvsELF@			; `string'
PUBLIC	??_C@_06HPCKFGAI@DKvsMG@			; `string'
PUBLIC	??_C@_06JDAPLEEM@DKvsDL@			; `string'
PUBLIC	??_C@_06EOCNLNDG@DWvsDW@			; `string'
PUBLIC	??_C@_06KIFKOAGL@DWvsDK@			; `string'
PUBLIC	??_C@_07MBBIHLFD@DWvsELF@			; `string'
PUBLIC	??_C@_06LDOJEOI@DWvsMG@				; `string'
PUBLIC	??_C@_06OHBLHGKM@DWvsDL@			; `string'
PUBLIC	??_C@_08MEHKHKBD@ELFvsELF@			; `string'
PUBLIC	??_C@_07MKAMLDKM@ELFvsDK@			; `string'
PUBLIC	??_C@_07CMHLOOPB@ELFvsDW@			; `string'
PUBLIC	??_C@_08DODMHBDM@ELFvsMG?5@			; `string'
PUBLIC	??_C@_07IFENCFGL@ELFvsDL@			; `string'
PUBLIC	??_C@_06JNHANDKA@MGvsMG@			; `string'
PUBLIC	??_C@_06DOBEKHCD@MGvsDK@			; `string'
PUBLIC	??_C@_06NIGDPKHO@MGvsDW@			; `string'
PUBLIC	??_C@_07LJIJPMLG@MGvsELF@			; `string'
PUBLIC	??_C@_06HBFFDBOE@MGvsDL@			; `string'
PUBLIC	??_C@_06IOAKIEPE@DLvsDL@			; `string'
PUBLIC	??_C@_06MBELBCDD@DLvsDK@			; `string'
PUBLIC	??_C@_06CHDMEPGO@DLvsDW@			; `string'
PUBLIC	??_C@_07KEMBLDGH@DLvsELF@			; `string'
PUBLIC	??_C@_06GCCPGGLA@DLvsMG@			; `string'
PUBLIC	??_C@_0BO@INDCDFJD@Load?5Balance?5System?5Active?5?$CFd@ ; `string'
PUBLIC	??_R4cBalanceSystem@@6B@			; cBalanceSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcBalanceSystem@@@8			; cBalanceSystem `RTTI Type Descriptor'
PUBLIC	??_R3cBalanceSystem@@8				; cBalanceSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2cBalanceSystem@@8				; cBalanceSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@cBalanceSystem@@8			; cBalanceSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	??_EcBalanceSystem@@UAEPAXI@Z:PROC		; cBalanceSystem::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
_BSS	SEGMENT
?gBalanceSystem@@3VcBalanceSystem@@A DB 06cH DUP (?)	; gBalanceSystem
_BSS	ENDS
CRT$XCU	SEGMENT
?gBalanceSystem$initializer$@@3P6AXXZA DD FLAT:??__EgBalanceSystem@@YAXXZ ; gBalanceSystem$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@cBalanceSystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@cBalanceSystem@@8 DD FLAT:??_R0?AVcBalanceSystem@@@8 ; cBalanceSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2cBalanceSystem@@8
rdata$r	SEGMENT
??_R2cBalanceSystem@@8 DD FLAT:??_R1A@?0A@EA@cBalanceSystem@@8 ; cBalanceSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3cBalanceSystem@@8
rdata$r	SEGMENT
??_R3cBalanceSystem@@8 DD 00H				; cBalanceSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcBalanceSystem@@@8
data$r	SEGMENT
??_R0?AVcBalanceSystem@@@8 DD FLAT:??_7type_info@@6B@	; cBalanceSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcBalanceSystem@@', 00H
data$r	ENDS
;	COMDAT ??_R4cBalanceSystem@@6B@
rdata$r	SEGMENT
??_R4cBalanceSystem@@6B@ DD 00H				; cBalanceSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcBalanceSystem@@@8
	DD	FLAT:??_R3cBalanceSystem@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BO@INDCDFJD@Load?5Balance?5System?5Active?5?$CFd@
CONST	SEGMENT
??_C@_0BO@INDCDFJD@Load?5Balance?5System?5Active?5?$CFd@ DB 'Load Balance'
	DB	' System Active %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCCPGGLA@DLvsMG@
CONST	SEGMENT
??_C@_06GCCPGGLA@DLvsMG@ DB 'DLvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEMBLDGH@DLvsELF@
CONST	SEGMENT
??_C@_07KEMBLDGH@DLvsELF@ DB 'DLvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHDMEPGO@DLvsDW@
CONST	SEGMENT
??_C@_06CHDMEPGO@DLvsDW@ DB 'DLvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBELBCDD@DLvsDK@
CONST	SEGMENT
??_C@_06MBELBCDD@DLvsDK@ DB 'DLvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOAKIEPE@DLvsDL@
CONST	SEGMENT
??_C@_06IOAKIEPE@DLvsDL@ DB 'DLvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBFFDBOE@MGvsDL@
CONST	SEGMENT
??_C@_06HBFFDBOE@MGvsDL@ DB 'MGvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJIJPMLG@MGvsELF@
CONST	SEGMENT
??_C@_07LJIJPMLG@MGvsELF@ DB 'MGvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIGDPKHO@MGvsDW@
CONST	SEGMENT
??_C@_06NIGDPKHO@MGvsDW@ DB 'MGvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOBEKHCD@MGvsDK@
CONST	SEGMENT
??_C@_06DOBEKHCD@MGvsDK@ DB 'MGvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNHANDKA@MGvsMG@
CONST	SEGMENT
??_C@_06JNHANDKA@MGvsMG@ DB 'MGvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFENCFGL@ELFvsDL@
CONST	SEGMENT
??_C@_07IFENCFGL@ELFvsDL@ DB 'ELFvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DODMHBDM@ELFvsMG?5@
CONST	SEGMENT
??_C@_08DODMHBDM@ELFvsMG?5@ DB 'ELFvsMG ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMHLOOPB@ELFvsDW@
CONST	SEGMENT
??_C@_07CMHLOOPB@ELFvsDW@ DB 'ELFvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKAMLDKM@ELFvsDK@
CONST	SEGMENT
??_C@_07MKAMLDKM@ELFvsDK@ DB 'ELFvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEHKHKBD@ELFvsELF@
CONST	SEGMENT
??_C@_08MEHKHKBD@ELFvsELF@ DB 'ELFvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHBLHGKM@DWvsDL@
CONST	SEGMENT
??_C@_06OHBLHGKM@DWvsDL@ DB 'DWvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LDOJEOI@DWvsMG@
CONST	SEGMENT
??_C@_06LDOJEOI@DWvsMG@ DB 'DWvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBBIHLFD@DWvsELF@
CONST	SEGMENT
??_C@_07MBBIHLFD@DWvsELF@ DB 'DWvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIFKOAGL@DWvsDK@
CONST	SEGMENT
??_C@_06KIFKOAGL@DWvsDK@ DB 'DWvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOCNLNDG@DWvsDW@
CONST	SEGMENT
??_C@_06EOCNLNDG@DWvsDW@ DB 'DWvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDAPLEEM@DKvsDL@
CONST	SEGMENT
??_C@_06JDAPLEEM@DKvsDL@ DB 'DKvsDL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPCKFGAI@DKvsMG@
CONST	SEGMENT
??_C@_06HPCKFGAI@DKvsMG@ DB 'DKvsMG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GBGGINOJ@DKvsELF@
CONST	SEGMENT
??_C@_07GBGGINOJ@DKvsELF@ DB 'DKvsELF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKDJHPNG@DKvsDW@
CONST	SEGMENT
??_C@_06DKDJHPNG@DKvsDW@ DB 'DKvsDW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMEOCCIL@DKvsDK@
CONST	SEGMENT
??_C@_06NMEOCCIL@DKvsDK@ DB 'DKvsDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMJKEPM@Common@
CONST	SEGMENT
??_C@_06POMJKEPM@Common@ DB 'Common', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7cBalanceSystem@@6B@
CONST	SEGMENT
??_7cBalanceSystem@@6B@ DD FLAT:??_R4cBalanceSystem@@6B@ ; cBalanceSystem::`vftable'
	DD	FLAT:??_EcBalanceSystem@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FgBalanceSystem@@YAXXZ
text$yd	SEGMENT
??__FgBalanceSystem@@YAXXZ PROC				; `dynamic atexit destructor for 'gBalanceSystem'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  0000e	e8 00 00 00 00	 call	 ??1cBalanceSystem@@UAE@XZ ; cBalanceSystem::~cBalanceSystem
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__FgBalanceSystem@@YAXXZ ENDP				; `dynamic atexit destructor for 'gBalanceSystem''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ??__EgBalanceSystem@@YAXXZ
text$di	SEGMENT
??__EgBalanceSystem@@YAXXZ PROC				; `dynamic initializer for 'gBalanceSystem'', COMDAT

; 5    : cBalanceSystem gBalanceSystem;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gBalanceSystem@@3VcBalanceSystem@@A ; gBalanceSystem
  0000e	e8 00 00 00 00	 call	 ??0cBalanceSystem@@QAE@XZ ; cBalanceSystem::cBalanceSystem
  00013	68 00 00 00 00	 push	 OFFSET ??__FgBalanceSystem@@YAXXZ ; `dynamic atexit destructor for 'gBalanceSystem''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__EgBalanceSystem@@YAXXZ ENDP				; `dynamic initializer for 'gBalanceSystem''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GcBalanceSystem@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GcBalanceSystem@@UAEPAXI@Z PROC			; cBalanceSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1cBalanceSystem@@UAE@XZ ; cBalanceSystem::~cBalanceSystem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 6c		 push	 108			; 0000006cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GcBalanceSystem@@UAEPAXI@Z ENDP			; cBalanceSystem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?Main@cBalanceSystem@@QAEXPAVOBJECTSTRUCT@@0AAH@Z
_TEXT	SEGMENT
tv198 = -72						; size = 4
tv176 = -72						; size = 4
tv154 = -72						; size = 4
tv132 = -72						; size = 4
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTarget$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
?Main@cBalanceSystem@@QAEXPAVOBJECTSTRUCT@@0AAH@Z PROC	; cBalanceSystem::Main, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	if (!this->Enable) return;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	75 05		 jne	 SHORT $LN12@Main
  00017	e9 e9 03 00 00	 jmp	 $LN1@Main
$LN12@Main:

; 99   : 
; 100  : 	if (lpObj->Type != OBJTYPE_CHARACTER || lpTarget->Type != OBJTYPE_CHARACTER)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0001f	0f b7 48 64	 movzx	 ecx, WORD PTR [eax+100]
  00023	83 f9 01	 cmp	 ecx, 1
  00026	75 0c		 jne	 SHORT $LN14@Main
  00028	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0002b	0f b7 48 64	 movzx	 ecx, WORD PTR [eax+100]
  0002f	83 f9 01	 cmp	 ecx, 1
  00032	74 05		 je	 SHORT $LN13@Main
$LN14@Main:

; 101  : 	{
; 102  : 		return;

  00034	e9 cc 03 00 00	 jmp	 $LN1@Main
$LN13@Main:

; 103  : 	}
; 104  : 
; 105  : 	if (lpObj->Class == CLASS_KNIGHT)

  00039	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0003c	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00043	83 f9 01	 cmp	 ecx, 1
  00046	0f 85 b2 00 00
	00		 jne	 $LN15@Main

; 106  : 	{
; 107  : 		switch (lpTarget->Class)

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0004f	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00056	89 4d b8	 mov	 DWORD PTR tv78[ebp], ecx
  00059	83 7d b8 04	 cmp	 DWORD PTR tv78[ebp], 4
  0005d	0f 87 91 00 00
	00		 ja	 $LN22@Main
  00063	8b 55 b8	 mov	 edx, DWORD PTR tv78[ebp]
  00066	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN55@Main[edx*4]
$LN17@Main:

; 108  : 		{
; 109  : 		case CLASS_KNIGHT:		AttackDamage = (AttackDamage * this->DKvsDK) / 100; break;

  0006d	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	0f af 41 08	 imul	 eax, DWORD PTR [ecx+8]
  00079	99		 cdq
  0007a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0007f	f7 f9		 idiv	 ecx
  00081	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00084	89 02		 mov	 DWORD PTR [edx], eax
  00086	eb 71		 jmp	 SHORT $LN2@Main
$LN18@Main:

; 110  : 		case CLASS_WIZARD:		AttackDamage = (AttackDamage * this->DKvsDW) / 100; break;

  00088	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	8b 00		 mov	 eax, DWORD PTR [eax]
  00090	0f af 41 0c	 imul	 eax, DWORD PTR [ecx+12]
  00094	99		 cdq
  00095	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0009a	f7 f9		 idiv	 ecx
  0009c	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0009f	89 02		 mov	 DWORD PTR [edx], eax
  000a1	eb 56		 jmp	 SHORT $LN2@Main
$LN19@Main:

; 111  : 		case CLASS_ELF:			AttackDamage = (AttackDamage * this->DKvsELF) / 100; break;

  000a3	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	8b 00		 mov	 eax, DWORD PTR [eax]
  000ab	0f af 41 10	 imul	 eax, DWORD PTR [ecx+16]
  000af	99		 cdq
  000b0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000b5	f7 f9		 idiv	 ecx
  000b7	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  000ba	89 02		 mov	 DWORD PTR [edx], eax
  000bc	eb 3b		 jmp	 SHORT $LN2@Main
$LN20@Main:

; 112  : 		case CLASS_MAGUMSA:		AttackDamage = (AttackDamage * this->DKvsMG) / 100; break;

  000be	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
  000ca	99		 cdq
  000cb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000d0	f7 f9		 idiv	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  000d5	89 02		 mov	 DWORD PTR [edx], eax
  000d7	eb 20		 jmp	 SHORT $LN2@Main
$LN21@Main:

; 113  : 		case CLASS_DARKLORD:	AttackDamage = (AttackDamage * this->DKvsDL) / 100; break;

  000d9	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 00		 mov	 eax, DWORD PTR [eax]
  000e1	0f af 41 18	 imul	 eax, DWORD PTR [ecx+24]
  000e5	99		 cdq
  000e6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000eb	f7 f9		 idiv	 ecx
  000ed	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  000f0	89 02		 mov	 DWORD PTR [edx], eax
  000f2	eb 05		 jmp	 SHORT $LN2@Main
$LN22@Main:

; 114  : 		default:return;

  000f4	e9 0c 03 00 00	 jmp	 $LN1@Main
$LN2@Main:

; 115  : 		}
; 116  : 	}

  000f9	e9 07 03 00 00	 jmp	 $LN1@Main
$LN15@Main:

; 117  : 	else if (lpObj->Class == CLASS_WIZARD)

  000fe	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00101	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00108	85 c9		 test	 ecx, ecx
  0010a	0f 85 b2 00 00
	00		 jne	 $LN23@Main

; 118  : 	{
; 119  : 		switch (lpTarget->Class)

  00110	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  00113	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  0011a	89 4d b8	 mov	 DWORD PTR tv132[ebp], ecx
  0011d	83 7d b8 04	 cmp	 DWORD PTR tv132[ebp], 4
  00121	0f 87 91 00 00
	00		 ja	 $LN30@Main
  00127	8b 55 b8	 mov	 edx, DWORD PTR tv132[ebp]
  0012a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN56@Main[edx*4]
$LN25@Main:

; 120  : 		{
; 121  : 		case CLASS_WIZARD:		AttackDamage = (AttackDamage * this->DWvsDW) / 100; break;

  00131	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00137	8b 00		 mov	 eax, DWORD PTR [eax]
  00139	0f af 41 1c	 imul	 eax, DWORD PTR [ecx+28]
  0013d	99		 cdq
  0013e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00143	f7 f9		 idiv	 ecx
  00145	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00148	89 02		 mov	 DWORD PTR [edx], eax
  0014a	eb 71		 jmp	 SHORT $LN4@Main
$LN26@Main:

; 122  : 		case CLASS_KNIGHT:		AttackDamage = (AttackDamage * this->DWvsDK) / 100; break;

  0014c	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00152	8b 00		 mov	 eax, DWORD PTR [eax]
  00154	0f af 41 20	 imul	 eax, DWORD PTR [ecx+32]
  00158	99		 cdq
  00159	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0015e	f7 f9		 idiv	 ecx
  00160	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00163	89 02		 mov	 DWORD PTR [edx], eax
  00165	eb 56		 jmp	 SHORT $LN4@Main
$LN27@Main:

; 123  : 		case CLASS_ELF:			AttackDamage = (AttackDamage * this->DWvsELF) / 100; break;

  00167	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	0f af 41 24	 imul	 eax, DWORD PTR [ecx+36]
  00173	99		 cdq
  00174	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00179	f7 f9		 idiv	 ecx
  0017b	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0017e	89 02		 mov	 DWORD PTR [edx], eax
  00180	eb 3b		 jmp	 SHORT $LN4@Main
$LN28@Main:

; 124  : 		case CLASS_MAGUMSA:		AttackDamage = (AttackDamage * this->DWvsMG) / 100; break;

  00182	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00185	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	8b 00		 mov	 eax, DWORD PTR [eax]
  0018a	0f af 41 28	 imul	 eax, DWORD PTR [ecx+40]
  0018e	99		 cdq
  0018f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00194	f7 f9		 idiv	 ecx
  00196	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00199	89 02		 mov	 DWORD PTR [edx], eax
  0019b	eb 20		 jmp	 SHORT $LN4@Main
$LN29@Main:

; 125  : 		case CLASS_DARKLORD:	AttackDamage = (AttackDamage * this->DWvsDL) / 100; break;

  0019d	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	8b 00		 mov	 eax, DWORD PTR [eax]
  001a5	0f af 41 2c	 imul	 eax, DWORD PTR [ecx+44]
  001a9	99		 cdq
  001aa	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001af	f7 f9		 idiv	 ecx
  001b1	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  001b4	89 02		 mov	 DWORD PTR [edx], eax
  001b6	eb 05		 jmp	 SHORT $LN4@Main
$LN30@Main:

; 126  : 		default:return;

  001b8	e9 48 02 00 00	 jmp	 $LN1@Main
$LN4@Main:

; 127  : 		}
; 128  : 	}

  001bd	e9 43 02 00 00	 jmp	 $LN1@Main
$LN23@Main:

; 129  : 	else if (lpObj->Class == CLASS_ELF)

  001c2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001c5	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  001cc	83 f9 02	 cmp	 ecx, 2
  001cf	0f 85 b2 00 00
	00		 jne	 $LN31@Main

; 130  : 	{
; 131  : 		switch (lpTarget->Class)

  001d5	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  001d8	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  001df	89 4d b8	 mov	 DWORD PTR tv154[ebp], ecx
  001e2	83 7d b8 04	 cmp	 DWORD PTR tv154[ebp], 4
  001e6	0f 87 91 00 00
	00		 ja	 $LN38@Main
  001ec	8b 55 b8	 mov	 edx, DWORD PTR tv154[ebp]
  001ef	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN57@Main[edx*4]
$LN33@Main:

; 132  : 		{
; 133  : 		case CLASS_ELF:			AttackDamage = (AttackDamage * this->ELFvsELF) / 100; break;

  001f6	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  001f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	8b 00		 mov	 eax, DWORD PTR [eax]
  001fe	0f af 41 30	 imul	 eax, DWORD PTR [ecx+48]
  00202	99		 cdq
  00203	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00208	f7 f9		 idiv	 ecx
  0020a	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0020d	89 02		 mov	 DWORD PTR [edx], eax
  0020f	eb 71		 jmp	 SHORT $LN6@Main
$LN34@Main:

; 134  : 		case CLASS_KNIGHT:		AttackDamage = (AttackDamage * this->ELFvsDK) / 100; break;

  00211	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00214	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00217	8b 00		 mov	 eax, DWORD PTR [eax]
  00219	0f af 41 34	 imul	 eax, DWORD PTR [ecx+52]
  0021d	99		 cdq
  0021e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00223	f7 f9		 idiv	 ecx
  00225	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00228	89 02		 mov	 DWORD PTR [edx], eax
  0022a	eb 56		 jmp	 SHORT $LN6@Main
$LN35@Main:

; 135  : 		case CLASS_WIZARD:		AttackDamage = (AttackDamage * this->ELFvsDW) / 100; break;

  0022c	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0022f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00232	8b 00		 mov	 eax, DWORD PTR [eax]
  00234	0f af 41 38	 imul	 eax, DWORD PTR [ecx+56]
  00238	99		 cdq
  00239	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0023e	f7 f9		 idiv	 ecx
  00240	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00243	89 02		 mov	 DWORD PTR [edx], eax
  00245	eb 3b		 jmp	 SHORT $LN6@Main
$LN36@Main:

; 136  : 		case CLASS_MAGUMSA:		AttackDamage = (AttackDamage * this->ELFvsMG) / 100; break;

  00247	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0024a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	8b 00		 mov	 eax, DWORD PTR [eax]
  0024f	0f af 41 3c	 imul	 eax, DWORD PTR [ecx+60]
  00253	99		 cdq
  00254	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00259	f7 f9		 idiv	 ecx
  0025b	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0025e	89 02		 mov	 DWORD PTR [edx], eax
  00260	eb 20		 jmp	 SHORT $LN6@Main
$LN37@Main:

; 137  : 		case CLASS_DARKLORD:	AttackDamage = (AttackDamage * this->ELFvsDL) / 100; break;

  00262	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00268	8b 00		 mov	 eax, DWORD PTR [eax]
  0026a	0f af 41 40	 imul	 eax, DWORD PTR [ecx+64]
  0026e	99		 cdq
  0026f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00274	f7 f9		 idiv	 ecx
  00276	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00279	89 02		 mov	 DWORD PTR [edx], eax
  0027b	eb 05		 jmp	 SHORT $LN6@Main
$LN38@Main:

; 138  : 		default:return;

  0027d	e9 83 01 00 00	 jmp	 $LN1@Main
$LN6@Main:

; 139  : 		}
; 140  : 	}

  00282	e9 7e 01 00 00	 jmp	 $LN1@Main
$LN31@Main:

; 141  : 	else if (lpObj->Class == CLASS_MAGUMSA)

  00287	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0028a	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00291	83 f9 03	 cmp	 ecx, 3
  00294	0f 85 b2 00 00
	00		 jne	 $LN39@Main

; 142  : 	{
; 143  : 		switch (lpTarget->Class)

  0029a	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  0029d	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  002a4	89 4d b8	 mov	 DWORD PTR tv176[ebp], ecx
  002a7	83 7d b8 04	 cmp	 DWORD PTR tv176[ebp], 4
  002ab	0f 87 91 00 00
	00		 ja	 $LN46@Main
  002b1	8b 55 b8	 mov	 edx, DWORD PTR tv176[ebp]
  002b4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN58@Main[edx*4]
$LN41@Main:

; 144  : 		{
; 145  : 		case CLASS_MAGUMSA:		AttackDamage = (AttackDamage * this->MGvsMG) / 100; break;

  002bb	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  002be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c1	8b 00		 mov	 eax, DWORD PTR [eax]
  002c3	0f af 41 44	 imul	 eax, DWORD PTR [ecx+68]
  002c7	99		 cdq
  002c8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002cd	f7 f9		 idiv	 ecx
  002cf	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  002d2	89 02		 mov	 DWORD PTR [edx], eax
  002d4	eb 71		 jmp	 SHORT $LN8@Main
$LN42@Main:

; 146  : 		case CLASS_KNIGHT:		AttackDamage = (AttackDamage * this->MGvsDK) / 100; break;

  002d6	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	8b 00		 mov	 eax, DWORD PTR [eax]
  002de	0f af 41 48	 imul	 eax, DWORD PTR [ecx+72]
  002e2	99		 cdq
  002e3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002e8	f7 f9		 idiv	 ecx
  002ea	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  002ed	89 02		 mov	 DWORD PTR [edx], eax
  002ef	eb 56		 jmp	 SHORT $LN8@Main
$LN43@Main:

; 147  : 		case CLASS_WIZARD:		AttackDamage = (AttackDamage * this->MGvsDW) / 100; break;

  002f1	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f7	8b 00		 mov	 eax, DWORD PTR [eax]
  002f9	0f af 41 4c	 imul	 eax, DWORD PTR [ecx+76]
  002fd	99		 cdq
  002fe	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00303	f7 f9		 idiv	 ecx
  00305	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00308	89 02		 mov	 DWORD PTR [edx], eax
  0030a	eb 3b		 jmp	 SHORT $LN8@Main
$LN44@Main:

; 148  : 		case CLASS_ELF:			AttackDamage = (AttackDamage * this->MGvsELF) / 100; break;

  0030c	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00312	8b 00		 mov	 eax, DWORD PTR [eax]
  00314	0f af 41 50	 imul	 eax, DWORD PTR [ecx+80]
  00318	99		 cdq
  00319	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0031e	f7 f9		 idiv	 ecx
  00320	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00323	89 02		 mov	 DWORD PTR [edx], eax
  00325	eb 20		 jmp	 SHORT $LN8@Main
$LN45@Main:

; 149  : 		case CLASS_DARKLORD:	AttackDamage = (AttackDamage * this->MGvsDL) / 100; break;

  00327	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0032a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	8b 00		 mov	 eax, DWORD PTR [eax]
  0032f	0f af 41 54	 imul	 eax, DWORD PTR [ecx+84]
  00333	99		 cdq
  00334	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00339	f7 f9		 idiv	 ecx
  0033b	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0033e	89 02		 mov	 DWORD PTR [edx], eax
  00340	eb 05		 jmp	 SHORT $LN8@Main
$LN46@Main:

; 150  : 		default:return;

  00342	e9 be 00 00 00	 jmp	 $LN1@Main
$LN8@Main:

; 151  : 		}
; 152  : 	}

  00347	e9 b9 00 00 00	 jmp	 $LN1@Main
$LN39@Main:

; 153  : 	else if (lpObj->Class == CLASS_DARKLORD)

  0034c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0034f	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00356	83 f9 04	 cmp	 ecx, 4
  00359	0f 85 a6 00 00
	00		 jne	 $LN1@Main

; 154  : 	{
; 155  : 		switch (lpTarget->Class)

  0035f	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  00362	0f b7 88 9c 00
	00 00		 movzx	 ecx, WORD PTR [eax+156]
  00369	89 4d b8	 mov	 DWORD PTR tv198[ebp], ecx
  0036c	83 7d b8 04	 cmp	 DWORD PTR tv198[ebp], 4
  00370	0f 87 8f 00 00
	00		 ja	 $LN1@Main
  00376	8b 55 b8	 mov	 edx, DWORD PTR tv198[ebp]
  00379	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN59@Main[edx*4]
$LN48@Main:

; 156  : 		{
; 157  : 		case CLASS_DARKLORD:	AttackDamage = (AttackDamage * this->DLvsDL) / 100; break;

  00380	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  00383	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00386	8b 00		 mov	 eax, DWORD PTR [eax]
  00388	0f af 41 58	 imul	 eax, DWORD PTR [ecx+88]
  0038c	99		 cdq
  0038d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00392	f7 f9		 idiv	 ecx
  00394	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00397	89 02		 mov	 DWORD PTR [edx], eax
  00399	eb 6a		 jmp	 SHORT $LN1@Main
$LN49@Main:

; 158  : 		case CLASS_KNIGHT:		AttackDamage = (AttackDamage * this->DLvsDK) / 100; break;

  0039b	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0039e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a1	8b 00		 mov	 eax, DWORD PTR [eax]
  003a3	0f af 41 5c	 imul	 eax, DWORD PTR [ecx+92]
  003a7	99		 cdq
  003a8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003ad	f7 f9		 idiv	 ecx
  003af	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  003b2	89 02		 mov	 DWORD PTR [edx], eax
  003b4	eb 4f		 jmp	 SHORT $LN1@Main
$LN50@Main:

; 159  : 		case CLASS_WIZARD:		AttackDamage = (AttackDamage * this->DLvsDW) / 100; break;

  003b6	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  003b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bc	8b 00		 mov	 eax, DWORD PTR [eax]
  003be	0f af 41 60	 imul	 eax, DWORD PTR [ecx+96]
  003c2	99		 cdq
  003c3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003c8	f7 f9		 idiv	 ecx
  003ca	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  003cd	89 02		 mov	 DWORD PTR [edx], eax
  003cf	eb 34		 jmp	 SHORT $LN1@Main
$LN51@Main:

; 160  : 		case CLASS_ELF:			AttackDamage = (AttackDamage * this->DLvsELF) / 100; break;

  003d1	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  003d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d7	8b 00		 mov	 eax, DWORD PTR [eax]
  003d9	0f af 41 64	 imul	 eax, DWORD PTR [ecx+100]
  003dd	99		 cdq
  003de	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003e3	f7 f9		 idiv	 ecx
  003e5	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  003e8	89 02		 mov	 DWORD PTR [edx], eax
  003ea	eb 19		 jmp	 SHORT $LN1@Main
$LN52@Main:

; 161  : 		case CLASS_MAGUMSA:		AttackDamage = (AttackDamage * this->DLvsMG) / 100; break;

  003ec	8b 45 10	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  003ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	8b 00		 mov	 eax, DWORD PTR [eax]
  003f4	0f af 41 68	 imul	 eax, DWORD PTR [ecx+104]
  003f8	99		 cdq
  003f9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003fe	f7 f9		 idiv	 ecx
  00400	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00403	89 02		 mov	 DWORD PTR [edx], eax
$LN1@Main:

; 162  : 		default:return;
; 163  : 		}
; 164  : 	}
; 165  : }

  00405	5f		 pop	 edi
  00406	5e		 pop	 esi
  00407	5b		 pop	 ebx
  00408	8b e5		 mov	 esp, ebp
  0040a	5d		 pop	 ebp
  0040b	c2 0c 00	 ret	 12			; 0000000cH
  0040e	66 90		 npad	 2
$LN55@Main:
  00410	00 00 00 00	 DD	 $LN18@Main
  00414	00 00 00 00	 DD	 $LN17@Main
  00418	00 00 00 00	 DD	 $LN19@Main
  0041c	00 00 00 00	 DD	 $LN20@Main
  00420	00 00 00 00	 DD	 $LN21@Main
$LN56@Main:
  00424	00 00 00 00	 DD	 $LN25@Main
  00428	00 00 00 00	 DD	 $LN26@Main
  0042c	00 00 00 00	 DD	 $LN27@Main
  00430	00 00 00 00	 DD	 $LN28@Main
  00434	00 00 00 00	 DD	 $LN29@Main
$LN57@Main:
  00438	00 00 00 00	 DD	 $LN35@Main
  0043c	00 00 00 00	 DD	 $LN34@Main
  00440	00 00 00 00	 DD	 $LN33@Main
  00444	00 00 00 00	 DD	 $LN36@Main
  00448	00 00 00 00	 DD	 $LN37@Main
$LN58@Main:
  0044c	00 00 00 00	 DD	 $LN43@Main
  00450	00 00 00 00	 DD	 $LN42@Main
  00454	00 00 00 00	 DD	 $LN44@Main
  00458	00 00 00 00	 DD	 $LN41@Main
  0045c	00 00 00 00	 DD	 $LN45@Main
$LN59@Main:
  00460	00 00 00 00	 DD	 $LN50@Main
  00464	00 00 00 00	 DD	 $LN49@Main
  00468	00 00 00 00	 DD	 $LN51@Main
  0046c	00 00 00 00	 DD	 $LN52@Main
  00470	00 00 00 00	 DD	 $LN48@Main
?Main@cBalanceSystem@@QAEXPAVOBJECTSTRUCT@@0AAH@Z ENDP	; cBalanceSystem::Main
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?ReadConfigs@cBalanceSystem@@QAEXPAD@Z
_TEXT	SEGMENT
tv71 = -69						; size = 1
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?ReadConfigs@cBalanceSystem@@QAEXPAD@Z PROC		; cBalanceSystem::ReadConfigs, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	this->Enable = GetPrivateProfileInt("Common", "Enable", 1, File);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0000f	50		 push	 eax
  00010	6a 01		 push	 1
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable@
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00022	85 c0		 test	 eax, eax
  00024	74 06		 je	 SHORT $LN3@ReadConfig
  00026	c6 45 bb 01	 mov	 BYTE PTR tv71[ebp], 1
  0002a	eb 04		 jmp	 SHORT $LN4@ReadConfig
$LN3@ReadConfig:
  0002c	c6 45 bb 00	 mov	 BYTE PTR tv71[ebp], 0
$LN4@ReadConfig:
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8a 55 bb	 mov	 dl, BYTE PTR tv71[ebp]
  00036	88 51 04	 mov	 BYTE PTR [ecx+4], dl

; 55   : 
; 56   : 	this->DKvsDK = GetPrivateProfileInt("Common", "DKvsDK", 100, File);

  00039	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0003c	50		 push	 eax
  0003d	6a 64		 push	 100			; 00000064H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06NMEOCCIL@DKvsDK@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 57   : 	this->DKvsDW = GetPrivateProfileInt("Common", "DKvsDW", 100, File);

  00055	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00058	50		 push	 eax
  00059	6a 64		 push	 100			; 00000064H
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_06DKDJHPNG@DKvsDW@
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 58   : 	this->DKvsELF = GetPrivateProfileInt("Common", "DKvsELF", 100, File);

  00071	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00074	50		 push	 eax
  00075	6a 64		 push	 100			; 00000064H
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_07GBGGINOJ@DKvsELF@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 59   : 	this->DKvsMG = GetPrivateProfileInt("Common", "DKvsMG", 100, File);

  0008d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00090	50		 push	 eax
  00091	6a 64		 push	 100			; 00000064H
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_06HPCKFGAI@DKvsMG@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 60   : 	this->DKvsDL = GetPrivateProfileInt("Common", "DKvsDL", 100, File);

  000a9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  000ac	50		 push	 eax
  000ad	6a 64		 push	 100			; 00000064H
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_06JDAPLEEM@DKvsDL@
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 61   : 
; 62   : 	this->DWvsDW = GetPrivateProfileInt("Common", "DWvsDW", 100, File);

  000c5	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  000c8	50		 push	 eax
  000c9	6a 64		 push	 100			; 00000064H
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_06EOCNLNDG@DWvsDW@
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 63   : 	this->DWvsDK = GetPrivateProfileInt("Common", "DWvsDK", 100, File);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  000e4	50		 push	 eax
  000e5	6a 64		 push	 100			; 00000064H
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_06KIFKOAGL@DWvsDK@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 64   : 	this->DWvsELF = GetPrivateProfileInt("Common", "DWvsELF", 100, File);

  000fd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00100	50		 push	 eax
  00101	6a 64		 push	 100			; 00000064H
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_07MBBIHLFD@DWvsELF@
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 65   : 	this->DWvsMG = GetPrivateProfileInt("Common", "DWvsMG", 100, File);

  00119	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0011c	50		 push	 eax
  0011d	6a 64		 push	 100			; 00000064H
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_06LDOJEOI@DWvsMG@
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 66   : 	this->DWvsDL = GetPrivateProfileInt("Common", "DWvsDL", 100, File);

  00135	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00138	50		 push	 eax
  00139	6a 64		 push	 100			; 00000064H
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_06OHBLHGKM@DWvsDL@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0014b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 67   : 
; 68   : 	this->ELFvsELF = GetPrivateProfileInt("Common", "ELFvsELF", 100, File);

  00151	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00154	50		 push	 eax
  00155	6a 64		 push	 100			; 00000064H
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_08MEHKHKBD@ELFvsELF@
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 69   : 	this->ELFvsDK = GetPrivateProfileInt("Common", "ELFvsDK", 100, File);

  0016d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00170	50		 push	 eax
  00171	6a 64		 push	 100			; 00000064H
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_07MKAMLDKM@ELFvsDK@
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00183	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 70   : 	this->ELFvsDW = GetPrivateProfileInt("Common", "ELFvsDW", 100, File);

  00189	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0018c	50		 push	 eax
  0018d	6a 64		 push	 100			; 00000064H
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_07CMHLOOPB@ELFvsDW@
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a2	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 71   : 	this->ELFvsMG = GetPrivateProfileInt("Common", "ELFvsMG ", 100, File);

  001a5	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001a8	50		 push	 eax
  001a9	6a 64		 push	 100			; 00000064H
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_08DODMHBDM@ELFvsMG?5@
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 72   : 	this->ELFvsDL = GetPrivateProfileInt("Common", "ELFvsDL", 100, File);

  001c1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001c4	50		 push	 eax
  001c5	6a 64		 push	 100			; 00000064H
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_07IFENCFGL@ELFvsDL@
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001da	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 73   : 
; 74   : 	this->MGvsMG = GetPrivateProfileInt("Common", "MGvsMG", 100, File);

  001dd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001e0	50		 push	 eax
  001e1	6a 64		 push	 100			; 00000064H
  001e3	68 00 00 00 00	 push	 OFFSET ??_C@_06JNHANDKA@MGvsMG@
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 75   : 	this->MGvsDK = GetPrivateProfileInt("Common", "MGvsDK", 100, File);

  001f9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  001fc	50		 push	 eax
  001fd	6a 64		 push	 100			; 00000064H
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_06DOBEKHCD@MGvsDK@
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 76   : 	this->MGvsDW = GetPrivateProfileInt("Common", "MGvsDW", 100, File);

  00215	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00218	50		 push	 eax
  00219	6a 64		 push	 100			; 00000064H
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_06NIGDPKHO@MGvsDW@
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 77   : 	this->MGvsELF = GetPrivateProfileInt("Common", "MGvsELF", 100, File);

  00231	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00234	50		 push	 eax
  00235	6a 64		 push	 100			; 00000064H
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_07LJIJPMLG@MGvsELF@
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00247	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024a	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 78   : 	this->MGvsDL = GetPrivateProfileInt("Common", "MGvsDL", 100, File);

  0024d	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00250	50		 push	 eax
  00251	6a 64		 push	 100			; 00000064H
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_06HBFFDBOE@MGvsDL@
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00263	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00266	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 79   : 
; 80   : 	this->DLvsDL = GetPrivateProfileInt("Common", "DLvsDL", 100, File);

  00269	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  0026c	50		 push	 eax
  0026d	6a 64		 push	 100			; 00000064H
  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_06IOAKIEPE@DLvsDL@
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00279	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0027f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00282	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 81   : 	this->DLvsDK = GetPrivateProfileInt("Common", "DLvsDK", 100, File);

  00285	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00288	50		 push	 eax
  00289	6a 64		 push	 100			; 00000064H
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_06MBELBCDD@DLvsDK@
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0029b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 82   : 	this->DLvsDW = GetPrivateProfileInt("Common", "DLvsDW", 100, File);

  002a1	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002a4	50		 push	 eax
  002a5	6a 64		 push	 100			; 00000064H
  002a7	68 00 00 00 00	 push	 OFFSET ??_C@_06CHDMEPGO@DLvsDW@
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ba	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 83   : 	this->DLvsELF = GetPrivateProfileInt("Common", "DLvsELF", 100, File);

  002bd	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002c0	50		 push	 eax
  002c1	6a 64		 push	 100			; 00000064H
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_07KEMBLDGH@DLvsELF@
  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d6	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 84   : 	this->DLvsMG = GetPrivateProfileInt("Common", "DLvsMG", 100, File);

  002d9	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  002dc	50		 push	 eax
  002dd	6a 64		 push	 100			; 00000064H
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_06GCCPGGLA@DLvsMG@
  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_06POMJKEPM@Common@
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f2	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 85   : }

  002f5	5f		 pop	 edi
  002f6	5e		 pop	 esi
  002f7	5b		 pop	 ebx
  002f8	8b e5		 mov	 esp, ebp
  002fa	5d		 pop	 ebp
  002fb	c2 04 00	 ret	 4
?ReadConfigs@cBalanceSystem@@QAEXPAD@Z ENDP		; cBalanceSystem::ReadConfigs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?Init@cBalanceSystem@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@cBalanceSystem@@QAEXXZ PROC			; cBalanceSystem::Init, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	this->Enable = true;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 20   : 
; 21   : 	this->DKvsDK = 100;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c7 40 08 64 00
	00 00		 mov	 DWORD PTR [eax+8], 100	; 00000064H

; 22   : 	this->DKvsDW = 100;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 0c 64 00
	00 00		 mov	 DWORD PTR [eax+12], 100	; 00000064H

; 23   : 	this->DKvsELF = 100;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 40 10 64 00
	00 00		 mov	 DWORD PTR [eax+16], 100	; 00000064H

; 24   : 	this->DKvsMG = 100;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 40 14 64 00
	00 00		 mov	 DWORD PTR [eax+20], 100	; 00000064H

; 25   : 	this->DKvsDL = 100;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	c7 40 18 64 00
	00 00		 mov	 DWORD PTR [eax+24], 100	; 00000064H

; 26   : 
; 27   : 	this->DWvsDW = 100;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 40 1c 64 00
	00 00		 mov	 DWORD PTR [eax+28], 100	; 00000064H

; 28   : 	this->DWvsDK = 100;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 20 64 00
	00 00		 mov	 DWORD PTR [eax+32], 100	; 00000064H

; 29   : 	this->DWvsELF = 100;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	c7 40 24 64 00
	00 00		 mov	 DWORD PTR [eax+36], 100	; 00000064H

; 30   : 	this->DWvsMG = 100;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 40 28 64 00
	00 00		 mov	 DWORD PTR [eax+40], 100	; 00000064H

; 31   : 	this->DWvsDL = 100;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 40 2c 64 00
	00 00		 mov	 DWORD PTR [eax+44], 100	; 00000064H

; 32   : 
; 33   : 	this->ELFvsELF = 100;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	c7 40 30 64 00
	00 00		 mov	 DWORD PTR [eax+48], 100	; 00000064H

; 34   : 	this->ELFvsDK = 100;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00084	c7 40 34 64 00
	00 00		 mov	 DWORD PTR [eax+52], 100	; 00000064H

; 35   : 	this->ELFvsDW = 100;

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	c7 40 38 64 00
	00 00		 mov	 DWORD PTR [eax+56], 100	; 00000064H

; 36   : 	this->ELFvsMG = 100;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	c7 40 3c 64 00
	00 00		 mov	 DWORD PTR [eax+60], 100	; 00000064H

; 37   : 	this->ELFvsDL = 100;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 40 64 00
	00 00		 mov	 DWORD PTR [eax+64], 100	; 00000064H

; 38   : 
; 39   : 	this->MGvsMG = 100;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	c7 40 44 64 00
	00 00		 mov	 DWORD PTR [eax+68], 100	; 00000064H

; 40   : 	this->MGvsDK = 100;

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	c7 40 48 64 00
	00 00		 mov	 DWORD PTR [eax+72], 100	; 00000064H

; 41   : 	this->MGvsDW = 100;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	c7 40 4c 64 00
	00 00		 mov	 DWORD PTR [eax+76], 100	; 00000064H

; 42   : 	this->MGvsELF = 100;

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 40 50 64 00
	00 00		 mov	 DWORD PTR [eax+80], 100	; 00000064H

; 43   : 	this->MGvsDL = 100;

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	c7 40 54 64 00
	00 00		 mov	 DWORD PTR [eax+84], 100	; 00000064H

; 44   : 
; 45   : 	this->DLvsDL = 100;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000de	c7 40 58 64 00
	00 00		 mov	 DWORD PTR [eax+88], 100	; 00000064H

; 46   : 	this->DLvsDK = 100;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	c7 40 5c 64 00
	00 00		 mov	 DWORD PTR [eax+92], 100	; 00000064H

; 47   : 	this->DLvsDW = 100;

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	c7 40 60 64 00
	00 00		 mov	 DWORD PTR [eax+96], 100	; 00000064H

; 48   : 	this->DLvsELF = 100;

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	c7 40 64 64 00
	00 00		 mov	 DWORD PTR [eax+100], 100 ; 00000064H

; 49   : 	this->DLvsMG = 100;

  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	c7 40 68 64 00
	00 00		 mov	 DWORD PTR [eax+104], 100 ; 00000064H

; 50   : }

  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
?Init@cBalanceSystem@@QAEXXZ ENDP			; cBalanceSystem::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?Load@cBalanceSystem@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_File$ = 8						; size = 4
?Load@cBalanceSystem@@QAEXPAD@Z PROC			; cBalanceSystem::Load, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	this->Init();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Init@cBalanceSystem@@QAEXXZ ; cBalanceSystem::Init

; 90   : 
; 91   : 	this->ReadConfigs(File);

  00014	8b 45 08	 mov	 eax, DWORD PTR _File$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?ReadConfigs@cBalanceSystem@@QAEXPAD@Z ; cBalanceSystem::ReadConfigs

; 92   : 
; 93   : 	LogAddC(LOGC_BLUE, "Load Balance System Active %d", this->Enable);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@INDCDFJD@Load?5Balance?5System?5Active?5?$CFd@
  0002d	6a 04		 push	 4
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 94   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Load@cBalanceSystem@@QAEXPAD@Z ENDP			; cBalanceSystem::Load
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ??1cBalanceSystem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1cBalanceSystem@@UAE@XZ PROC				; cBalanceSystem::~cBalanceSystem, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7cBalanceSystem@@6B@

; 14   : 
; 15   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1cBalanceSystem@@UAE@XZ ENDP				; cBalanceSystem::~cBalanceSystem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ??0cBalanceSystem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0cBalanceSystem@@QAE@XZ PROC				; cBalanceSystem::cBalanceSystem, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7cBalanceSystem@@6B@

; 9    : 	this->Init();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Init@cBalanceSystem@@QAEXXZ ; cBalanceSystem::Init

; 10   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0cBalanceSystem@@QAE@XZ ENDP				; cBalanceSystem::cBalanceSystem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Mu Online\Mu-GS-Webzen-MC-10093\GameServer\BalanceSystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
